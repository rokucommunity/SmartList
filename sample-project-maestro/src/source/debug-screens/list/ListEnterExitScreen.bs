import "pkg:/source/sl/ListMixin.bs"
import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/roku_modules/maestro/core/DebugTimer.brs"
import "pkg:/source/sl/CommonListApi.bs"

@node("ListEnterExitScreen", "mv_BaseScreen")
class ListEnterExitScreen extends mv.BaseScreen

  @observer("onRemoveItems")
  @alwaysnotify
  public removeItems = 0

  private modifyActions = ["removeCell", "removeRow", "toggleHide", "toggleFocus", "addCell", "addRow"]
  'removeCell|removeRow|toggleHide|toggleFocus|addCell|addRow
  public modifyAction = "removeCell"

  @observer("onUpdateNow")
  @alwaysnotify
  public _updateNow = false

  'views
  private list
  private listHolder
  private bgRect

  'style
  private numberOfRows = 5
  private numberOfItems = 10
  ' private numberOfRows = 10
  ' private numberOfRows = 10
  ' private numberOfItems = 10
  ' private defaultCellType = "PosterCellEfficient"
  private defaultCellType = "RowListCellForMaestroList"

  'state
  public componentPool as mc.types.node
  private contentId = 0
  private rowSettings
  private focusSettings
  private cellSettings
  private loadingIndicator
  private scrollSpeed = 0.3
  private numberItemsToRenderAfter = 4
  private numberItemsToRenderBefore = 2

  ' private scrollSpeed = 4 'roku 2
  private button as mc.types.node
  private label as mc.types.node
  private updateInfoTimeout as mc.types.node
  private isListLoaded = false
  private listContent as mc.types.node
  private currentRowIndex = 0

  function new()
    super("ListEnterExitScreen")
  end function

  protected override function initialize()
    super.initialize()
    translation = [0, 0]
    size = [1920, 1080]

    m.bgRect = m.createSGNode("sv_Rectangle", m.top, "bgRect", {
      translation: translation
      size: size
      color: "#6a307d"
    })
    m.listHolder = m.createSGNode("Group", m.top, "listHolder")
    m.componentPool = m.global.componentPool

    m.list = m.createSGNode("sl_List", m.listHolder, "list", {
      translation: translation
      width: size[0]
      height: size[1]
    })
    m.button = m.createSGNode("sv_Button", m.top, "button", {
      text: "create list"
      autosize: true
    })

    m.label = m.createSGNode("sv_Label", m.top, "label", {
      translation: [500, 0]
      size: [1000, 50]
      fontKey: "mediumbold,30"
      color: "#ffffff"
    })

    m.observe(m.button.selected, m.onButtonClick, "none")
    mioc.setInstance("list", m.list)
    m.loadingIndicator = m.createSGNode("LoadingIndicator", m.top, "loadingIndicator", {
      isActive: false
      width: 1920
      height: 1080
      backgroundVisible: false
    })
    m.onResetChange()
    m.onButtonClick()
    m.list.delegate = m.top
  end function

  private function onButtonClick()
    m.loadingIndicator.isActive = true
    m.isListLoaded = true
    m.onShowList()
    m.setFocus(m.list)
  end function

  private function onResetChange()
    m.list@.setContent(invalid)
    m.cellSettings = sl.listMixin.createCellSettings(m.defaultCellType, [400, 250], 30)

    ' timer = new mc.utils.DebugTimer("list")

    m.focusSettings = sl.listMixin.createFocusSettings("fixed")
    m.rowSettings = sl.listMixin.createRowSettings(m.cellSettings, m.focusSettings, 30)
    headerSetings = sl.listMixin.createHeaderSettings()
    listSettings = sl.listMixin.createListSettings()
    listSettings.sendScrollStartStop = false
    listSettings.sendScrollUpdate = false
    listSettings.rowCreationStrategy = "async"
    listSettings.rowCreationBatchSize = 5
    listSettings.rowCreationBatchDelay = 0.3
    listSettings.animSpeeds = [1]

    listSettings.renderStrategy = "dynamic"
    ' listSettings.renderStrategy = "all"
    listSettings.numberItemsToRenderAfter = m.numberItemsToRenderAfter
    listSettings.numberItemsToRenderBefore = m.numberItemsToRenderBefore

    content = sl.listMixin.createListContent(m.focusSettings, m.rowSettings, listSettings)

    m.observe(content.change, m.onContentChange)
    items = m.createGridData()
    m.button.text = `create list with ${m.contentId} items`
    ' timer.log("makeData")
    m.setFocus(m.button)
    content.appendChildren(items)

    m.listContent = content
  end function

  private function onShowList()
    m.listContent@.setNotificationsEnabled(false)

    m.list@.setContent(m.listContent)
    ' timer.log("set content")
    if m.list.state = "rendered"
      m.onListRenderState("rendered")
      m.loadingIndicator.isActive = false
    else
      m.observeNodeField(m.list, "state", m.onListRenderState, "value", true)
    end if
  end function

  private function onListRenderState(state as string)
    m.log.info("onListRenderState", state)
    if state = "rendered"
      ' m.setFocus(m.list)
      ' m.list@.moveToIndex([0, 0], false)
      ' m.list.visible = true
      m.loadingIndicator.isActive = false
      ' m.list.clippingRect = [0, -5000, 20000, 20000]
      ' m.list.translation = [0, 300]
      ' m.list.scale = [0.5, 0.5]

    end if
  end function

  private function createGridData()
    content = []
    showHero = true
    showComplex = false
    showNormal = true

    showGrids = false

    'TODO - add normal rows around this
    for i = 0 to m.numberOfRows - 1
      row = createObject("roSGNode", "sl_RowContent")
      mc.setOrAddNodeField(row, "index", `${m.currentRowIndex}`)
      m.currentRowIndex++
      row.id = rnd(2147483647).toStr()
      if showHero and (i = 0 or i = 6 or i = 12 or i = 18 or i = 25 or i = 35 or i = 45)
        row0FocusSettings = sl.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
        if i = 0
          row0FocusSettings.feedbackStyle = "none"
        end if
        cellSettings = sl.listMixin.createCellSettings("HeroCellEfficient", [1100, 700], 30)
        row.settings = sl.listMixin.createRowSettings(cellSettings, row0FocusSettings)
        row.settings.headerSettings.position = "none"
        row.settings.contentOffset = [400, -30]
        row.settings.screenPos = -1
      else if showComplex and (i = 1 or i = 8 or i = 14)
        row.settings = sl.listMixin.createCustomRowSettings("ComplexRowEfficient", 700)
      else if showGrids and (i = 4 or i = 12) ' or i = 20 or i = 30 or i = 40 or i = 50)
        gridFocusSettings = sl.listMixin.createFocusSettings("floating", [0, 0, 0, 0])
        if i = -2
          numCols = 1
        else
          numCols = 3
        end if

        row.settings = sl.listMixin.createGridRowSettings(m.cellSettings, gridFocusSettings, 30, invalid, 150, numCols, 250, 5, 50)
        row.settings.contentOffset = [100, 30]
        ' row.settings.peekNextPixels = 300
        ' if i = 3
        ' else
        ' end if

      else if showNormal 'and (i = 2 or i = 3 or i = 20 or i = 30 or i = 40)
        ' focusSettings = sl.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
        focusSettings = sl.listMixin.createFocusSettings("floating", [0, 0, 0, 0])
        row.settings = sl.listMixin.createRowSettings(m.cellSettings, focusSettings)
        ' row.settings.renderStrategy = "all"
        ' row.settings.renderStrategy = "all"
        row.settings.contentOffset = [100, 30]
        ' row.settings.height = 550
        row.settings.height = 300
        ' row.settings.peekNextPixels = 300
        row.settings.screenPos = 200
        ' if i = 1 or i = 19 or i = 32 or i = 40 or i = 38 or i = 45
        '   row.settings.screenPos = 800
        ' else if i = 5 or i = 15 or i = 23 or i = 30 or i = 34
        '   row.settings.screenPos = 600
        ' else if i = 3 or i = 7 or i - 22
        '   row.settings.screenPos = 200
        ' else if i = 13 or i = 17
        '   row.settings.screenPos = 50
        ' end if
      end if
      ' numItems = 50
      row.title = "ROW " + str(i)
      ' row.settings.screenPos = 400
      row.settings.screenPos = 0
      content.push(row)
      m.observe(row.change, m.onRowChange)
      row.appendChildren(m.makeItems(m.defaultCellType, m.numberOfItems, "HORIZ"))
    end for

    return content
  end function


  private function onContentChange(change as mc.types.assocarray)
    ? " SCREEN content change " change
  end function


  private function onRowChange(change as mc.types.assocarray)
    ? "SCREEN: ROW change " change
  end function

  private function makeItems(cellType as string, number as integer, prefix = "Item" as string)
    items = []
    for i = 0 to number - 1
      items.push(m.makeItem(cellType, `${prefix} ${m.contentId} [${i}]`))
    end for
    return items
  end function

  private function makeItem(cellType as string, title as string) as mc.types.node
    id = "I:" + m.contentId.toStr()
    child = m.createSGNode("Item", invalid, id, {
      json: {
        title: title
        description: "some really long " + id + "text in here " + id
        posterUrl: "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      }
    })

    child.description = "some really long " + id + "text in here " + id
    child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
    child.title = title
    m.contentId++
    return child
  end function

  private function onRemoveItems(numItems as integer)
    row = m.list.content.getChild(m.list.focusedRowIndex)
    startIndex = row.getChildCount() - numItems
    row.removeChildrenIndex(startIndex, numItems)
  end function

  private function onUpdateNow()
    m.log.info("UPDATING CONTENT NOW")

    for i = m.list.focusedRowIndex to m.list.focusedRowIndex
      module = m.list.content.getChild(i)
      if module <> invalid
        m.log.info("Updating module", i)
      end if
    end for
    ' m.list@.synchronizeContent()
  end function

  private function addRow(rowOffset as integer)
    index = m.list.focusedRowIndex + rowOffset
    rowFocusSettings = sl.listMixin.createFocusSettings("fixed", [0, 0, 0, 0])
    row = createObject("roSGNode", "sl_RowContent")
    rowFocusSettings.feedbackColor = "#F4D42A"
    headerSettings = sl.listMixin.createHeaderSettings([30, 20], 80, "mediumBold,50", "#ffff00")
    cellSettings = sl.listMixin.createCellSettings(m.defaultCellType, [400, 250], 100)
    row.settings = sl.listMixin.createRowSettings(cellSettings, rowFocusSettings, 30, headerSettings)
    ' row.settings.contentOffset = [100, 0]

    row.title = "NEW ROW " + m.contentId.toStr()
    row.id = rnd(2147483647).toStr()
    mc.setOrAddNodeField(row, "index", `${m.currentRowIndex}`)
    m.currentRowIndex++
    m.contentId++
    row.appendChildren(m.makeItems(m.defaultCellType, 5))
    m.list.content.insertChild(row, index)
    ' m.list@.synchronizeContent()
  end function

  private function removeRow(rowOffset as integer)
    rowIndex = m.list.focusedRowIndex + rowOffset
    'bs:disable-next-line
    m.list.content.removeChildIndex(rowIndex)
    ' m.list@.synchronizeContent()
  end function

  private function toggleRowFocus(rowOffset as integer)
    rowIndex = m.list.focusedRowIndex + rowOffset
    row = m.list.content.getChild(rowIndex)
    if row <> invalid
      row.isFocusEnabled = not row.isFocusEnabled
    end if
    ' m.list@.synchronizeContent()
  end function

  private function toggleRowHidden(rowOffset as integer)
    rowIndex = m.list.focusedRowIndex + rowOffset
    row = m.list.content.getChild(rowIndex)
    if row <> invalid
      row.isHidden = not row.isHidden
    end if
    ' m.list@.synchronizeContent()
  end function

  private function addCell(rowOffset = 0 as integer, cellOffset = 0 as integer)
    rowIndex = m.list.focusedRowIndex + rowOffset
    cellIndex = m.list.focusedCellIndex + cellOffset

    rowContent = m.list.content.getChild(rowIndex)
    rowContent.insertChild(m.makeItems(m.defaultCellType, 1)[0], cellIndex)
    ' m.list@.synchronizeContent()
  end function

  private function removeCell(rowOffset = 0 as integer, cellOffset = 0 as integer)
    rowIndex = m.list.focusedRowIndex + rowOffset
    cellIndex = m.list.focusedCellIndex + cellOffset
    m.log.info("removing item at ", rowIndex, cellIndex)
    rowContent = m.list.content.getChild(rowIndex)
    ? " REMOVING INDEX " cellIndex " FROM " rowIndex " row " mc.dv(rowContent)
    rowContent.removeChild(rowContent.getChild(cellIndex))
    'bs:disable-next-line
    ' rowContent.removeChildIndex(cellIndex)
    ' m.list@.synchronizeContent()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function doAction(offset as integer)
    m.log.info("doing action", m.modifyAction)
    ? " ACTION " m.modifyAction

    if m.modifyAction = "removeCell"
      m.removeCell(0, offset)
    else if m.modifyAction = "removeRow"
      m.removeRow(offset)
    else if m.modifyAction = "addCell"
      m.addCell(0, offset)
    else if m.modifyAction = "addRow"
      m.addRow(offset)
    else if m.modifyAction = "toggleFocus"
      m.toggleRowFocus(offset)
    else if m.modifyAction = "toggleHide"
      m.toggleRowHidden(offset)
    end if
  end function

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return key <> "back"
  end function


  protected override function onKeyPressBack() as boolean
    m.log.info("resetting list content")

    m.list@.setContent(invalid)
    return super.onKeyPressBack()
  end function

  private function onKeyPressOptions() as boolean
    m.log.info("remove next")
    m.doAction(1)
    return true
  end function

  private function onKeyPressReplay() as boolean
    m.list@.moveToRow(m.list.focusedrowIndex - 5, true, 3)
    ' m.log.info("remove previous")
    ' m.doAction(-1)
    return true
  end function

  private function onKeyPressPlay() as boolean
    m.list@.moveToRow(m.list.focusedrowIndex + 5, true, 3)
    ' m.modifyAction = mc.collections.getItemAtOffset(m.modifyActions, m.modifyAction, 1, invalid, true)
    ' m.log.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
    ' m.log.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
    ' m.log.info("m.modifyAction ", m.modifyAction)

    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
    m.list.isHidden = false
    m.updateInfoTimeout = m.setInterval(function()
      ' pool = m.global.componentPool@.getComponentPool("PosterCellEfficient")
      pool = m.global.componentPool@.getComponentPool("RowListCellForMaestroList")
      m.label.text = `cells created: ${pool.numberOfComponentsInPool} in use: ${pool.usedComponentsById.count()} RI: ${m.list.focusedRowIndex} CI ${m.list.focusedCellIndex} SRI ${m.list.focusedSubRowIndex}`
    end function, 0.1)
  end function

  protected override function onHide()
    super.onHide()
    m.cancelInterval(m.updateInfoTimeout)
    m.list.isHidden = true
  end function

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)
    m.log.info("onGainedFocus", isSelfFocused)

    if isSelfFocused
      m.setFocus(m.isListLoaded ? m.list : m.button)
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Delegate Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onRowData(event as sl.ListEvent)
    m.log.info("received row data for index", event.rowIndex, event.data)
    m.log.info("updating data")
    item = m.list.content.getChild(event.rowIndex)
    mc.setOrAddNodeField(item, "rowText", "ROW HAS changed")
    item@.notifyUpdate()
    ' m.list@.synchronizeContent()
  end function

  private function onRowDidGainFocus(event as sl.ListEvent)
    ' ? "+SCREEN onRowDidGainFocus : R: "; event.rowIndex ; "SR: "; event.subRowIndex ; " D:" ; event.direction

    row = m.list@.getRowRenderer(event.rowIndex)
    if row <> invalid
      mioc.setInstance("focusedIndex", {
        row: event.rowIndex
        cell: row.focusedCellIndex
      })
    else
      mioc.setInstance("focusedIndex", {
        row: -1
        cell: -1
      })

    end if

    ' if event.direction = -1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = 1
    ' end if
  end function

  private function onRowDidLoseFocus(event as sl.ListEvent)
    ' ? "+SCREEN onRowDidLoseFocus : R: "; event.rowIndex ; "SR: "; event.subRowIndex ; " D:" ; event.direction

    ' row = m.list@.getRowRenderer(event.rowIndex)
    ' if event.direction = 1
    '   row.opacity = 0
    ' end if

  end function

  private function onRowGainingFocus(event as sl.ListEvent)
    ' ? "+SCREEN onRowGainingFocus : R: "; event.rowIndex ; "SR: "; event.subRowIndex ; " D:" ; event.direction ; " F: " ; event.fraction
    ' if event.direction = -1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = event.fraction
    ' end if
  end function

  private function onRowLosingFocus(event as sl.ListEvent)
    ' ? "+SCREEN onRowLosingFocus : R: "; event.rowIndex ; "SR: "; event.subRowIndex ; " D:" ; event.direction ; " F: " ; event.fraction
    ' if event.direction = 1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = 1 - event.fraction
    ' end if
  end function

  private function onCellWillGainFocus(event as sl.ListEvent)
    ' ? "+SCREEN onCellWillGainFocus : R: "; event.rowIndex ; " I: " ; event.cellIndex; " D:" ; event.direction
    mioc.setInstance("focusedIndex", {
      row: event.rowIndex
      cell: event.cellIndex
    })
  end function

  private function onCellDidGainFocus(event as sl.ListEvent)
    ' ? "+SCREEN onCellDidGainFocus  : R: "; event.rowIndex ; " I: " ; event.cellIndex; " D:" ; event.direction
    mioc.setInstance("focusedIndex", {
      row: event.rowIndex
      cell: event.cellIndex
    })
  end function


  private function onCellWillLoseFocus(event as sl.ListEvent)
    ' ? "+SCREEN onCellWillLoseFocus : R: "; event.rowIndex ; " I: " ; event.cellIndex; " D:" ; event.direction
  end function

  private function onCellDidLoseFocus(event as sl.ListEvent)
    ' ? "+SCREEN onCellDidLoseFocus : R: "; event.rowIndex ; " I: " ; event.cellIndex; " D:" ; event.direction
  end function

  private function onCellGainingFocus(event as sl.ListEvent)
    ' ? "+SCREEN onCellGainingFocus : R: "; event.rowIndex ; " C " ; event.cellIndex; " D:" ; event.direction ; " F: " ; event.fraction
    ' if event.direction = -1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = event.fraction
    ' end if
  end function

  private function onCellLosingFocus(event as sl.ListEvent)
    ' ? "+SCREEN onCellLosingFocus : R: "; event.rowIndex ; " D:" ; " C " ; event.cellIndex; event.direction ; " F: " ; event.fraction
    ' if event.direction = 1
    '   row = m.list@.getRowRenderer(event.rowIndex)
    '   row.opacity = 1 - event.fraction
    ' end if

  end function

  private function onItemSelected(event as sl.ListEvent)
    ? " SELECTED ITEM " event.rowIndex event.cellIndex
    m.doAction(0)
  end function

end class
