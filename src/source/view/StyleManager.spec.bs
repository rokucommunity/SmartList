import "pkg:/source/tests/ViewBaseTestSuite.spec.bs"
import "pkg:/source/view/StyleManager.bs"
import "pkg:/source/rooibos/Utils.bs"

namespace tests
  @suite("StyleManager tests")
  class StyleManagerTests extends mv.tests.BaseTestSuite

    private manager
    private nodeGlobal
    private nodeTop
    private testData = {
      "comp1": {
        "fontKey": "a,10,true,false"
        "width": 100
        "height": 100
      }
      "comp2": {
        "translation": [100, 100]
      }
    }

    protected override function beforeEach()
      m.nodeGlobal = new rooibos.utils.MockNode()
      m.nodeTop = new rooibos.utils.MockNode()
      m.manager = new mv.StyleManager()
      m.manager.setStyleJson(m.testData)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests constructor")
    ' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("initializes")
    function _()
      m.manager = new mv.StyleManager()
      m.assertEmpty(m.manager.styles, "should contain no styles")
      m.assertEmpty(m.manager.cachedStyles)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests setStyleJson")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("handles bad values")
    @params(invalid)
    @params([])
    function _(value)
      m.manager.setStyleJson(value)
      m.assertEmpty(m.manager.styles, "should contain no styles ")
      m.assertEmpty(m.manager.cachedStyles)
    end function

    @it("handles valid json")
    function _()
      m.manager.setStyleJson(m.testData)
      m.assertEqual(m.manager.styles, m.testData)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests getStyle")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns empty for unknown keys")
    @params(invalid)
    @params("notThere")
    function _(name)
      m.assertEmpty(m.manager.getStyle(name))
    end function

    @it("handles valid values")
    function _()
      m.manager.setStyleJson(m.testData)

      m.assertEqual(m.manager.getStyle("comp1"), m.testData.comp1)
      m.assertEqual(m.manager.getStyle("comp2"), m.testData.comp2)
    end function

    @it("caches values")
    function _()
      m.assertEmpty(m.manager.cachedStyles)

      m.assertEqual(m.manager.getStyle("comp1"), m.testData.comp1)
      m.assertEqual(m.manager.cachedStyles.comp1, m.testData.comp1)

      m.assertEqual(m.manager.getStyle("comp2"), m.testData.comp2)
      m.assertEqual(m.manager.cachedStyles.comp2, m.testData.comp2)

      m.expectNone(m.manager, "parseStyle")

      m.assertEqual(m.manager.getStyle("comp1"), m.testData.comp1)
      m.assertEqual(m.manager.getStyle("comp2"), m.testData.comp2)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("nested styles")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @beforeEach
    function nestedStyles_beforeEach()
      m.testData = {
        "colors": {
          "primary": "cp"
          "primary-focused": "cpf"
          "secondary": "cs"
        }
        "text": {
          "primary": {
            "fontKey": "fkp"
            "color": "~colors.primary"
          }
          "primary-focused": {
            "fontKey": "fkpf"
            "color": "~colors.primary-focused"
          }
          "secondary": {
            "fontKey": "fks"
            "color": "~colors.secondary"
          }
          "secondary-focused": {
            "fontKey": "fksf"
            "color": "~colors.secondary-focused"
          }
          "broken-nested": {
            "fontKey": "fkbn"
            "color": "~colors.not-there"
          }
        }
        "comp1": {
          "textStyle": "~text.primary"
          "highlightedTextStyle": "~text.primary-focused"
          "translation": [100, 100]
        }
        "comp2": {
          "textStyle": "~text.primary"
          "highlightedTextStyle": "~text.primary-focused"
          "subtitleTextStyle": "~text.secondary"
          "translation": [100, 100]
        }
        "comp3": {
          "textStyle": "~text.broken"
          "highlightedTextStyle": "~broken.primary"
          "subtitleTextStyle": "~text.broken-nested"
          "translation": [100, 100]
        }
        "extends": {
          "base1": {
            "id": "base1"
            "translation": [0, 0]
            "base": true
          }
          "extend1": {
            "$extends": "extends.base1"
            "e": 1
            "color": "~colors.primary"
            "translation": [100, 100]
          }
          "extend2": {
            "$extends": "extends.base1"
            "e": 2
            "translation": [200, 200]
          }
          "extend3": {
            "$extends": "extends.extend2"
            "translation": [300, 300]
          }
        }
        "extendsPathSemantics": {
          "base1": {
            "id": "base1"
            "translation": [0, 0]
            "p1": {
              "translation": [1, 1]
              "id": "p1"
              "p2": {
                "id": "p2"
                "translation": [20, 20]
              }
            }
            "p3": {
              "p3": "p3"
              "translation": [3, 3]
            }
            "base": true
          }
          "extend1": {
            "$extends": "extendsPathSemantics.base1"
            "e": 1
            "translation": [100, 100]
            "p1.translation": [110, 110]
            "p1.e": true
            "p1.p2.translation": [200, 200]
            "p1.p2.e": true
          }
          "extend2": {
            "$extends": "extendsPathSemantics.base1"
            "e": 2
            "p3.translation": [310, 310]
            "p3.not.translation": [999, 999]
            "translation": [200, 200]
          }
          "extend3": {
            "$extends": "extendsPathSemantics.extend2"
            "translation": [300, 300]
          }
        }

      }


      m.nodeGlobal = new rooibos.utils.MockNode()
      m.nodeTop = new rooibos.utils.MockNode()
      m.manager = new mv.StyleManager()
      m.manager.setStyleJson(m.testData)
    end function

    @it("composes nested styles together")
    function _()
      comp1Style = m.manager.getStyle("comp1")
      m.assertEqual(comp1Style, {
        translation: [100, 100]
        textStyle: {
          "fontKey": "fkp"
          "color": "cp"
        }
        highlightedTextStyle: {
          "fontKey": "fkpf"
          "color": "cpf"
        }
      })

      comp2Style = m.manager.getStyle("comp2")
      m.assertEqual(comp2Style, {
        translation: [100, 100]
        textStyle: {
          "fontKey": "fkp"
          "color": "cp"
        }
        highlightedTextStyle: {
          "fontKey": "fkpf"
          "color": "cpf"
        }
        subtitleTextStyle: {
          "fontKey": "fks"
          "color": "cs"
        }
      })

    end function

    @it("allows for extending styles")
    function _()
      baseStyle = m.manager.getStyle("extends.base1")
      e1Style = m.manager.getStyle("extends.extend1")
      e2Style = m.manager.getStyle("extends.extend2")
      e3Style = m.manager.getStyle("extends.extend3")

      m.assertEqual(baseStyle, {
        "base": true
        "id": "base1"
        "translation": [0, 0]
      })
      m.assertEqual(e1Style, {
        "base": true
        "e": 1
        "id": "base1"
        "color": "cp"
        "translation": [100, 100]
      })
      m.assertEqual(e2Style, {
        "base": true
        "e": 2
        "id": "base1"
        "translation": [200, 200]
      })
      m.assertEqual(e3Style, {
        "base": true
        "e": 2
        "id": "base1"
        "translation": [300, 300]
      })
    end function

    @it("allows for extending styles - with path update semantics")
    function _()
      '   "extend3": {
      '     "$extends": "extends.extend2"
      '     "translation": [300, 300]
      '   }
      ' }

      baseStyle = m.manager.getStyle("extendsPathSemantics.base1")
      m.assertEqual(baseStyle, {
        "id": "base1"
        "translation": [0, 0]
        "p1": {
          "translation": [1, 1]
          "id": "p1"
          "p2": {
            "id": "p2"
            "translation": [20, 20]
          }
        }
        "p3": {
          "p3": "p3"
          "translation": [3, 3]
        }
        "base": true
      })

      e1Style = m.manager.getStyle("extendsPathSemantics.extend1")
      m.assertEqual(e1Style, {
        "base": true
        "e": 1
        "id": "base1"
        "p1": {
          "e": true
          "id": "p1"
          "p2": { "e": true, "id": "p2", "translation": [200, 200] }
          "translation": [110, 110]
        }
        "p3": { "p3": "p3", "translation": [3, 3] }
        "translation": [100, 100]
      })

      e2Style = m.manager.getStyle("extendsPathSemantics.extend2")
      m.assertEqual(e2Style, {
        "base": true
        "e": 2
        "id": "base1"
        "p1": {
          "id": "p1"
          "p2": { "id": "p2", "translation": [20, 20] }
          "translation": [1, 1]
        }
        "p3": {
          "not": { "translation": [999, 999] }
          "p3": "p3"
          "translation": [310, 310]
        }
        "translation": [200, 200]
      })

      e3Style = m.manager.getStyle("extendsPathSemantics.extend3")
      m.assertEqual(e3Style, {
        "base": true
        "e": 2
        "id": "base1"
        "p1": {
          "id": "p1"
          "p2": { "id": "p2", "translation": [20, 20] }
          "translation": [1, 1]
        }
        "p3": {
          "not": { "translation": [999, 999] }
          "p3": "p3"
          "translation": [310, 310]
        }
        "translation": [300, 300]
      })
    end function

    @it("logs warning when nested styles are missing - but leaves key intact")
    function _()
      comp3Style = m.manager.getStyle("comp3")
      m.assertEqual(comp3Style, {
        "highlightedTextStyle": "~broken.primary"
        "subtitleTextStyle": {
          "color": "~colors.not-there"
          "fontKey": "fkbn"
        }
        "textStyle": "~text.broken"
        "translation": [100, 100]
      })
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getBundleFilename")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns empty for invalid name")n
    function _()
      m.assertEmpty(m.manager.getBundleFilename(invalid))
    end function

    @it("gets valid bundle filenames")
    @params("pkg:/source/SettingsScreen.bundle", invalid, "pkg:/source/SettingsScreen.bundle/SettingsScreen.json")
    @params("pkg:/source/screens/SettingsScreen.bundle", invalid, "pkg:/source/screens/SettingsScreen.bundle/SettingsScreen.json")
    @params("SettingsScreen.bundle", invalid, "SettingsScreen.bundle/SettingsScreen.json")
    @params("./SettingsScreen.bundle", invalid, "./SettingsScreen.bundle/SettingsScreen.json")
    @params("pkg:/source/SettingsScreen.bundle", "en", "pkg:/source/SettingsScreen.bundle/SettingsScreen.json")
    @params("pkg:/source/screens/SettingsScreen.bundle", "en", "pkg:/source/screens/SettingsScreen.bundle/SettingsScreen.json")
    @params("SettingsScreen.bundle", "en", "SettingsScreen.bundle/SettingsScreen.json")
    @params("./SettingsScreen.bundle", "en", "./SettingsScreen.bundle/SettingsScreen.json")
    @params("pkg:/source/SettingsScreen.bundle", "fr", "pkg:/source/SettingsScreen.bundle/SettingsScreen.fr.json")
    @params("pkg:/source/screens/SettingsScreen.bundle", "fr", "pkg:/source/screens/SettingsScreen.bundle/SettingsScreen.fr.json")
    @params("SettingsScreen.bundle", "fr", "SettingsScreen.bundle/SettingsScreen.fr.json")
    @params("./SettingsScreen.bundle", "fr", "./SettingsScreen.bundle/SettingsScreen.fr.json")
    @params("pkg:/source/SettingsScreen.bundle", "de", "pkg:/source/SettingsScreen.bundle/SettingsScreen.de.json")
    @params("pkg:/source/screens/SettingsScreen.bundle", "de", "pkg:/source/screens/SettingsScreen.bundle/SettingsScreen.de.json")
    @params("SettingsScreen.bundle", "de", "SettingsScreen.bundle/SettingsScreen.de.json")
    @params("./SettingsScreen.bundle", "de", "./SettingsScreen.bundle/SettingsScreen.de.json")
    function _(path, locale, expectedFilename)
      m.assertEqual(m.manager.getBundleFilename(path, locale), expectedFilename)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("loadBundle")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns invalid if bundle could not be loaded")
    @params(invalid)
    @params("en")
    @params("fr")
    function _(locale)
      m.stubCall(m.manager.loadJson("pkg:/screen.bundle/screen.json"), invalid)

      bundle = m.manager.loadBundle("pkg:/screen.bundle", locale)

      m.assertInvalid(bundle)
    end function

    @it("returns cached bundle if already in cache")
    @params(invalid, "pkg:/screen.bundle_en")
    @params("en", "pkg:/screen.bundle_en")
    @params("fr", "pkg:/screen.bundle_fr")
    function _(locale, key)
      m.expectNotCalled(m.manager.loadJson)
      cachedBundle = { "id": "cachedBundle" }

      m.manager.cachedStyles[key] = cachedBundle
      bundle = m.manager.loadBundle("pkg:/screen.bundle", locale)

      m.assertEqual(bundle, cachedBundle)
    end function

    @it("caches bundle if it was loaded")
    @params(invalid, "pkg:/screen.bundle_en")
    @params("en", "pkg:/screen.bundle_en")
    function _(locale, key)
      loadedBundle = { "id": "bundle" }
      m.expectCalled(m.manager.loadJson("pkg:/screen.bundle/screen.json"), loadedBundle)

      bundle = m.manager.loadBundle("pkg:/screen.bundle", locale)

      m.assertEqual(bundle, loadedBundle)
      m.assertEqual(m.manager.cachedStyles[key], loadedBundle)
    end function

    @it("caches root bundle, if locale bundle was not loaded")
    @params("fr", "pkg:/screen.bundle_fr", "pkg:/screen.bundle/screen.fr.json")
    @params("de", "pkg:/screen.bundle_de", "pkg:/screen.bundle/screen.de.json")
    function _(locale, key, localeFilename)
      loadedBundle = { "id": "bundle" }
      m.expectCalled(m.manager.loadJson("pkg:/screen.bundle/screen.json"), loadedBundle)

      m.expectCalled(m.manager.loadJson(localeFilename), invalid)

      bundle = m.manager.loadBundle("pkg:/screen.bundle", locale)

      m.assertEqual(bundle, loadedBundle)
      m.assertEqual(m.manager.cachedStyles[key], loadedBundle)

    end function

    @it("caches overlaid bundle, if successfully loaded")
    @params("fr", "pkg:/screen.bundle_fr", "pkg:/screen.bundle/screen.fr.json")
    @params("de", "pkg:/screen.bundle_de", "pkg:/screen.bundle/screen.de.json")
    function _(locale, key, localeFilename)
      loadedBundle = { "id": "bundle" }
      m.expectCalled(m.manager.loadJson("pkg:/screen.bundle/screen.json"), loadedBundle)

      localeBundle = { "id2": "localeBundle" }
      m.expectCalled(m.manager.loadJson(localeFilename), localeBundle)

      bundle = m.manager.loadBundle("pkg:/screen.bundle", locale)

      expectedBundle = {
        "id": "bundle"
        "id2": "localeBundle"
      }
      m.assertEqual(bundle, expectedBundle)
      m.assertEqual(m.manager.cachedStyles[key], expectedBundle)

    end function

    @it("loads default bundle from disk, then the second time from cache")
    function _()
      bundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle")
      cachedBundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle")

      m.assertNotEmpty(bundle)
      m.assertEqual(bundle, cachedBundle)

      m.assertEqual(bundle.views[0], {
        "id": "logoPoster"
        "_type": "mv_Poster"
        "size": [
          137,
          80
        ]
        "translation": [
          203,
          80
        ]
        "loadSync": true
        "loadDisplayMode": "limitSize"
        "loadWidth": 137
        "loadHeight": 80
        "uri": "pkg:/images/sign-in-logo-$$RES$$.png"
      })
      m.assertEqual(bundle.views[2], {
        "id": "emailInput"
        "_type": "mv_TextInput"
        "size": [
          610,
          102
        ]
        "isHandlingSelection": false
        "translation": [
          200,
          380
        ]
        "hintText": "Email Address"
      })

    end function

    @it("loads a bundle from disk, then the second time from cache")
    @params("en")
    @params("fr")
    @params("de")
    function _(locale)
      bundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle", locale)
      cachedBundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle", locale)

      m.assertNotEmpty(bundle)
      m.assertEqual(bundle, cachedBundle)
    end function

    @it("loads a bundle from disk, then from different locale")
    function _()
      englishBundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle")
      frenchBundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle", "fr")
      germanBundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle", "de")

      m.assertNotEmpty(englishBundle)
      m.assertNotEmpty(germanBundle)
      m.assertNotEmpty(frenchBundle)
      m.assertNotEqual(englishBundle, frenchBundle)
      m.assertNotEqual(englishBundle, germanBundle)
      m.assertNotEqual(frenchBundle, germanBundle)


      expected = lcase(formatJson({
        "_type": "mv_Poster"
        "id": "logoPoster"
        "loadDisplayMode": "limitSize"
        "loadHeight": 80
        "loadSync": true
        "loadWidth": 137
        "size": [137, 80]
        "translation": [203, 80]
        "uri": "pkg:/images/sign-in-logo-$$RES$$.png"
      }))
      m.assertEqual(lcase(formatJson(englishBundle.views[0])), expected)
      m.assertEqual(lcase(formatJson(englishBundle.views[3]._children[0])), lcase(formatJson({
        "_type": "mv_TextInput"
        "hintText": "Password"
        "id": "passwordInput"
        "isHandlingSelection": false
        "size": [610, 102]
        "translation": [200, 482]
      })))
      m.assertEqual(lcase(formatJson(englishBundle.views[3]._children[3]._children[1])), lcase(formatJson({
        "_type": "mv_Label"
        "color": "#000000"
        "fontKey": "SystemBold,30"
        "id": "forgotText_1"
        "size": [0, 0]
        "text": "org.com/forgot"
      })))

      m.assertEqual(lcase(formatJson(frenchBundle.views[0])), lcase(formatJson({
        "_type": "mv_Poster"
        "id": "logoPoster"
        "loadDisplayMode": "limitSize"
        "loadHeight": 200
        "loadSync": true
        "loadWidth": 200
        "size": [200, 200]
        "translation": [203, 80]
        "uri": "pkg:/images/sign-in-logo-fr-$$RES$$.png"
      })))
      m.assertEqual(lcase(formatJson(frenchBundle.views[3]._children[0])), lcase(formatJson({
        "_type": "mv_TextInput"
        "hintText": "le mot de passe"
        "id": "passwordInput"
        "isHandlingSelection": false
        "size": [400, 72]
        "translation": [200, 482]
      })))
      m.assertEqual(lcase(formatJson(frenchBundle.views[3]._children[3]._children[1])), lcase(formatJson({ "_type": "mv_label", "color": "#000000", "fontkey": "systembold,30", "id": "forgottext_1", "size": [0, 0], "text": "org.com/forgot-fr"
      })))

      m.assertEqual(lcase(formatJson(germanBundle.views[0])), lcase(formatJson({ "_type": "mv_poster"
        "id": "logoposter"
        "loaddisplaymode": "limitsize"
        "loadheight": 80
        "loadsync": true
        "loadwidth": 137
        "size": [137, 80]
        "translation": [203, 80]
        "uri": "pkg:/images/sign-in-logo-de-$$res$$.png"
      })))
      m.assertEqual(lcase(formatJson(germanBundle.views[3]._children[0])), lcase(formatJson({
        "_type": "mv_TextInput"
        "hintText": "Passwort"
        "id": "passwordInput"
        "isHandlingSelection": false
        "size": [610, 102]
        "translation": [200, 482]
      })))
      m.assertEqual(lcase(formatJson(germanBundle.views[3]._children[3]._children[1])), lcase(formatJson({
        "_type": "mv_label"
        "color": "#000000"
        "fontkey": "systembold,30"
        "id": "forgottext_1"
        "size": [0, 0]
        "text": "org.com/forgot-de"
      })))

    end function

    @it("loads a bundle from disk, then from different locale, using default locale")
    function _()
      m.manager.setDefaultLocale("en")
      englishBundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle")

      m.manager.setDefaultLocale("fr")
      frenchBundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle")

      m.manager.setDefaultLocale("de")
      germanBundle = m.manager.loadBundle("pkg:/source/view/SettingsScreen.spec.bundle")

      m.assertNotEmpty(englishBundle)
      m.assertNotEmpty(germanBundle)
      m.assertNotEmpty(frenchBundle)
      m.assertNotEqual(englishBundle, frenchBundle)
      m.assertNotEqual(englishBundle, germanBundle)
      m.assertNotEqual(frenchBundle, germanBundle)

      expected = lcase(formatJson({
        "_type": "mv_Poster"
        "id": "logoPoster"
        "loadDisplayMode": "limitSize"
        "loadHeight": 80
        "loadSync": true
        "loadWidth": 137
        "size": [137, 80]
        "translation": [203, 80]
        "uri": "pkg:/images/sign-in-logo-$$RES$$.png"
      }))
      m.assertEqual(lcase(formatJson(englishBundle.views[0])), expected)
      m.assertEqual(lcase(formatJson(englishBundle.views[3]._children[0])), lcase(formatJson({
        "_type": "mv_TextInput"
        "hintText": "Password"
        "id": "passwordInput"
        "isHandlingSelection": false
        "size": [610, 102]
        "translation": [200, 482]
      })))
      m.assertEqual(lcase(formatJson(englishBundle.views[3]._children[3]._children[1])), lcase(formatJson({
        "_type": "mv_Label"
        "color": "#000000"
        "fontKey": "SystemBold,30"
        "id": "forgotText_1"
        "size": [0, 0]
        "text": "org.com/forgot"
      })))

      m.assertEqual(lcase(formatJson(frenchBundle.views[0])), lcase(formatJson({
        "_type": "mv_Poster"
        "id": "logoPoster"
        "loadDisplayMode": "limitSize"
        "loadHeight": 200
        "loadSync": true
        "loadWidth": 200
        "size": [200, 200]
        "translation": [203, 80]
        "uri": "pkg:/images/sign-in-logo-fr-$$RES$$.png"
      })))
      m.assertEqual(lcase(formatJson(frenchBundle.views[3]._children[0])), lcase(formatJson({
        "_type": "mv_TextInput"
        "hintText": "le mot de passe"
        "id": "passwordInput"
        "isHandlingSelection": false
        "size": [400, 72]
        "translation": [200, 482]
      })))
      m.assertEqual(lcase(formatJson(frenchBundle.views[3]._children[3]._children[1])), lcase(formatJson({ "_type": "mv_label", "color": "#000000", "fontkey": "systembold,30", "id": "forgottext_1", "size": [0, 0], "text": "org.com/forgot-fr"
      })))

      m.assertEqual(lcase(formatJson(germanBundle.views[0])), lcase(formatJson({ "_type": "mv_poster"
        "id": "logoposter"
        "loaddisplaymode": "limitsize"
        "loadheight": 80
        "loadsync": true
        "loadwidth": 137
        "size": [137, 80]
        "translation": [203, 80]
        "uri": "pkg:/images/sign-in-logo-de-$$res$$.png"
      })))
      m.assertEqual(lcase(formatJson(germanBundle.views[3]._children[0])), lcase(formatJson({
        "_type": "mv_TextInput"
        "hintText": "Passwort"
        "id": "passwordInput"
        "isHandlingSelection": false
        "size": [610, 102]
        "translation": [200, 482]
      })))
      m.assertEqual(lcase(formatJson(germanBundle.views[3]._children[3]._children[1])), lcase(formatJson({
        "_type": "mv_label"
        "color": "#000000"
        "fontkey": "systembold,30"
        "id": "forgottext_1"
        "size": [0, 0]
        "text": "org.com/forgot-de"
      })))

    end function

  end class
end namespace
