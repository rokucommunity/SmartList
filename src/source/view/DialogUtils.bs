import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/core/Date.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/core/MIOC.bs"

namespace mv
  ' utility for creating various dialogs. Only works with brighterscript classes, and only allows for one dialog at a time
  class DialogUtil extends mc.BaseClass

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public dialog

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private delegate
    private channelStore
    private callback
    private dialogContainer as mc.types.node
    private text as mc.types.assocarray

    @inject("styleManager")
    private styleManager as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(delegate as dynamic)
      super("DialogUtil")
      ' bundle = m.styleManager@.loadBundle("pkg:/source/lib/DialogUtil.bundle")
      bundle = {
        text: {
          onDialogButtonSelected: {
            continue: "Continue"
            clear: "Clear"
            back: "Back"
          }
        }
      }
      m.text = bundle.text
      m.delegate = delegate
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function showDialog(title as string, message as string, buttonTitles = m.text.showDialog.buttonTitles as mc.types.array, callback = invalid as function, additionalArgs = {} as mc.types.assocarray) as mc.types.node
      if additionalArgs = invalid
        additionalArgs = {}
      end if
      container = m.getDialogContainer()
      dialog = m.createSGNode("Dialog", container, `dialog_${container.getChildCount()}`, [
        {
          title: title
          message: message
          buttons: buttonTitles
      }, additionalArgs])
      m.showDialogScreen(dialog, callback)
      return dialog
    end function

    function showDialogFromJson(json as mc.types.assocarray, callback = invalid as function, additionalArgs = {} as mc.types.assocarray) as mc.types.node
      if additionalArgs = invalid
        additionalArgs = {}
      end if
      container = m.getDialogContainer()
      dialog = m.createSGNode("Dialog", container, `dialog_${container.getChildCount()}`, [
        {
          title: json.title
          message: json.message
          buttons: json.buttonTitles
      }, additionalArgs])
      m.showDialogScreen(dialog, callback)
      return dialog
    end function

    'show any screen as a dialog. Must have a buttonSelected: integer field
    function showDialogScreen(dialog as mc.types.node, callback = invalid as function, lockFocus = true as boolean) as mc.types.node
      container = m.getDialogContainer()
      if not container.getParent().isSameNode(dialog.getParent())
        m.log.info("this dialog is not in the dialog containers, adding it now")
        container.appendChild(dialog)
      end if
      mc.setOrAddNodeField(dialog, "dialogLocksFocus", lockFocus)
      m.observeNodeField(dialog, "buttonSelected", m.onDialogDismiss, "both", true)
      if callback <> invalid
        m.log.info("delegate is observing this dialog")
        m.delegate.observeNodeField(dialog, "buttonSelected", callback, "both", true)
      end if
      'FIXME(gcook): need to add a new feature to maestro's focus manager to allow it to set focus on child of focus-locked view : https://github.com/georgejecook/maestro-roku/issues/108
      if lockFocus
        m.setFocusLocked(dialog, "focused on new dialog")
      else
        m.setFocusUnlocked("this dialog does not lock focus")
        m.setFocus(dialog)
      end if
      return dialog
    end function

    function dismissDialog(dialog as mc.types.node)
      if dialog <> invalid
        dialog.buttonSelected = -1
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Dialog Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function ondDialogButtonSelected(selectedButton as integer, dialog as mc.types.node)
      selectedButtonText = dialog.buttons[selectedButton]
      m.log.info("keyboard button selected: ", selectedButtonText, ", text ", dialog.text)
      isClosing = false

      buttons = m.text.onKeyboardDialogButtonSelected

      if selectedButtonText = buttons.password
        dialog.textEditBox.secureMode = not dialog.textEditBox.secureMode
      else if selectedButtonText = buttons.continue
        isClosing = true
        m.delegate.__cb = m.callback
        'bs:disable-next-line
        m.delegate.__cb(dialog.text)
      else if selectedButtonText = buttons.back
        isClosing = true
      else if selectedButtonText = buttons.clear
        dialog.text = ""
      end if

      if isClosing
        m.closeDialog()
      end if
    end function

    private function closeDialog()
      m.log.method("closeDialog")

      if m.dialog <> invalid and m.dialog.close = false
        m.dialog.close = true
        mc.getScene().dialog = invalid
      end if

      m.dialog = invalid
    end function

    private function getDialogContainer() as mc.types.node
      scene = mc.getScene()
      container = scene.findNode("_dialogContainer")

      if container = invalid
        container = m.createSGNode("Group", scene, "_dialogContainer")
      end if
      return container
    end function

    private function setFocus(control as mc.types.node)
      'bs:disable-next-line
      mv.setFocus(control)
    end function

    protected function setFocusLocked(control as mc.types.node, reason as string)
      'bs:disable-next-line
      mv.setFocusLocked(control, reason)
    end function

    protected function setFocusUnlocked(reason = "" as string)
      'bs:disable-next-line
      mv.setFocusUnlocked(reason)
    end function

    protected function setFocusOnApp()
      m.log.info("all dialogs dismissed, setting focus on the app")

      m.setFocus(mioc.getInstance("appController"))
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onDialogDismiss(selectedIndex as integer, dialog as mc.types.node)
      m.log.info("onDialogDismiss", selectedIndex, mc.dv(dialog))
      'future enhancement - bare in mind that we could have out of order dialogs in future
      dialogContainer = m.getDialogContainer()
      dialogContainer.removeChild(dialog)
      numDialogs = dialogContainer.getChildCount()

      if numDialogs > 0
        m.log.info("there are more dialogs in the dialog stack")
        dialog = dialogContainer.getChild(numDialogs - 1)
        if dialog.dialogLocksFocus
          m.log.info("this dialog locks focus: locking on it now")
          m.setFocusLocked(dialog, "another dialog is still present")
        else
          m.setFocusUnlocked("this dialog does not lock focus")
          m.setFocus(dialog)
        end if
      else
        m.log.info("there are no more dialog. removing dialog stack")
        m.setFocusUnlocked("all dialogs dismissed")
        m.setFocusOnApp()
        mc.getScene().removeChild(dialogContainer)
      end if
    end function
  end class
end namespace
