import "pkg:/source/core/MIOC.bs"
import "pkg:/source/core/Tasks.bs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/core/BaseClass.bs"

namespace mv
  class NodeClass extends mc.BaseClass

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Debug Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @observer("onDebugMChange")
    public __debugM = false

    function new(name as string)
      super(name)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Debug Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function onDebugMChange()
      'bs:disable-next-line
      mc.setOrAddNodeField(m.top, "__m", mc.private.getDebugMObject(m))
      'bs:disable-next-line
      mc.setOrAddNodeField(m.top, "__syncM", false)
      'bs:disable-next-line
      mc.setOrAddNodeField(m.top, "__callFunction", "")
      'bs:disable-next-line
      m.observe(m.top.__callFunction, m.___onDebugCallFunction)
    end function

    function onSyncMChange()
      'bs:disable-next-line
      for each field in m.top.__m
        'bs:disable-next-line
        if m.top.__m[field] <> invalid
          'bs:disable-next-line
          m[field] = m.top.__m[field]
        end if
      end for
    end function

    private function ___onDebugCallFunction(text as string) as void
      if text <> ""
        try
          m.log.debug("calling function now:", text)
          regex = /([a-z0-9_-]*)\((.*)\)/gim
          matches = regex.match(text)
          name = matches[1]
          args = parseJson("[" + matches[2] + "]")
          if not m.doesExist(name)
            m.log.error("function does not exist on:", m.__classname)
            return
          end if
          'bs:disable-next-line
          result = mc.apply(m[name], args)
          m.log.info("got result", result)
          'bs:disable-next-line
          mc.setOrAddNodeField(m.top, "__callFunctionRESULT", result)
        catch error
          m.log.error("got error", error)
        end try
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ ioc wrappers
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function getInstance(name as string, path = invalid as string, defaultValue = invalid as dynamic) as dynamic
      return mioc.getInstance(name, path, defaultValue)
    end function

    protected function setInstance(field as string, instance as dynamic)
      mioc.setInstance(field, instance)
    end function

    protected function updateInstance(instanceName as string, path as string, value as dynamic)
      mioc.updateInstance(instanceName, path, value)
    end function

    protected function getClassInstance(className as string, args = [] as mc.types.array, createTypeIfNotPresent = true as boolean, storeInstance = true as boolean) as dynamic
      return mioc.getClassInstance(className, args, createTypeIfNotPresent, storeInstance)
    end function

    protected function createClassInstance(className as string, args = [] as mc.types.array) as dynamic
      return mioc.createClassInstance(className, args)
    end function

    protected function setClassInstance(instance as dynamic)
      return mioc.setClassInstance(instance)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ scope support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function getTopField(fieldName as string) as dynamic
      return mc.getMField("top")[fieldName]
    end function

    protected function getMField(fieldName as string) as dynamic
      return mc.getMField(fieldName)
    end function

  end class
end namespace
