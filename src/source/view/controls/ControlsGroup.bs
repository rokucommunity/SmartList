import "pkg:/source/core/Utils.bs"
import "pkg:/source/view/BaseView.bs"

namespace mv.controls

  @observersWaitInitialize
  @node("mv_ControlsGroup", "mv_BaseView")
  class ControlsGroup extends mv.BaseView

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Events
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @alwaysnotify
    @observer("redraw")
    public selectedIndex = -1

    @alwaysnotify
    @observer("redraw")
    public focusedIndex = -1

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @debounce
    @observer("updateChildren")
    public layoutMode = "none" 'none|vert|horiz

    @debounce
    @observer("updateChildren")
    public itemSpacings = [0]

    @debounce
    @observer("updateChildren")
    public keyDirection = "vert" 'vert|horiz

    'default layout strategy uses bounding rects, set to true, if your views have specific sizes
    @debounce
    @observer("updateChildren")
    public useSizeForlayout = false

    @debounce
    @observer("updateChildren")
    public useFootPrint = false

    @debounce
    @observer("updateChildren")
    public selectOnFocus = false

    @debounce
    @observer("updateChildren")
    public _layoutNow = false

    public setIsSelectedOnChildren = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private originalChildren = []
    private visibleChildren = []
    private _focusedControl as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super("mv_ControlsGroup")
    end function

    protected override function initialize() as void
      super.initialize()
      m.updateChildren()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function updateChildren()
      if m.originalChildren <> invalid
        for each child in m.originalChildren
          m.unobserve(child.visible, m.onChildVisibleChange)
        end for
      end if

      m.layoutChildren()
    end function

    function layoutChildren()
      offset = 0
      layoutMode = m.layoutMode
      if layoutMode = "vert"
        axes = 1
      else if layoutMode = "horiz"
        axes = 0
      else
        axes = -1
      end if

      m.visibleChildren = []
      i = 0
      si = 0
      nextSpace = 0
      m.originalChildren = m.top.getChildren(-1, 0)

      for each child in m.originalChildren
        m.observe(child.visible, m.onChildVisibleChange, "both")
        child.addFields({
          "layoutIndex": i
        })

        if child.visible
          m.visibleChildren.push(child)
          if axes > -1

            translation = [0, 0]
            translation[axes] = offset
            child.translation = translation
            if m.itemSpacings <> invalid and m.itemSpacings[si] <> invalid
              nextSpace = m.itemSpacings[si]
              si++
            end if

            offset += nextSpace
            if m.useSizeForlayout
              size = child.size
            else
              size = invalid
            end if

            if size <> invalid and size[0] <> 0 and size[1] <> 0
              offset += child.size[axes]
            else
              if axes = 0
                offset += child.boundingRect().width
              else
                offset += child.boundingRect().height
              end if
            end if
          end if
        else
          m.top.removeChild(child)
        end if
        i++
      end for
      m.focusedIndex = mc.clamp(m.focusedIndex, 0, m.visibleChildren.count() - 1)
    end function

    function getSelectedButton()
      return m.visibleChildren[m.selectedIndex]
    end function

    function setFocusedControl(control as mc.types.node)
      if type(control) = "roSGNode"
        for i = 0 to m.visibleChildren.count() - 1
          if m.visibleChildren[i].id = control.id
            m._focusedControl = control
            m.focusedIndex = i
            exit for
          else
            m.log.error(`Could not find control with id ${control.id} in ${m.visibleChildren}`)
          end if
        end for
      else
        m.log.error("Cannot set focused control to ", type(control))
      end if
    end function

    function getIsFocusedControl(control as mc.types.node) as boolean
      return m._focusedControl <> invalid and m._focusedControl.isSameNode(control)
    end function

    function getFocusedControl() as mc.types.node
      return m._focusedControl
    end function

    function setSelectedIndex(index as integer)
      control = m.visibleChildren[index]
      if control <> invalid and control.isDisabled <> true
        control.isSelected = true
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onChildVisibleChange(visible as boolean, node as mc.types.node)
      if not visible
        m.top.removeChild(node)
      else
        i = 0
        for i = m.top.getChildCount() - 1 to 0 step -1
          child = m.top.getChild(i)
          if child.layoutIndex < node.layoutIndex
            i++
            exit for
          end if
        end for
        if i < 0
          i = 0
        end if
        m.top.insertChild(node, i)
      end if
      m.layoutChildren()
      m.redraw()
    end function

    private function redraw()
      focusedIndex = m.focusedIndex
      selectedIndex = m.selectedIndex
      for i = 0 to m.visibleChildren.count() - 1
        child = m.visibleChildren[i]
        newChildFocus = i = focusedIndex and m.isFocused
        if child.isFocused <> newChildFocus
          child.isFocused = newChildFocus
        end if
        if m.useFootPrint
          if not m.isFocused
            child.focusState = i = selectedIndex ? "footprint" : "none"
          else if not child.isFocused
            child.focusState = "none"
          end if
        end if
      end for
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function updateIndex(index as integer) as boolean
      if index <> m.focusedIndex
        control = m.visibleChildren[index]
        if control <> invalid
          m.log.info("changing index to ", index)
          if control.isDisabled = true
            m.log.info("requested child is disabled")
            index = m.getNextEnabledIndex(index, index < m.focusedIndex ? - 1 : 1)
            if index = -1
              m.log.warn("could not find another index to move to")
              return false
            end if
          end if

          m._focusedControl = m.visibleChildren[index]
          m.focusedIndex = index
          if m.selectOnFocus
            m.selectedIndex = index
          end if
          return true
        else
          m.log.warn("control was invalid")
          return false
        end if
      else
        m.log.info("index unchanged")
        return false
      end if

    end function

    private function getNextEnabledIndex(startIndex as integer, direction as integer) as integer
      endIndex = direction = -1 ? 0 : m.visibleChildren.count() - 1
      for i = startIndex to endIndex step direction
        if m.visibleChildren[i].isDisabled <> true
          return i
        end if
      end for
      return -1
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Key Presses
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressUp() as boolean
      if m.keyDirection = "vert"
        return m.updateIndex(mc.clamp(m.focusedIndex - 1, 0, m.visibleChildren.count() - 1))
      else
        return false
      end if
    end function

    private function onKeyPressDown() as boolean

      if m.keyDirection = "vert"
        return m.updateIndex(mc.clamp(m.focusedIndex + 1, 0, m.visibleChildren.count() - 1))
      else
        return false
      end if
    end function

    private function onKeyPressLeft() as boolean
      if m.keyDirection = "horiz"
        return m.updateIndex(mc.clamp(m.focusedIndex - 1, 0, m.visibleChildren.count() - 1))
      else
        return false
      end if
    end function

    private function onKeyPressRight() as boolean
      if m.keyDirection = "horiz"
        return m.updateIndex(mc.clamp(m.focusedIndex + 1, 0, m.visibleChildren.count() - 1))
      else
        return false
      end if
    end function

    private function getLongPressIntervalForKey(key as string) as float
      if (m.keyDirection = "vert" and (key = "up" or key = "down")) or (m.keyDirection = "horiz" and (key = "left" or key = "right"))
        index = m.focusedIndex
        if key = "up" or key = "left"
          index--
        else
          index++
        end if
        if m.getNextEnabledIndex(index, index < m.focusedIndex ? - 1 : 1) <> -1
          return 0.15
        else
          return 0
        end if
      else
        return 0
      end if
    end function

    private function onLongPressStart(key as string) as boolean
      if key = "up" or key = "left"
        return m.onKeyPressUp()
      else
        return m.onKeyPressDown()
      end if
    end function

    private function onLongPressUpdate(key as string) as boolean
      if key = "up" or key = "left"
        return m.onKeyPressUp()
      else
        return m.onKeyPressDown()
      end if
    end function

    private function onKeyPressOK() as boolean
      m.log.info("pressed ok in controls group")
      focusedIndex = m.focusedIndex
      setIsSelectedOnChildren = m.setIsSelectedOnChildren
      control = m.visibleChildren[focusedIndex]
      if control <> invalid and control.isDisabled <> true
        for i = 0 to m.visibleChildren.count() - 1
          child = m.visibleChildren[i]
          child.isSelected = i = focusedIndex and setIsSelectedOnChildren
        end for
        if setIsSelectedOnChildren
          control.selected = true
        end if
        m.selectedIndex = focusedIndex
      end if
      return true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Lifecycle
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onGainedFocus(isSelfFocused as boolean)
      super.onGainedFocus(isSelfFocused)
      if isSelfFocused
        m.redraw()
      end if
    end function

    protected override function onLostFocus()
      super.onLostFocus()
      m.redraw()
    end function
  end class
end namespace
