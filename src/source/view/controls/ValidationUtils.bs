import "pkg:/source/core/BaseClass.bs"

namespace mv.input.validators
  enum Type
    alphaNumeric = "alphaNumeric"
    numeric = "numeric"
    zipcode = "zipcode"
    required = "required"
    email = "email"
  end enum

  class InputValidator extends mc.BaseClass

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private validatorTypeMap = {}
    private message as string

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super("InputValidator")
      m.configureValidators()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function validate(validatorType as string, value as string, message = "" as string)
      m.log.info("Validating value: ", value, " with validator type: ", validatorType)
      validationData = { hasError: false, errorMessage: "" }

      if not mc.isString(validatorType)
        return validationData
      end if

      return m.validateByType(validatorType, value, message)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function configureValidators()
      m.log.info("Setting available validators")
      m.validatorTypeMap[mv.input.validators.Type.alphaNumeric] = m.validateAlphaNumeric
      m.validatorTypeMap[mv.input.validators.Type.numeric] = m.validateNumeric
      m.validatorTypeMap [mv.input.validators.Type.required] = m.validateRequired
      m.validatorTypeMap[mv.input.validators.Type.email] = m.validateEmail
      m.validatorTypeMap[mv.input.validators.Type.zipcode] = m.validateZipcode
    end function

    private function validateByType(validatorType as string, value as string, message = "" as string)
      m.log.info("Validating value: ", value, " with validator type: ", validatorType)
      validationData = { hasError: false, errorMessage: "" }

      if m.validatorTypeMap.doesExist(validatorType)
        validator = m.validatorTypeMap[validatorType]
        validationData = validator(value)
        if message <> ""
          validationData.errorMessage = message
          return validationData
        end if
      end if

      return validationData
    end function

    private function validateAlphaNumeric(value as string)
      m.log.info("Validating alpha numeric: ", value)

      regex = createObject("roRegex", "^[A-Za-z0-9]+$", "i")
      isValid = regex.isMatch(value)

      return {
        hasError: not isValid
        errorMessage: isValid ? "" : "Must contain only alpha numeric characters."
      }
    end function

    private function validateZipCode(value as string)
      m.log.info("Validating zipcode", value)
      return m.validateNumeric(value, 5)
    end function

    private function validateNumeric(value as string, exactLength = 0 as integer)
      m.log.info("Validating numeric", value)
      regex = createObject("roRegex", "^[0-9]+$", "i")
      isValid = regex.isMatch(value)

      message = "Must contain only numbers."

      if exactLength > 0
        isValid = (len(value) = exactLength) and isValid
        message = `Must be ${exactLength} digits long.`
      end if

      return {
        hasError: not isValid
        errorMessage: isValid ? "" : message
      }
    end function

    private function validateRequired(value as string)
      m.log.info("Validating required", value)
      isValid = value <> ""

      return {
        hasError: not isValid
        errorMessage: isValid ? "" : "Required."
      }
    end function

    private function validateEmail(value as string)
      m.log.info("Validating email", value)
      regex = createObject("roRegex", "^[\w-\.+]+@([\w-]+\.)+[\w-]{2,4}$", "i")
      isValid = regex.isMatch(value)

      return {
        hasError: not isValid
        errorMessage: isValid ? "" : "Invalid email address."
      }
    end function
  end class
end namespace
