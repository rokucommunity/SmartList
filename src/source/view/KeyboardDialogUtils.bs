import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/core/Date.bs"
import "pkg:/source/view/Animation.bs"

namespace mv
  ' utility for creating various keyboards. Only works with brighterscript classes, and only allows for one keeyboard at a time
  class KeyboardDialogUtil extends mc.BaseClass

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public dialog

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private delegate
    private callback

    @inject("styleManager")
    private styleManager as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(delegate as dynamic)
      super("KeyboardDialogUtil")
      m.delegate = delegate
    end function

    ' show a keyboard dialog - this dialog will callback on m
    '              usage:
    ' @param {string} title, title to show
    ' @param {string} text - text to show
    ' @param {string} callback - function to call with updated text
    ' @param {boolean} isSecure - true if it's a password
    ' @param {array} buttons - buttons to show
    function showKeyboardDialog(title as string, text as string, callback as function, isSecure as boolean, buttons as mc.types.array, buttonRoles = { continue: "Continue", clear: "Clear", back: "Back", showHide: "Show/Hide password" } as mc.types.assocarray) as mc.types.node
      m.dialog = createObject("roSGNode", "StandardKeyboardDialog")
      if isSecure
        m.dialog.textEditBox.secureMode = true
      end if
      m.dialog.buttons = buttons

      m.dialog.addFields({
        "isSecure": isSecure
        "buttonRoles": buttonRoles
      })

      m.callback = callback

      m.dialog.title = title
      m.dialog.keyColor = "0x878686"
      m.dialog.focusedKeyColor = "#000000"

      m.observeNodeField(m.dialog, "buttonSelected", m.onKeyboardDialogButtonSelected, "both")
      m.observeNodeField(m.dialog, "wasClosed", m.closeDialog, "none")

      m.dialog.text = text
      m.dialog.textEditBox.cursorPosition = len(text)

      mc.getScene().dialog = m.dialog

      return m.dialog
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Keyboard Dialog Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyboardDialogButtonSelected(selectedButton as integer, dialog as mc.types.node)
      selectedButtonText = dialog.buttons[selectedButton]
      m.log.info("keyboard button selected: ", selectedButtonText, ", text ", dialog.text)
      isClosing = false

      buttonRoles = asAA(dialog.buttonRoles, { continue: "Continue", clear: "Clear", back: "Back", showHide: "Show/Hide password" })

      if selectedButtonText = buttonRoles.showHide
        dialog.textEditBox.secureMode = not dialog.textEditBox.secureMode
      else if selectedButtonText = buttonRoles.continue
        isClosing = true
        m.delegate.__cb = m.callback
        'bs:disable-next-line
        m.delegate.__cb(dialog.text)
      else if selectedButtonText = buttonRoles.back
        isClosing = true
      else if selectedButtonText = buttonRoles.clear
        dialog.text = ""
      end if

      if isClosing
        m.closeDialog()
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function closeDialog()
      m.log.method("closeDialog")

      if m.dialog <> invalid and m.dialog.close = false
        m.dialog.close = true
        mc.getScene().dialog = invalid
      end if

      m.dialog = invalid
    end function
  end class
end namespace
