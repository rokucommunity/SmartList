import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Utils.bs"

' /**
'  * @module CellTracker
'  * @description This component is used ot bind a cell in ArrayGrid subclasses
'  * to particular content. This allow a developer to do things like know when a cell is being recycled
'  * or change it's contents.
'  */

namespace mv
  @strict
  @node("mv_CellTracker", "Group")
  class CellTracker

    @observeField("onDebugMChange")
    @alwaysnotify
    public _debugM = false
    public __m = {}
    public trackingId = 0
    public numberOfCellsInUse = 0
    public numberOfCells = 0

    private trackers = {}
    private log

    function new()
      m.log = new log.Logger("cellTracker")
      m.reset()
    end function

    private function onDebugMChange()
      mc.setOrAddNodeField(m.top, "__m", mc.private.getDebugMObject(m))
    end function

    function reset()
      m.log.info("resetting cell trackers")
      m.trackers = {}
      m.top.numberOfCells = 0
      m.top.numberOfCellsInUse = 0
    end function

    function getTrackers(scope = "all" as string) as mc.types.assocarray
      trackers = m.trackers[scope]
      if trackers = invalid
        trackers = {
          contentIdsByCellId: {}
          viewStatesByContentId: {}
          cellIdsByContentId: {}
          cellsById: {}
        }
        m.trackers[scope] = trackers
      end if
      return trackers
    end function

    function getCell(cellId as string, scope = "all" as string) as mc.types.node
      trackers = m.getTrackers(scope)

      return trackers.cellsById[cellId]
    end function

    function getCellForContentId(id as string, scope = "all" as string) as mc.types.node
      trackers = m.getTrackers(scope)
      cellId = trackers.cellIdsByContentId[id]

      if cellId <> invalid
        return trackers.cellsById[cellId]
      else
        return invalid
      end if
    end function

    function bindCellToContent(cell as mc.types.node, content as mc.types.node, scope = "all" as string) as void

      trackers = m.getTrackers(scope)

      if cell.trackingId = ""
        ' ? ">>cell has never been bound"
        'never been bound
        m.top.trackingId++
        m.top.numberOfCells++
        cell.trackingId = str(m.top.trackingId).trim()
      else
        existingId = trackers.contentIdsByCellId[cell.trackingId]
        if existingId <> invalid
          if content <> invalid and existingId = content.id
            m.log.debug("bound to same thing; ignoring")
            'we are bound to the same thing
            return
          else
            'unbind it from what it was bound to
            m.unbindCell(cell)
          end if
        end if

      end if

      if content <> invalid
        m.top.numberOfCellsInUse++
        ' ? ">> binding content id "; content.id ; " to "; cell.trackingId
        trackers.cellIdsByContentId[content.id] = cell.trackingId
        trackers.contentIdsByCellId[cell.trackingId] = content.id
      end if

      trackers.cellsById[cell.trackingId] = cell
    end function

    function unbindCell(cell as mc.types.node, scope = "all" as string)
      trackers = m.getTrackers(scope)
      contentId = trackers.contentIdsByCellId[cell.trackingId]

      if contentId <> invalid
        trackers.contentIdsByCellId.delete(cell.trackingId)
        existingCellId = trackers.cellIdsByContentId[contentId]

        if existingCellId <> invalid and existingCellId = cell.trackingId
          m.top.numberOfCellsInUse--
          trackers.cellIdsByContentId.delete(contentId)
          trackers.cellsById.delete(cell.trackingId)
        end if
      end if
    end function

    function setViewStates(states as mc.types.assocarray, scope = "all" as string)

      trackers = m.getTrackers(scope)

      for each id in states
        dynamicCell = m.getCellForContentId(id)
        trackers.viewStatesByContentId[id] = states[id]
        if dynamicCell <> invalid
          dynamicCell.viewState = states[id]
          ' ? " setting cell view state"; id ; states[id]
        else
          'FIXME
          ' ? " could not find cell for id " ; id
        end if
      end for

    end function

    function getStateForContentId(id as string, scope = "all" as string) as string
      trackers = m.getTrackers(scope)
      return trackers.viewStatesByContentId[id]
    end function

  end class
end namespace
