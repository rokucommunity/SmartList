import "pkg:/source/core/MIOC.bs"
import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/rooibos/BaseTestSuite.bs"
import "pkg:/source/rooibos/Utils.bs"

namespace tests

  @strict
  class BaseTestSuite extends rooibos.BaseTestSuite
    protected log

    protected override function setup()
      'bs:disable-next-line
      tests.setUpMScope()
      m.log = new log.Logger(m.name)
    end function

    protected override function beforeEach()
    end function

    protected override function afterEach()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Helper Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createNodeClass(clazz, useClassAsTop = true, nodeTop = new rooibos.utils.MockNode("top"), nodeGlobal = new rooibos.utils.MockNode("top"))
      'bs:disable-next-line
      instance = tests_maestro_nodeClassUtils_createNodeClass(clazz, nodeTop, nodeGlobal)
      if instance <> invalid and useClassAsTop
        'note - we use the clazz itself as TOP, so that we don't have to write tests that do
        'thing.top.value, thing.top.value2, etc all over the place
        instance.append(nodeTop)
        instance.top = instance
        instance.__rooibosSkipFields = { "top": true }
      end if
      return instance
    end function
  end class

  function setUpMScope()
    log.initializeLogManager(["log_PrintTransport"], 5, false)
    m.log = new log.Logger("rooibosScope")
  end function
end namespace
