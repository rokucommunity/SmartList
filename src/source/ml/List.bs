import "pkg:/source/ml/ListItemScroller.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseView.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/FocusIndicatorConfig.bs"
import "pkg:/source/ml/ListContentManager.bs"

namespace ml
  @node("ml_List", "mv_BaseView")
  class List extends mv.BaseView

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Content
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'must be of type ListContent
    public content as mc.types.node

    'view that will respond to events
    public delegate as mc.types.node

    public _isRenderingUpdate = false
    public _timeSinceLastKeypress = 0
    public _repeatKeyPressCount = 0
    private _lastKeyPress = ""

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ View State
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @alwaysnotify
    public state = "none"

    public width = 1920
    public height = 1080

    @alwaysnotify
    @observer("onIsHiddenChange")
    public isHidden = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Debug Flags
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @observer("onUpdateNow")
    public _updateNow = false
    public _forceReloadListWhenPressingOption = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    public isScrolling = false
    public screenOffset = 0

    public scrollDirection = 0

    public focusedRowIndex = 0
    public focusedSubRowIndex = 0

    public focusedCellIndex = 0
    public focusedfraction = 0.0

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private contentGroup as mc.types.node
    private rowsGroup as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Shared managers
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public focusIndicatorManager as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ internal event tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public nextFocusIndex as mc.types.array

    public screenPos = 0
    public nextScreenPos = 0

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and internal state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager as ml.ListItemViewManager
    private itemScroller as ml.ListItemScroller
    private contentManager as ml.ListContentManager
    private sourceFocusRect as object
    private targetFocusRect as object
    private isInitialized = false
    private isDoingFlowFocus = false

    private focusedRowContent as mc.types.node
    private focusedCellContent as mc.types.node

    private preHiddenContent as mc.types.node

    private keyTimer = createObject("roTimespan")

    private keyDirections = {
      "rewind": -1
      "fastforward": 1
      "left": -1
      "right": 1
      "up": -1
      "down": 1
    }

    private rowKeys = {
      "rewind": true
      "fastforward": true
      "left": true
      "right": true
    }

    private listKeys = {
      "up": true
      "down": true
    }

    function new()
      super("ml_List")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.initManagers()
      m.isInitialized = true
      ' m.onContentChange()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function createViews()
      'TODO - might still end up needing this... depends on how floating focus lands
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.rowsGroup = m.createSGNode("Group", m.contentGroup, "rowsGroup")
      m.focusIndicatorManager = m.createSGNode("ml_FocusIndicatorManager", m.top, "focusIndicator", {
        list: m.top
      })

    end function

    private function initManagers()
      m.rowsGroup = m.top.findNode("rowsGroup")

      m.viewManager = new ml.ListItemViewManager(m.top, m.rowsGroup, 0, m.height, m.global.componentPool)

      m.itemScroller = new ml.ListItemScroller(m.viewManager, m.focusIndicatorManager)
      m.contentManager = new ml.ListContentManager(m, m.viewManager, m.itemScroller, m.focusIndicatorManager)
    end function

    private function createEventsBroker(id as string)
      node = createObject("roSGNode", "Node")
      node.id = id
      node.addFields({ "listEvent": {}, "viewportEvents": [] })
      return node
    end function

    private wasFocused = false

    private function resetState()
      m.log.info("resetState")

      m.wasFocused = m.top.isFocused or m.top.isChildFocused
      if m.contentManager.content <> invalid
        m.log.info("new content is present")
        m.viewManager.setContent(m.contentManager.content)
        m.top.clippingrect = [0, 0, m.width, m.height]
      else
        m.log.info("content is being set to invalid - resetting view manager")
        m.viewManager.reset()
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function setContent(content as mc.types.node, forceUpdate = false as boolean) as void
      m.contentManager.setContent(content, forceUpdate)
    end function

    function synchronizeContent(updateListContent = true as boolean, forceUpdateAll = false as boolean)
      'TODO add check that notifications are present, and if so use those
      if updateListContent = true and m.content <> invalid
        'TODO
      end if
      m.contentManager.synchronizeContent(true, forceUpdateAll)

      'reset the content's notifications
      'm.log.resetIndent()
    end function

    private function cleanup()
      m.log.verbose(" CLEANING UP LIST")
      m.viewManager.reset()
      ' ? " SNIC 777 CLEANUP"
      m.focusIndicatorManager@.setNextFocusIndicatorConfig(invalid)
    end function

    private function onIsHiddenChange()
      m.log.info("hiding the list")
      m.setFocusIndicatorManagerHidden(true)
      m.itemScroller.notifyViewportEvents(m.itemScroller.direction, true)
    end function

    private function setFocusIndicatorManagerHidden(isHidden as boolean)
      m.log.info("setting indicator hidden to", isHidden, "isListHidden", m.isHidden)

      m.focusIndicatorManager.isHidden = isHidden
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function onUpdateNow()
      m.log.info("force updating list")
      m.forceUpdate(true)
    end function

    function forceUpdate(fullUpdate = false as boolean) as void
      ' cellInfo = m.itemScroller.getCellInfoForContentIndex(m.focusedRowIndex)
      if m.top.state = "rendering"
        m.log.verbose("cannot forceUpdate list while rendering is taking place")
        return
      end if

      m.log.verbose(m.focusedRowIndex, " ", m.focusedCellIndex)
      m.log.verbose(" NC ", m.viewManager.numberOfItems, " I ", m.itemScroller.index)
      m.viewManager.forceUpdateLayout(fullUpdate = true)
      'Note - this will result in a double call; but that's what it's gonna take to be sure things are okay
      m.itemScroller.notifyViewportEvents(m.itemScroller.direction, true)

      ' ? " NC " ; m.viewManager.numberOfItems ; " I " ; m.itemScroller.index
      if m.viewManager.numberOfItems > 0
        ' ? " HIDING FOCUS IN LIST FORCE UPDATE AAA"
        m.setFocusIndicatorManagerHidden(true)
        m.log.verbose("LIST HAS COMPONENTS ", m.focusedRowIndex, " ", m.focusedCellIndex)
        ' m.moveToRowItemIndex(m.focusedRowIndex, m.focusedCellIndex, false)
        ' m.moveToRowItemIndex(0, 0, true)
        m.moveToRowItemIndex(m.focusedRowIndex, m.focusedCellIndex, false)
        'correct the focus if the item has changed.

        ' if m.itemScroller.index >= m.viewManager.numberOfItems
        '   index = mc.clamp(m.itemScroller.index, 0, m.viewManager.numberOfItems - 1)
        '   if index >= 0
        '    ' ? "CORRECTING INDEX"; index
        '     m.moveToRowItemIndex(m.focusedRowIndex, m.focusedCellIndex, false)
        '   end if
        ' else
        m.log.verbose("MOVING TO ROW ", m.itemScroller.index)
        ' m.moveToRow(m.itemScroller.index, false)
        '   ' m.focusIndicatorManager@.setFocusComplete()
        ' end if
        ' ? " SETTING FOCUS IN LIST BBB FORCE UPDATE" m.top.isChildFocused m.top.isFocused
        m.setFocusIndicatorManagerHidden(not (m.top.isChildFocused and m.top.isFocused))
      else
        m.log.verbose("LIST HAS NO COMPONENTS ")
        ' ? " SETTING FOCUS HIDDEN CCC"
        m.setFocusIndicatorManagerHidden(true)
      end if

      ' ? "FORCE UPDATE " ; m.focusedRowIndex ; " CELL " ; m.focusedCellIndex
      ' m.moveToRowItemIndex(m.focusedRowIndex, m.focusedCellIndex, false)
      ' m.moveToRowItemIndex(0, 0, true)
    end function

    function getRow(index as integer) as dynamic
      if m.contentManager.content <> invalid
        return m.contentManager.content.getChild(index)
      else
        return invalid
      end if
    end function

    function getItem(rowIndex as integer, index as integer) as dynamic
      if m.contentManager.content <> invalid
        rowItem = m.contentManager.content.getChild(rowIndex)
        if rowItem <> invalid
          return rowItem.getChild(index)
        end if
      end if
      return invalid
    end function

    function moveToEnd(direction = -1 as integer, animated = false as boolean)
      'TODO get content index of first visible row
      if direction = -1
        rowIndex = 0
      else
        rowIndex = m.viewManager.numberOfItems
      end if

      animSpeedIndex = 0
      if m.viewManager.listSettings <> invalid
        if m.viewManager.listSettings.fastAnimateToEndEnabled
          animSpeedIndex = m.viewManager.listSettings.animSpeeds.count() - 1
        else
          animated = false
        end if
      end if
      m.moveToRow(rowIndex, animated, animSpeedIndex, direction)
    end function

    function moveToRow(index as integer, animated as boolean, animSpeedIndex = 0 as integer, direction = invalid as integer)
      if m.contentManager.content <> invalid
        animated = animated = true
        isDisablingFocus = not animated and not m.focusIndicatorManager._isContentUpdating
        if isDisablingFocus
          ' ? " >>>>>>>>>>>>>>>>>>> DISABLED"
          m.focusIndicatorManager._isContentUpdating = true
          m.focusIndicatorManager@.setDelegateManagerEnabled(false)
          m.focusIndicatorManager@.setDelegateCallbacksEnabled(false)
        end if

        m.itemScroller.moveToContentIndex(index, animated = true, animSpeedIndex, direction)

        if isDisablingFocus
          ' ? " >>>>>>>>>>>>>>>>>>> COMPLETE"
          m.focusIndicatorManager._isContentUpdating = false
          m.focusIndicatorManager@.setDelegateManagerEnabled(true)
          m.focusIndicatorManager@.setDelegateCallbacksEnabled(true)
          m.focusIndicatorManager@.completeFocusNow(true)
        end if
      end if
    end function

    function moveToRowItemIndex(rowIndex as integer, index as integer, animated = false as boolean, animSpeedIndex = 0 as integer) as void
      ' m.log.verbose(" MTRI  ", rowIndex, index, animated)
      'm.log.increaseIndent()Indent()
      animated = animated = true
      isDisablingFocus = not animated and not m.focusIndicatorManager._isContentUpdating
      if m.contentManager.content <> invalid and rowIndex <> -1 and index <> -1
        row = m.getRowRenderer(rowIndex)
        ' m.log.verbose(" MTR A")
        if row <> invalid
          if isDisablingFocus
            ' ? " >>>>>>>>>>>>>>>>>>> DISABLED"
            m.focusIndicatorManager._isContentUpdating = true
            m.focusIndicatorManager@.setDelegateCallbacksEnabled(false)
            m.focusIndicatorManager@.setDelegateManagerEnabled(false)
          end if

          ' m.log.verbose(" MTR B")
          rowInfo = m.viewManager.getCellInfoForContentIndex(rowIndex)
          if rowInfo <> invalid
            rect = row@.getRect(index)
            subIndex = rowInfo.index
            if rect <> invalid
              subIndex += rect.subRowIndex
            end if
            m.moveToSubRowIndex(subIndex, animated = true, animSpeedIndex, false, false)
          end if
          ' ? " MTCI 555 " m.__classname " CELL INDEX " index
          row@.moveToIndex(index, false)


          if isDisablingFocus
            ' ? " >>>>>>>>>>>>>>>>>>> COMPLETE"
            m.focusIndicatorManager._isContentUpdating = false
            m.focusIndicatorManager@.setDelegateManagerEnabled(true)
            m.focusIndicatorManager@.setDelegateCallbacksEnabled(true)
            m.focusIndicatorManager@.completeFocusNow(true)
          end if
        end if
      end if
      if animated <> true
        m.viewManager.setIsScrolling(false, false, 0)
      end if
      'm.log.decreaseIndent()
    end function

    function moveToSubRowIndex(index as integer, animated as boolean, animSpeedIndex = 0 as integer, setFocusIndex = false as boolean, useGridHack = false as boolean)
      if m.contentManager.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        m.itemScroller.disableNonAnimatedFocusUpdates = useGridHack
        ' ? " MTCI 666 " m.__classname
        m.itemScroller.moveToIndex(index, animated = true, animSpeedIndex)
        m.itemScroller.disableNonAnimatedFocusUpdates = false
        ' ? " MOVING TO SUB ROW INDEX " ; index
        compInfo = m.viewManager.cellInfos[index]
        if setFocusIndex and compInfo <> invalid
          m.focusedCellIndex = index
        end if
        ' m.itemScroller.forceFocusOnIndex(m.focusedRowIndex, true)
        ' ? "DONE"
      end if
    end function

    function setUpdatesEnabled(enabled as boolean)
      m.contentManager.setUpdatesEnabled(enabled)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Renderer Helpers
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function getRowRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    function getCellRenderer(rowIndex as integer, cellIndex as integer)
      row = m.getRowRenderer(rowIndex)

      if row <> invalid
        return row@.getRenderer(cellIndex)
      end if

      return invalid
    end function

    function getFocusedRow()
      if m.itemScroller.cellInfo <> invalid
        return m.itemScroller.cellInfo.component
      else
        return invalid
      end if
    end function

    function getFocusedCell()
      return m.getCellRenderer(m.focusedRowIndex, m.focusedCellIndex)
    end function

    function getFocusedRowContent()
      if m.contentManager.content <> invalid
        return m.contentManager.content.getChild(m.focusedRowIndex)
      else
        return invalid
      end if
    end function

    function getFocusedCellContent()
      rowContent = m.getFocusedRowContent()
      if rowContent <> invalid
        return rowContent.getChild(m.focusedCellIndex)
      else
        return invalid
      end if
    end function

    function _setIndices(focusedRowIndex as integer, focusedCellIndex as integer)
      ' ? " SET INDICES " focusedRowIndex "," focusedCellIndex
      m.log.info("setting list indices", focusedRowIndex, ",", focusedCellIndex)
      m.focusedRowIndex = focusedRowIndex
      m.focusedCellIndex = focusedCellIndex
      m.focusedRowContent = m.getFocusedRowContent()
      m.focusedCellContent = m.getFocusedCellContent()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus indicator callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Movement Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function canMoveFromKeyPress(key as string, isLongPress as boolean) as boolean
      direction = m.keyDirections[key]

      ? " >>>>>>>>>>>>>>>>>>> CAN MOVE FROM " key " isFocusing " m.focusIndicatorManager.isFocusing
      if m._isRenderingUpdate
        m.log.info("cannot interact with keys while rendering")
        return false
      end if

      if m.focusIndicatorManager.isFocusing
        ? " IS ALRADY FOCUSING"
        'TODO - improve this
        m.log.info("ignoring press", key, "because the focus indiciator is moving")
        'Allow to keep moving in same direction
        return (key <> "up" and key <> "down")
      end if

      if m.listKeys[key] = true
        return m.itemScroller.canMoveInDirection(direction) and (not isLongPress or m.viewManager.settings.focusSettings.canLongPress)
      else if m.rowKeys[key] = true
        row = m.getFocusedRow()
        if row <> invalid
          return row@.canMoveInDirection(direction, isLongPress)
        else
          m.log.verbose("FOCUSED ROW INVALID")
        end if
      end if
      return false
    end function

    private function onRowKeyPress(key as string) as boolean
      m.log.info("key", key)
      m.itemScroller.isDoingLongPress = false


      if m.isAlreadyScrolling(false)
        ? " IS ALREADY SCROLLING"
        return true
      end if

      m.log.verbose(" OKP ", key)
      if m.canMoveFromKeyPress(key, false)
        direction = m.keyDirections[key]
        m.isDoingFlowFocus = false
        isPage = key = "rewind" or key = "fastforward"
        m.log.verbose(" FROM KEY PRESS ", key, " isPage ", isPage)
        return m.getFocusedRow()@.moveFromPress(direction, false, isPage)
      end if

      return false
    end function

    private function isOkPressAllowedNow() as boolean
      if m.delegate = invalid
        m.log.verbose("no delegate for long press - ignoring ok press")
        return false
      end if

      if not m.state = "rendered"
        m.log.info("list is not rendered - ignoring ok press")
        return false
      end if

      if m._isRenderingUpdate
        m.log.info("cannot interact with keys while rendering")
        return false
      end if

      'FIXME - add ability to change of direction, mid-animation
      isScrolling = m.viewManager.isScrolling or m.focusIndicatorManager.isDoingFlowFocus or m.isScrolling
      if isScrolling
        m.log.info("Cannot select while scrolling")
        ' ? " CANNOT select while view is scrolling "; m.viewManager.isScrolling ; " FF " ; m.focusIndicatorManager.isDoingFlowFocus
        'TODO - improve this
        return false
      end if

      return true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function isAnyKeyPressLocked(key as string) as boolean
      m._timeSinceLastKeypress = m.keyTimer.totalmilliseconds()
      m.keyTimer.mark()

      if m._lastKeyPress = key and m._timeSinceLastKeypress < 800
        if m._timeSinceLastKeypress < 300
          m._repeatKeyPressCount++
        end if
      else
        m._repeatKeyPressCount = 0
      end if
      m._lastKeyPress = key
      ' ? "TIME SINCE LAST KEYPRESS:: " m._timeSinceLastKeypress " count " m._repeatKeyPressCount
      return false
    end function

    private function onKeyPressFastForward() as boolean
      return m.onRowKeyPress("fastforward")
    end function

    private function onKeyPressRewind() as boolean
      return m.onRowKeyPress("rewind")
    end function

    private function onKeyPressLeft() as boolean
      return m.onRowKeyPress("left")
    end function

    private function onKeyPressRight() as boolean
      return m.onRowKeyPress("right")
    end function

    private function canScroll(key as string) as boolean
      if m.listKeys[key]
        if m.isAlreadyScrolling(m.listKeys[key] = true)
          return false
        end if
      else if m.rowKeys[key] = true
        direction = m.keyDirections[key]
        return m.getFocusedRow()@.canMoveInDirection(direction)
      end if
      return true
    end function

    private function isAlreadyScrolling(isUpDown as boolean) as boolean
      ? "VIEW MANAGER IS SCROLLING", m.viewManager.isScrolling ; " Doing FF " ; m.isDoingFlowFocus " IS FOCUSING " m.focusIndicatorManager.isFocusing
      m.log.info("isAlreadyScrolling? ", m.focusIndicatorManager.isFocusing)

      'HACK
      'HACK
      'HACK
      'HACK
      'HACK
      'HACK
      'HACK
      return false
      return m.focusIndicatorManager.isFocusing or m.viewManager.isScrolling or (isUpDown and m.isDoingFlowFocus)
    end function

    private function onKeyPressOptions() as boolean
      m.log.info("updating list")

      if m._forceReloadListWhenPressingOption
        m.forceUpdate(true)
        return true
      end if

      return false
    end function

    private function onKeyPressUp() as boolean
      if m.state <> "rendered"
        return false
      end if
      m.log.verbose("onKeyPressUp")

      'FIXME - add ability to change of direction, mid-animation
      ' isScrolling = m.viewManager.isScrolling or m.focusIndicatorManager.isDoingFlowFocus
      ' if isScrolling
      '   m.log.info("was already scrolling - ignoring")
      ' m.log.verbose(" CANNOT SCROLL is already scrolling ", m.viewManager.isScrolling, " FF ", m.focusIndicatorManager.isDoingFlowFocus)
      '   'TODO - improve this
      '   ' if m.focusIndicatorManager.isDoingFlowFocus
      '   '   return true
      '   ' end if
      '   m.itemScroller.move(1, false, true, true)

      '   return true
      ' end if

      if m.itemScroller.canMoveInDirection(-1)
        result = m.itemScroller.moveFromPress(-1, false)
        return result
      else
        return false
      end if
    end function

    private function onKeyPressOk() as boolean
      m.log.verbose("onKeyPressOk")
      if m.isOkPressAllowedNow()
        m.delegate@._apply("onItemSelected", [{
          rowIndex: m.focusedRowIndex
          cellIndex: m.focusedCellIndex
        }], false)
      end if

      return true
    end function

    private function onKeyPressDown() as boolean
      if m.state <> "rendered"
        return false
      end if
      m.log.verbose("onKeyPressDown")

      if m.itemScroller.canMoveInDirection(1)
        return m.itemScroller.moveFromPress(1, false)
      else
        m.log.verbose(" SKIPPING DOWN")
        return false
      end if
    end function

    private function getLongPressIntervalForKey(key as string) as float
      'm.log.resetIndent()
      if m.state <> "rendered"
        m.log.verbose("list is not ready yet, so _no_ long press processing: m.state is '<", m.state, "'")

        return 0
      end if

      if m.viewManager.listSettings = invalid or m.viewManager.listSettings.allowLongPress = false
        m.log.verbose("invalid settings; allowLongPress is <false>")
        return 0
      end if

      if key = "OK" and m.isOkPressAllowedNow()
        m.log.verbose("valid long press with ok key", key)
        return 0.2
      else if m.canMoveFromKeyPress(key, true)
        ' if m._repeatKeyPressCount > 2
        '   m.log.verbose("likely a tap tap tap, ignoring")
        '   return 0
        ' end if
        m.log.verbose("valid long press with key", key)
        return 0.2
      else
        m.log.verbose("cannot do long press", key)
        return 0
      end if
    end function

    private function onLongPressStart(key as string) as boolean
      m.log.info(">>>>onLongPressStart", key)
      'm.log.resetIndent()
      if key = "OK"
        if m.isOkPressAllowedNow()
          m.delegate@._apply("onItemLongSelected", [{
              rowIndex: m.focusedRowIndex
            cellIndex: m.focusedCellIndex }
          ], false)
        end if
        return false
      else if m.canMoveFromKeyPress(key, true)
        direction = m.keyDirections[key]

        if m.listKeys[key] = true
          if m.itemScroller.canMoveInDirection(direction)
            m.log.verbose("long press started on key", key, "going to animate to start of list")
            return m.itemScroller.moveToEnd(direction)
          else
            m.log.verbose("long press started on key", key, "going to animate to end of list")
            return m.itemScroller.moveToEnd(1)
          end if
        else if m.rowKeys[key] = true
          m.log.verbose(" FROM LONG PRESS ", key)
          isPage = key = "rewind" or key = "fastforward"
          'note - a paged move does not support longpress
          return m.getFocusedRow()@.moveFromPress(direction, not isPage, isPage)
        end if
      end if

      return false
    end function

    private function onLongPressFinish(key as string) as boolean
      ' m.log.verbose(" ON LONG PRESS FINISH - LIST ", key)
      if key = "OK"
        'nothing yet
      else if m.listKeys[key] = true
        ' m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        m.itemScroller.cancelScrolling()
        return true
      else if m.rowKeys[key] = true
        m.getFocusedRow()@.cancelMove(false)
        return true
      end if

      return false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Lifecycle Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onGainedFocus(isSelfFocused as boolean)
      super.onGainedFocus(isSelfFocused)
      ' ? "LIST GAINED FOCUS DDD"
      m.setFocusIndicatorManagerHidden(false)
      if isSelfFocused
        m.focusIndicatorManager@.setFocusedOnRow(true)
      end if
    end function

    protected override function onLostFocus()
      ' ? "LIST LOST FOCUS EEE"
      super.onLostFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        ' ? "SETTING FOCUS  FFF"
        m.setFocusIndicatorManagerHidden(true)
        m.focusIndicatorManager@.setFocusedOnRow(false)
      end if
    end function

    protected override function onChildLostFocus()
      'bs:disable-next-line
      if m.top.isChildFocused
        ? "LIST CHILD GAINED FOCUS GGG"
        m.setFocusIndicatorManagerHidden(false)
        m.focusIndicatorManager@.setFocusedOnRow(true)
      else
        ' ? "LIST LOST FOCUS HHH"
        m.setFocusIndicatorManagerHidden(true)
        m.focusIndicatorManager@.setFocusedOnRow(false)
      end if
    end function
  end class
end namespace
