import "pkg:/source/tests/BaseTestSuite.spec.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/ItemViewManager.bs"
import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/tests/TestUtils.spec.bs"


namespace tests
  @tags("ml")
  @suite("ItemScroller tests")
  class ItemScrollerTests extends tests.BaseTestSuite
    private owner
    private container
    private animation
    private viewManager
    private scroller
    private focusManager

    protected override function beforeEach()
      super.beforeEach()
      m.owner = new rooibos.utils.MockNode("owner")
      m.owner.content = ml.listMixin.createListContent()
      m.owner.translation = [0, 0]
      m.owner.width = 1920
      m.owner.height = 1080

      m.container = new rooibos.utils.MockNode("container")
      m.container.translation = [0, 0]
      m.container.width = 1920
      m.container.height = 1080

      cp = { "id": "cp" }

      m.viewManager = new ml.ItemViewManager("ItemViewManager", m.owner, m.container, 1, cp, 0, 100)
      m.focusManager = { "id": "focusManager" }
      m.scroller = new ml.ItemScroller("ItemScroller", m.viewManager, 1)
      m.scroller.focusManager = m.focusManager
      m.configureScroller(1, 20)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ utils
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function printStates(index, comps, direction = 1)
      if direction = 1
        first = 0
        last = 15
      else
        first = 15
        last = 0
      end if

      if comps.count() > last
        for i = first to last step direction
          ' comp = comps[i]
          ' m.log.info(index, comp.id, "evt", comp.listEvent.name, "ivp", comp.isInViewport, "vs", comp._vs)
          '     ' ? "Test" ; index; " c.id:" ; comp.id; " " ; "evt " ; comp.listEvent.name; " " ; "ivp"; " " ; comp.isInViewport; " " ; "vs"; " " ; comp._vs
        end for
      end if
    end function

    function checkrenderedComps(comps, renderedIds, offScreenIds)
      for each id in renderedIds
        m.assertNotInvalid(comps[id], `rendered comp was invalid: ${id}`)
        m.assertTrue(comps[id] <> invalid ? comps[id].isInViewport : false)
      end for

      for each id in offScreenIds
        m.assertNotInvalid(comps[id], `offScreenIds comp was invalid: ${id}`)
        m.assertFalse(comps[id] <> invalid ? comps[id].isInViewport : false)
      end for
    end function

    function checkViewportEvent(testIndex, comps, willEnterIds = [], enterIds = [], willExitIds = [], exitIds = [])

      for each id in enterIds
        m.assertNotInvalid(comps[id], `ScreenIds comp was invalid: ${id}`)
        eventName = comps[id] <> invalid ? comps[id].listEvent.name : ""
        m.assertEqual(eventName, "didEnter", `T: ${testIndex} - expected didEnter on ${id} got ${eventName}`)
      end for

      for each id in exitIds
        m.assertNotInvalid(comps[id], `didExit ScreenIds comp was invalid: ${id}`)
        eventName = comps[id] <> invalid ? comps[id].listEvent.name : ""
        m.assertEqual(eventName, "didExit", `T: ${testIndex} - expected didExit on ${id} got ${eventName}`)
      end for

      for each id in willEnterIds
        m.assertNotInvalid(comps[id], `willEnter ScreenIds comp was invalid: ${id}`)
        eventName = comps[id] <> invalid ? comps[id].listEvent.name : ""
        m.assertEqual(eventName, "willEnter", `T: ${testIndex} - expected willEnter on ${id} got ${eventName}`)
      end for

      for each id in willExitIds
        m.assertNotInvalid(comps[id], `willExit ScreenIds comp was invalid: ${id}`)
        eventName = comps[id] <> invalid ? comps[id].listEvent.name : ""
        m.assertEqual(eventName, "willExit", `T: ${testIndex} - expected willExit on ${id} got ${eventName}`)
      end for

    end function

    private function configureScroller(axes, numItems = 20, itemSize = [300, 300], screenSize = [1920, 1080])
      m.scroller.axes = axes

      tests.utils.configureViewManager(m.viewManager, axes, numItems, itemSize, screenSize)

      m.scroller.onViewManagerUpdate()
    end function
  end class
end namespace
