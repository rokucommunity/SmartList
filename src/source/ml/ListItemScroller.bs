import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/CellInfo.bs"
import "pkg:/source/ml/ViewPortEventNotifier.bs"
import "pkg:/source/ml/ItemScroller.bs"

namespace ml
  class ListItemScroller extends ml.ItemScroller

    function new(viewManager as ml.ItemViewManager, focusManager as mc.types.node)
      super("ListItemScroller", viewManager, focusManager)
      'the list has it's own focus manager, to send n
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Component Info
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function setFocusManagerInfo(cellInfo as ml.CellInfo, nextCellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean) as void
      m.log.info(" LIST setFocusManagerInfo ", m.viewManager.isScrolling)
      if m.viewManager.isScrolling and nextCellInfo <> invalid
        m.log.info("choosing info for scrolling into")

        nextCellInfo.component@.chooseCellInfoForScrollingIntoRow(nextCellInfo)
      end if

      m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextCellInfo, m.direction, isFloatingFocus)
      if m.nextFocusIndicatorConfig <> invalid
        if nextCellInfo <> invalid
          m.nextFocusIndicatorConfig.row = nextCellInfo.component
        end if
        m.nextFocusIndicatorConfig.isRowEvent = true
      end if

      m.log.info(" FROM LIST")
      ' ? " SNIC 777 FROM LIST"
      m.focusManager@.setNextFocusIndicatorConfig(m.nextFocusIndicatorConfig)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function getFocusIndicatorConfig(cellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as ml.FocusIndicatorConfig
      if cellInfo <> invalid and cellInfo <> invalid
        config = cellInfo.component@.getFocusIndicatorConfig(cellInfo, direction, isFloatingFocus, true)
        if config <> invalid
          config.willDoSystemFocus = true
        end if
      else
        return invalid
      end if
      return config
    end function

    protected override function setCellInfo(info as ml.CellInfo)
      isSubRowChanged = m.cellInfo = invalid or info.componentIndex <> m.cellInfo.componentIndex

      m.log.verbose(">>>>>>>>>> SCI ")
      'FIXME check this..
      if isSubRowChanged and m.cellInfo <> invalid and m.cellInfo.component <> invalid
        m.log.verbose("CANCEL SCROLLING FROM LIST")

        m.cellInfo.component@.cancelMove(true)
      end if

      super.setCellInfo(info)
      if isSubRowChanged
        m.viewManager.owner.focusedSubRowIndex = info.componentIndex
      end if
      m.viewManager.owner.screenPos = m.screenPos
      m.focusManager.activeScreenPos = m.screenPos
    end function

    protected override function setNextCellInfo(info as ml.CellInfo) as void
      m.log.info(">>>>>>>>>>>>>>> SNCI ", m.isLastMoveFlowFocus)
      super.setNextCellInfo(info)
      if not m.isLastMoveFlowFocus
        m.focusManager.nextScreenPos = m.nextScreenPos
      end if
    end function

    protected override function notifyViewportEvents(direction as integer, forceAll = false as boolean)
      m.viewPortEventNotifier.notifyListViewportEvents(m.cellInfo, m.nextCellInfo, m.direction, forceAll)
    end function

    override function onViewManagerUpdate()
      super.onViewManagerUpdate()
      ' ? ">>>>>>>>>>>> ON VIEW MANAGER UPDATE"
      m.viewManager.recalculateCellInfos()
    end function
  end class
end namespace
