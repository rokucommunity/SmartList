import "pkg:/source/core/Utils.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/RowItemScroller.bs"
import "pkg:/source/ml/RowItemViewManager.bs"
import "pkg:/source/view/BaseView.bs"
import "pkg:/source/ml/cells/BaseCell.bs"

namespace ml
  @node("ml_SimpleCell", "ml_BaseCell")
  class SimpleCell extends ml.BaseCell

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private poster
    private rectangle
    private label
    private scale
    private bgRect

    private posterSize = [307.0, 100.0]

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Overridden Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createViews() as void
      m.bgRect = mc.createSGNode("mv_Rectangle", m.top, "bgRect", {
        size: m.posterSize
        color: "#555555"
      })

      m.poster = mc.createSGNode("mv_Poster", m.top, "poster", {
        scaleRotateCenter: [m.posterSize[0] / 2, m.posterSize[1] / 2]
        translation: [0, 0]
        loadingBitmapUri: "http://via.placeholder.com/370x300"
        failedBitmapUri: "http://via.placeholder.com/370x300"
        uri: "http://via.placeholder.com/370x300"
        loadWidth: m.posterSize[0]
        loadHeight: m.posterSize[1]
        size: m.posterSize
        loadDisplayMode: "scaleToFit"
      })
      m.rectangle = mc.createSGNode("mv_Rectangle", m.top, "rectangle", {
        opacity: 0.4
        color: "#000000"
        width: m.posterSize[0]
        height: 50
      })
      m.label = mc.createSGNode("mv_Label", m.top, "label", {
        width: m.posterSize[0]
        fontKey: "medium,30"
        color: "#aaaaaa"
        horizAlign: "center"
        translation: [10, 10]
      })
      m.label = m.top.findNode("label")
      m.scale = 1
    end function

    protected override function onShowWithContent(content as mc.types.node)

      ' ? " ON SHOW WITH CONTENT"
      m.poster.width = m.posterSize[0]
      m.poster.height = m.posterSize[1]
      m.setScale(0, true)

      m.label.text = "C:" + m.content.title
      m.poster.uri = m.content.HDGRIDPOSTERURL
      m.label.visible = true
      m.label.fontKey = "medium,30"
      m.label.color = "#aaaaaa"
    end function

    protected override function onHide()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Delegate Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onScrollingChange(isScrolling as boolean, isLong as boolean)
      ' ? "SC: isScrolling " ; " " ; isScrolling ; " IL " ; isLong
      if not isScrolling
        m.label.visible = true
      end if
    end function

    private function onScrollingUpdate(startIndex as integer, currentIndex as integer)
      ' ? "SC: isScrolling UPDATE " ; " " ; startIndex ; " SI " ; currentIndex
      textVisible = abs(startIndex - currentIndex) < 4
      m.label.visible = textVisible
    end function

    private function onWillGainFocus(event as ml.ListEvent)
      ' ? "SC: onCellWillGainFocus " m.index " "event.direction
    end function

    private function onWillLoseFocus(event as ml.ListEvent)
      ' ? "SC: onCellWillLoseFocus " m.index " "event.direction
      m.label.fontKey = "medium,30"
      m.label.color = "#aaaaaa"

    end function

    private function onDidGainFocus(event as ml.ListEvent)
      ' ? "SC: onCellDidGainFocus " m.index " "event.direction
      m.setScale(1, true)
      m.label.fontKey = "mediumBold,40"
      m.label.color = "#ffffff"
    end function

    private function onDidLoseFocus(event as ml.ListEvent)
      ' ? "SC: onCellDidLoseFocus " m.index " "event.direction
      m.label.fontKey = "medium,30"
      m.label.color = "#aaaaaa"
      m.setScale(1, false)
    end function

    private function onGainingFocus(event as ml.ListEvent)
      ' ? "SC: onGainingFocus " m.index " "event.direction " " event.fraction
      m.setScale(event.fraction, true)
    end function

    private function onLosingFocus(event as ml.ListEvent)
      ' ? "SC: onLosingFocus " m.index " " event.direction " " event.fraction
      m.setScale(event.fraction, false)
    end function

    private function setScale(fraction as float, isGaining as boolean) as void
      if isGaining
        m.scale = (fraction + 0.3)
      else
        m.scale = (1 - fraction) + 0.3
      end if
      m.scale = m.scale * 0.8
      m.poster.width = m.posterSize[0] * m.scale
      m.poster.height = m.posterSize[1] * m.scale

      if isGaining
        m.poster.opacity = 0.3 + fraction
      else
        m.poster.opacity = 0.3 + (1 - fraction)
      end if
    end function
  end class
end namespace
