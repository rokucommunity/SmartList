import "pkg:/source/tests/BaseTestSuite.spec.bs"
import "pkg:/source/core/Command.bs"
import "pkg:/source/core/CommandSequence.bs"

namespace tests
  @suite("CommandSequence tests")
  class CommandSequenceTest extends tests.BaseTestSuite

    private commandSequence

    protected override function beforeEach()
      super.beforeEach()
      m.commandSequence = m.createNodeClass(mc.CommandSequence)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("constructor")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    @it("sets initial values")
    function _()
      m.assertEmpty(m.commandSequence.completedCommands)
      m.assertEmpty(m.commandSequence.runningCommands)
      m.assertEmpty(m.commandSequence.commands)
      m.assertEmpty(m.commandSequence.taskCommands)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("startSequentialCommand")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("finishes straight away if the command is finished")
    function _()
      command = {
        name: "c1"
        isFinished: true
      }
      m.expectCalled(command.moveNext())
      m.expectCalled(m.commandSequence.finishCommand(command))

      m.commandSequence.startSequentialCommand(command)
    end function

    @it("starts next command if sequence is not finished")
    function _()
      currentCommand = { "name": "currentCommand" }

      command = {
        name: "c1"
        isFinished: false
        currentCommand: currentCommand
      }
      m.expectCalled(command.moveNext())
      m.expectCalled(m.commandSequence.startCommand(currentCommand))

      m.commandSequence.startSequentialCommand(command)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("test scenario")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @beforeEach
    function testScenarios_beforeEach()
      m.beforeEach()

      m.commandSequence.doMockCommandWork = m.doMockCommandWork
      m.commandSequence.getProvidedCommand = m.getProvidedCommand
      m.commandSequence.getInvalidProvidedCommand = m.getInvalidProvidedCommand

    end function

    @it("scenario A")
    function _()
      ? "-------------------------"
      ? "-------------------------"
      m.commandSequence.createcommands = m.createTestCommands_A
      m.commandSequence.begin()

      m.assertEqual(m.commandSequence.output, { isOk: true })
    end function

    @it("scenario B")
    function _()
      ? "-------------------------"
      ? "-------------------------"
      m.commandSequence.createcommands = m.createTestCommands_B
      m.commandSequence.begin()

      m.assertEqual(m.commandSequence.output, { isOk: true })
    end function

    @it("scenario C")
    function _()
      ? "-------------------------"
      ? "-------------------------"
      m.commandSequence.createcommands = m.createTestCommands_C
      m.commandSequence.begin()

      m.assertEqual(m.commandSequence.output, { isOk: true })
    end function

    @it("scenario D")
    function _()
      ? "-------------------------"
      ? "-------------------------"
      m.commandSequence.createcommands = m.createTestCommands_D
      m.commandSequence.begin()

      m.assertEqual(m.commandSequence.output, { isOk: true })
    end function

    @it("scenario E")
    function _()
      ? "-------------------------"
      ? "-------------------------"
      m.commandSequence.createcommands = m.createTestCommands_E
      m.commandSequence.begin()

      m.assertEqual(m.commandSequence.output, { isOk: true })
    end function

    @it("scenario F")
    function _()
      ? "-------------------------"
      ? "-------------------------"
      m.commandSequence.createcommands = m.createTestCommands_F
      m.commandSequence.begin()

      m.assertEqual(m.commandSequence.output, { isOk: true })
    end function

    @it("scenario G")
    function _()
      ? "-------------------------"
      ? "-------------------------"
      m.commandSequence.createcommands = m.createTestCommands_G
      m.commandSequence.begin()

      m.assertEqual(m.commandSequence.output, { isOk: true })
    end function

    @it("scenario H")
    function _()
      ? "-------------------------"
      ? "-------------------------"
      m.commandSequence.createcommands = m.createTestCommands_H
      m.commandSequence.begin()

      m.assertEqual(m.commandSequence.output, { isOk: true })
    end function

    private function getProvidedCommand(commandProvider as mc.CommandProvider) as mc.Command
      return new mc.Command(commandProvider.name, m.doMockCommandWork)
    end function

    private function getInvalidProvidedCommand(commandProvider as mc.CommandProvider) as mc.Command
      return invalid
    end function

    private function doMockCommandWork(command as mc.Command)
      ? "DO WORK FOR COMMAND " command.name
      'bs:disable-next-line
      m.finishCommand(command)
    end function

    private function createTestCommands_A() as mc.types.array
      return [
        new mc.Command("A", m.doMockCommandWork)
        new mc.Command("B", m.doMockCommandWork)
      ]
    end function

    private function createTestCommands_B() as mc.types.array
      return [new mc.SequentialCommand("Commands", [
          new mc.Command("A", m.doMockCommandWork)
          new mc.OptionalSequentialCommand("B", false, [
            mc.Command("B_1", m.doMockCommandWork)
            mc.Command("B_2", m.doMockCommandWork)
          ])
          new mc.Command("C", m.doMockCommandWork)
          new mc.CommandProvider("D", m.getProvidedCommand)
          new mc.Command("E", m.doMockCommandWork)
          new mc.CommandProvider("F", m.getInvalidProvidedCommand)
          new mc.Command("G", m.doMockCommandWork),
          new mc.OptionalSequentialCommand("H", false, [
            mc.Command("H_1", m.doMockCommandWork)
            mc.Command("H_2", m.doMockCommandWork)
          ])
        ]
      )]
    end function


    private function createTestCommands_C() as mc.types.array
      return [new mc.SequentialCommand("Commands", [
          new mc.Command("A", m.doMockCommandWork)
          new mc.OptionalSequentialCommand("B", true, [
            mc.Command("B_1", m.doMockCommandWork)
            mc.Command("B_2", m.doMockCommandWork)
          ])
          new mc.Command("C", m.doMockCommandWork)
          new mc.CommandProvider("D", m.getProvidedCommand)
          new mc.Command("E", m.doMockCommandWork)
          new mc.CommandProvider("F", m.getInvalidProvidedCommand)
          new mc.Command("G", m.doMockCommandWork),
          new mc.OptionalSequentialCommand("H", false, [
            mc.Command("H_1", m.doMockCommandWork)
            mc.Command("H_2", m.doMockCommandWork)
          ])
        ]
      )]
    end function


    private function createTestCommands_D() as mc.types.array
      return [new mc.SequentialCommand("Commands", [
          new mc.Command("A", m.doMockCommandWork)
          new mc.OptionalSequentialCommand("B", true, [
            mc.Command("B_1", m.doMockCommandWork)
            mc.Command("B_2", m.doMockCommandWork)
          ])
          new mc.Command("C", m.doMockCommandWork)
          new mc.CommandProvider("D", m.getProvidedCommand)
          new mc.Command("E", m.doMockCommandWork)
          new mc.CommandProvider("F", m.getInvalidProvidedCommand)
          new mc.Command("G", m.doMockCommandWork),
          new mc.OptionalSequentialCommand("H", false, [
            mc.Command("H_1", m.doMockCommandWork)
            mc.Command("H_2", m.doMockCommandWork)
          ])
        ]
      )]
    end function

    private function createTestCommands_E() as mc.types.array
      return [new mc.SequentialCommand("Optional Commands", [
          new mc.OptionalCommand("A", true, m.doMockCommandWork)
          new mc.OptionalSequentialCommand("B", true, [
            mc.OptionalCommand("B_1", true, m.doMockCommandWork)
            mc.OptionalCommand("B_2", true, m.doMockCommandWork)
          ])
          new mc.OptionalCommand("C", true, m.doMockCommandWork)
        ]
      )]
    end function

    private function createTestCommands_F() as mc.types.array
      return [new mc.SequentialCommand("Optional Commands", [
          new mc.OptionalCommand("A", false, m.doMockCommandWork)
          new mc.OptionalSequentialCommand("B", true, [
            mc.OptionalCommand("B_1", false, m.doMockCommandWork)
            mc.OptionalCommand("B_2", false, m.doMockCommandWork)
          ])
          new mc.OptionalCommand("C", false, m.doMockCommandWork)
        ]
      )]
    end function

    private function createTestCommands_G() as mc.types.array
      return [new mc.SequentialCommand("Optional Commands", [
          new mc.OptionalCommand("A", false, m.doMockCommandWork)
          new mc.OptionalSequentialCommand("B", true, [
            mc.OptionalCommand("B_1", false, m.doMockCommandWork)
            mc.OptionalCommand("B_2", true, m.doMockCommandWork)
          ])
          new mc.OptionalCommand("C", false, m.doMockCommandWork)
        ]
      )]
    end function

    private function createTestCommands_H() as mc.types.array
      return [new mc.SequentialCommand("Optional Commands", [
          new mc.OptionalCommand("A", true, m.doMockCommandWork)
          new mc.ParallelCommand("B", true, [
            mc.OptionalCommand("B_1", false, m.doMockCommandWork)
            mc.OptionalCommand("B_2", true, m.doMockCommandWork)
          ])
          new mc.OptionalCommand("C", false, m.doMockCommandWork)
        ]
      )]
    end function

  end class
end namespace
