import "pkg:/source/core/MIOC.bs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/view/NodeClass.bs"
import "pkg:/source/view/FontManager.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/core/Command.bs"
import "pkg:/source/core/CommandSequence.bs"

namespace mc.app
  @node("mc_LaunchSequence", "Group")
  class LaunchSequence extends mc.CommandSequence

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Events
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public output as mc.types.AssocArray

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'can set this to false to cut out certain commands
    public isIncludingView = true

    'FIXME - ropm is renaming this line!!! it should not be renamed
    'change this value if you have a different styles location
    protected styleUrl = "pkg:" + "/meta/Styles.json"

    'TODO - where will this file actually be?
    'this is in the ropm folder - let ropm rename
    protected maestroStyleUrl = "pkg:/meta/maestroDefaultStyles.json"
    protected notificationCenter as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private componentPool
    private cellTracker
    private cellBatchCount = 0
    private prebakeCommand as mc.Command

    protected override function createCommands()
      return [new mc.SequentialCommand("Launch Sequence Commands", [
          new mc.Command("Init IOC", m.initializeIOC)
          new mc.OptionalSequentialCommand("Maestro Initialization", m.isIncludingView, m.getMaestroInitializationCommands())
          ' new mc.SequentialCommand("Custom Launch", m.getCustomCommands())
          new mc.SequentialCommand("Custom Launch", m.getCustomCommands())
        ]
      )]
    end function

    protected function getCustomCommands() as mc.types.array
      'override point to provide sequential custom commands
      return []
    end function

    protected function getMaestroInitializationCommands() as mc.types.array
      return [
        new mc.Command("Create FontManger", m.createFontManger)
        new mc.Command("Load Styles", m.loadStyles)
        new mc.Command("Setup Maestro", m.setupMaestro)
        new mc.Command("Initialize ComponentPool", m.initializeComponentPool)
        new mc.Command("Prebake Cells", m._prebakeViews)
      ]
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Maestro
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function setupMaestro(command as mc.Command)
      'bs:disable-next-line
      mv.initializeFocusManager(m.global)

      'note - this will become a framework function to call
      tick = m.top.getScene().createChild("Timer")
      tick.duration = 0.01
      tick.repeat = true
      tick.control = "start"
      mc.setOrAddNodeField(m.global, "tick", tick)
      m.setInstance("tick", tick)

      m.notificationCenter = mc.createSGNode("mc_NotificationCenter", invalid, "notificationCenter")
      mioc.setInstance("notificationCenter", m.notificationCenter)

      m.finishCommand(command)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ IOC
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function initializeIOC(command as mc.Command)
      m.log.info("initializing the IOC container")
      mioc.createContainer()

      m.createIOCInstance("mc_delayedTaskManager", "delayedTaskManager")
      m.setInstance("manifest", m.loadManifest())
      m.finishCommand(command)
    end function

    protected function createIOCInstance(nodeType as string, id as string, args = invalid as mc.types.assocarray, copyToGlobal = false as boolean)
      instance = m.createSGNode(nodeType, invalid, id, args)
      m.setInstance(id, instance)
      if copyToGlobal
        mc.setOrAddNodeField(m.global, id, instance)
      end if
      return instance
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Flyweight
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function initializeComponentPool(command as mc.Command)
      m.componentPool = m.createSGNode("mc_ComponentPool", invalid, "componentPool")
      m.setInstance("componentPool", m.componentPool)
      m.global.addFields({ "componentPool": m.componentPool })

      m.cellTracker = m.createSGNode("mv_CellTracker", invalid, "cellTracker")
      m.setInstance("cellTracker", m.cellTracker)
      m.global.addFields({ "cellTracker": m.cellTracker })
      m.finishCommand(command)
    end function

    protected function _prebakeViews(command as mc.Command) as void
      m.prebakeCommand = command
      m._prebakeViewsBatch()
    end function

    protected function _prebakeViewsBatch() as void
      if m.cellBatchCount = 0
        m.finishCommand(m.prebakeCommand)
      end if

      m.cellBatchCount++
      if m.cellBatchCount = 3
        m.log.info("all cells prebaked")
        m.finishCommand(m.prebakeCommand)
      else
        m.log.info("baking more cells: batch #", m.cellBatchCount)
        m.prebakeViews()
        m.setTimeout(m._prebakeViewsBatch, 0.15)
      end if
    end function

    protected function prebakeViews()
      'override point for prebaking your cells
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ View Related Setup
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function createFontManger(command as mc.Command)
      'bs:disable-next-line
      fontManager = createObject("roSGNode", "mv_FontManager")
      m.setInstance("fontManager", fontManager)
      mc.setOrAddNodeField(m.global, "fontManager", fontManager)
      m.finishCommand(command)
    end function

    protected function loadStyles(command as mc.Command) as void

      styleManager = mc.createSGNode("mv_StyleManager", invalid, "styleManager")
      m.setInstance("styleManager", styleManager)
      m.global.addFields({ "styleManager": styleManager })

      m.log.info("loading maestro-default styles from", m.maestroStyleUrl)
      styleManager@.setStyleJson(m.loadJson(m.maestroStyleUrl))
      m.log.info("loading styles from", m.styleUrl)
      styleManager@.addStyles(m.loadJson(m.styleUrl))

      version = styleManager@.getStyle("version")
      if version = invalid
        m.failCommand("loadStyles", "Style json could not be parsed.")
        return
      end if
      m.log.info("using style version", version)
      m.finishCommand(command)
    end function

    protected override function failCommand(command as mc.Command, message as string)
      m.log.error(`error executing loading command ${command.name}: `, message)
      ' TODO(gcook):  what happens here?
      m.showErrorDialog(`Loading command failed: ${command.name}`, message)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Protected Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function loadJson(path as string) as mc.types.assocarray
      try
        text = readAsciiFile(path)
        result = parseJson(text)
        return result
      catch error
        throw "could not loadJson from path " + path
      end try
    end function

    protected function showErrorDialog(title as string, message as string) as mc.types.node
      dialog = m.createSGNode("Dialog")
      dialog.title = title
      dialog.message = message
      dialog.buttons = ["Exit"]

      m.top.getScene().dialog = dialog

      m.observe(dialog.buttonSelected, m.onErrorDialogClose, "none")
      m.observe(dialog.wasClosed, m.onErrorDialogClose, "none")
      return dialog
    end function

    protected function onErrorDialogClose()
      m.top.getScene().dialog = invalid
      m.top.getScene().closeChannel = true
    end function

    private function loadManifest()
      manifest = {}

      file = readAsciiFile("pkg:/" + "manifest")
      lines = file.split(Chr(10))

      for each line in lines
        line = line.trim()

        if line.left(1) <> "#" and line.len() > 0
          equal = line.instr(0, "=")

          if equal = -1
            equal = line.len()
          end if

          key = line.left(equal)
          value = line.mid(equal + 1)
          manifest[key] = value
        end if
      end for

      return manifest
    end function

  end class
end namespace
