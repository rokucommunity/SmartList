import "pkg:/source/tests/BaseTestSuite.spec.bs"
import "pkg:/source/core/Collections.bs"
import "pkg:/source/core/BaseClass.bs"

namespace tests
  @suite("Collections tests")
  class CollectionsTests extends tests.BaseTestSuite

    private Collections
    private localData as dynamic

    protected override function setup()
      super.setup()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getSortedArrayByKey")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("does not bork on invalid/empty values")
    @params(invalid)
    @params({})
    @params([])
    function _(value)
      m.assertEmpty(mc.collections.getSortedArrayByKey(value, "id"))
    end function

    @it("does not bork on invalid/empty keys")
    @params(invalid)
    @params("")
    @params([])
    function _(key)
      arr = [
        { id: "1" }
        { id: "2" }
        { id: "3" }
      ]
      m.assertEmpty(mc.collections.getSortedArrayByKey(arr, key))
    end function

    @it("sorts on key")
    function _()
      arr = [
        {
          id: "3"
          id2: "a"
        }
        {
          id: "2"
          id2: "b"
        }
        {
          id: "1"
          id2: "c"
        }
      ]
      expected = [
        {
          id: "1"
          id2: "c"
        }
        {
          id: "2"
          id2: "b"
        }
        {
          id: "3"
          id2: "a"
        }
      ]
      result = mc.collections.getSortedArrayByKey(arr, "id")
      m.assertEqual(result, expected)
    end function

    @it("sorts test 2")
    function _()
      arr = [
        {
          id: "2"
          id2: "b"
        }
        {
          id: "1"
          id2: "a"
        }
        {
          id: "3"
          id2: "c"
        }
      ]
      expected = [
        {
          id: "1"
          id2: "a"
        }
        {
          id: "2"
          id2: "b"
        }
        {
          id: "3"
          id2: "c"
        }
      ]
      result = mc.collections.getSortedArrayByKey(arr, "id")
      m.assertEqual(result, expected)
    end function

    @it("sorts descending")
    function _()
      arr = [
        {
          id: "2"
          id2: "b"
        }
        {
          id: "1"
          id2: "a"
        }
        {
          id: "3"
          id2: "c"
        }
      ]
      expected = [
        {
          id: "3"
          id2: "c"
        }
        {
          id: "2"
          id2: "b"
        }
        {
          id: "1"
          id2: "a"
        }
      ]
      result = mc.collections.getSortedArrayByKey(arr, "id", false)
      m.assertEqual(result, expected)
    end function

    @it("sorts on different key")
    function _()
      arr = [
        {
          id: "1"
          id2: "a"
        }
        {
          id: "3"
          id2: "c"
        }
        {
          id: "2"
          id2: "b"
        }
      ]
      expected = [
        {
          id: "1"
          id2: "a"
        }
        {
          id: "2"
          id2: "b"
        }
        {
          id: "3"
          id2: "c"
        }
      ]
      m.assertEqual(mc.collections.getSortedArrayByKey(arr, "id2"), expected)
    end function

    @it("sorts on keypath key")
    function _()
      arr = [
        { item: {
            id: "1"
            id2: "a"
          }
        }
        { item: {
            id: "3"
            id2: "c"
          }
        }
        { item: {
            id: "2"
            id2: "b"
          }
        }
      ]
      expected = [
        { item: {
            id: "1"
            id2: "a"
          }
        }
        { item: {
            id: "2"
            id2: "b"
          }
        }
        { item: {
            id: "3"
            id2: "c"
          }
        }
      ]
      m.assertEqual(mc.collections.getSortedArrayByKey(arr, "item.id2"), expected)
    end function

    @it("sorts on keypath descending")
    function _()
      arr = [
        {
          item: {
            id: "2"
            id2: "b"
          }
        }
        {
          item: {
            id: "1"
            id2: "a"
          }
        }
        {
          item: {
            id: "3"
            id2: "c"
          }
        }
      ]
      expected = [
        {
          item: {
            id: "3"
            id2: "c"
          }
        }
        {
          item: {
            id: "2"
            id2: "b"
          }
        }
        {
          item: {
            id: "1"
            id2: "a"
          }
        }
      ]
      result = mc.collections.getSortedArrayByKey(arr, "item.id", false)
      m.assertEqual(result, expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getArrayIndex")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets node indexes")
    @params(-1, -1)
    @params(0, 0)
    @params(1, 1)
    @params(2, 2)
    @params(3, -1)
    function _(index, expectedIndex)
      i0 = mc.createSGNode("ContentNode")
      i1 = mc.createSGNode("ContentNode")
      i2 = mc.createSGNode("ContentNode")
      items = [i0, i1, i2]
      m.assertEqual(mc.collections.getArrayIndex(items, items[index]), expectedIndex)
    end function

    @it("gets keyed indexes")
    @params(-1, -1)
    @params(0, 0)
    @params(1, 1)
    @params(2, 2)
    @params(3, -1)
    function _(index, expectedIndex)
      i0 = { "id": "i0" }
      i1 = { "id": "i1" }
      i2 = { "id": "i2" }
      items = [i0, i1, i2]
      m.assertEqual(mc.collections.getArrayIndex(items, items[index], "id"), expectedIndex)
    end function

    @it("gets regular values")
    @params([0, 1, 2], 0, 0)
    @params([0, 1, 2], 1, 1)
    @params([0, 1, 2], 2, 2)
    @params(["a", "b", "c"], "a", 0)
    @params(["a", "b", "c"], "b", 1)
    @params(["a", "b", "c"], "c", 2)
    function _(items, value, expectedIndex)
      m.assertEqual(mc.collections.getArrayIndex(items, value), expectedIndex)
    end function

    @it("defaults to index of id, if dealing with aas")
    @params(-1, -1)
    @params(0, 0)
    @params(1, 1)
    @params(2, 2)
    @params(3, -1)
    function _(index, expectedIndex)
      i0 = { "id": "i0" }
      i1 = { "id": "i1" }
      i2 = { "id": "i2" }
      items = [i0, i1, i2]
      m.assertEqual(mc.collections.getArrayIndex(items, items[index]), expectedIndex)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getItemAtOffset")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("works with regular values offset")
    @params([0, 1, 2], 0, 0, 0)
    @params([0, 1, 2], 0, 1, 1)
    @params([0, 1, 2], 0, 2, 2)
    @params([0, 1, 2], 0, 3, 2)
    @params([0, 1, 2], 0, -1, 0)
    @params([0, 1, 2], 1, 0, 1)
    @params([0, 1, 2], 1, 1, 2)
    @params([0, 1, 2], 1, 2, 2)
    @params([0, 1, 2], 1, -1, 0)
    @params([0, 1, 2], 1, -2, 0)
    @params([0, 1, 2], 2, 1, 2)
    @params([0, 1, 2], 2, -1, 1)
    @params([0, 1, 2], 2, -2, 0)
    @params([0, 1, 2], 2, -3, 0)
    @params(["a", "b", "c"], "a", 0, "a")
    @params(["a", "b", "c"], "a", -1, "a")
    @params(["a", "b", "c"], "a", 1, "b")
    @params(["a", "b", "c"], "a", 2, "c")
    @params(["a", "b", "c"], "a", 3, "c")
    @params(["a", "b", "c"], "b", 0, "b")
    @params(["a", "b", "c"], "b", 1, "c")
    @params(["a", "b", "c"], "b", 2, "c")
    @params(["a", "b", "c"], "b", -1, "a")
    @params(["a", "b", "c"], "c", -2, "a")
    @params(["a", "b", "c"], "c", 0, "c")
    @params(["a", "b", "c"], "c", 1, "c")
    @params(["a", "b", "c"], "c", -1, "b")
    @params(["a", "b", "c"], "c", -2, "a")
    @params(["a", "b", "c"], "c", -3, "a")
    function _(items, value, offset, expectedValue)
      m.assertEqual(mc.collections.getItemAtOffset(items, value, offset), expectedValue)
    end function

    @it("defaults to index of id, if dealing with aas")
    @params(0, 0, "i0")
    @params(0, -1, "i0")
    @params(0, 1, "i1")
    @params(0, 2, "i2")
    @params(0, 3, "i2")
    @params(1, 0, "i1")
    @params(1, -1, "i0")
    @params(1, -2, "i0")
    @params(1, 1, "i2")
    @params(1, 2, "i2")
    @params(2, 0, "i2")
    @params(2, -1, "i1")
    @params(2, -2, "i0")
    @params(2, -3, "i0")
    @params(2, 1, "i2")
    function _(index, offset, expectedId)
      i0 = { "id": "i0" }
      i1 = { "id": "i1" }
      i2 = { "id": "i2" }
      items = [i0, i1, i2]
      m.assertEqual(mc.collections.getItemAtOffset(items, items[index], offset).id, expectedId)
    end function

    @it("works with nodes")
    @params(0, 0, "i0")
    @params(0, -1, "i0")
    @params(0, 1, "i1")
    @params(0, 2, "i2")
    @params(0, 3, "i2")
    @params(1, 0, "i1")
    @params(1, -1, "i0")
    @params(1, -2, "i0")
    @params(1, 1, "i2")
    @params(1, 2, "i2")
    @params(2, 0, "i2")
    @params(2, -1, "i1")
    @params(2, -2, "i0")
    @params(2, -3, "i0")
    @params(2, 1, "i2")
    function _(index, offset, expectedId)
      i0 = mc.createSGNode("ContentNode", invalid, "i0")
      i1 = mc.createSGNode("ContentNode", invalid, "i1")
      i2 = mc.createSGNode("ContentNode", invalid, "i2")
      items = [i0, i1, i2]
      m.assertEqual(mc.collections.getItemAtOffset(items, items[index], offset).id, expectedId)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("find")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("filters with value predicate")
    @params(["US", "DE", "FR", "UK"], "US", "US")
    @params(["US", "DE", "FR", "UK"], "UK", "UK")
    @params(["US", "DE", "FR", "UK"], "FR", "FR")
    @params(["US", "DE", "FR", "UK"], "DE", "DE")
    @params(["US", "DE", "FR", "UK"], "SE", invalid)
    @params(["DE", "US", "FR", "UK"], "CA", invalid)
    @params(["US"], "US", "US")
    @params(["US"], invalid, invalid)
    @params([], "US", invalid)
    @params(invalid, "US", invalid)
    function _(codes, value, expected)
      m.assertEqual(mc.collections.find(codes, new mc.collections.ValuePredicate(value)), expected)
    end function

    @it("filters with field predicate")
    @params(["US", "DE", "FR", "UK"], "US", "US")
    @params(["US", "DE", "FR", "UK"], "UK", "UK")
    @params(["US", "DE", "FR", "UK"], "FR", "FR")
    @params(["US", "DE", "FR", "UK"], "DE", "DE")
    @params(["US", "DE", "FR", "UK"], "SE", invalid)
    @params(["DE", "US", "FR", "UK"], "CA", invalid)
    @params(["US"], "US", "US")
    @params(["US"], invalid, invalid)
    @params([], "US", invalid)
    @params(invalid, "US", invalid)
    function _(codes, value, expected)
      items = mc.collections.map(codes, function(v): return { code: v }: end function)
      foundItem = mc.collections.find(items, new mc.collections.FieldPredicate("code", value))
      m.assertEqual(mc.getPath(foundItem, "code"), expected)
    end function

    @it("filters with value")
    @params(["US", "DE", "FR", "UK"], "US", "US")
    @params(["US", "DE", "FR", "UK"], "UK", "UK")
    @params(["US", "DE", "FR", "UK"], "FR", "FR")
    @params(["US", "DE", "FR", "UK"], "DE", "DE")
    @params(["US", "DE", "FR", "UK"], "SE", invalid)
    @params(["DE", "US", "FR", "UK"], "CA", invalid)
    @params(["US"], "US", "US")
    @params(["US"], invalid, invalid)
    @params([], "US", invalid)
    @params(invalid, "US", invalid)
    function _(codes, value, expected)
      foundItem = mc.collections.find(codes, value)
      m.assertEqual(foundItem, expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("map")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("maps with value predicate")
    function _()
      codes = ["US", "DE", "FR", "UK"]
      expected = ["_US", "_DE", "_FR", "_UK"]
      m.assertEqual(mc.collections.map(codes, function(item): return "_" + item: end function), expected)
    end function

    @it("maps node children")
    function _()
      codes = ["US", "DE", "FR", "UK"]
      parent = mc.createSGNode("Node", invalid, "parent")
      for each code in codes
        mc.createSGNode("Node", parent, code)
      end for

      expected = ["_US", "_DE", "_FR", "_UK"]
      m.assertEqual(mc.collections.map(parent, function(item): return "_" + item.id: end function), expected)
    end function

    @it("maps mc_Node children")
    function _()
      codes = ["US", "DE", "FR", "UK"]
      parent = mc.createSGNode("mc_Node", invalid, "parent")
      for each code in codes
        mc.createSGNode("Node", parent, code)
      end for

      expected = ["_US", "_DE", "_FR", "_UK"]
      m.assertEqual(mc.collections.map(parent, function(item): return "_" + item.id: end function), expected)
    end function

    @it("maps associative array")
    function _()
      codes = { "US": "United States", "DE": "Germany", "FR": "France", "UK": "United Kingdom" }
      expected = ["_UK_United Kingdom", "_FR_France", "_DE_Germany", "_US_United States"]

      m.assertEqual(mc.collections.map(codes, function(key, value): return "_" + key + "_" + value: end function), expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("filter")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("filters all with value predicate")
    @params(["US", "US", "FR", "UK"], "US", ["US", "US"])
    @params(["US", "DE", "FR", "UK"], "UK", ["UK"])
    @params(["FR", "FR", "FR", "UK"], "FR", ["FR", "FR", "FR"])
    @params(["US", "DE", "FR", "UK"], "DE", ["DE"])
    @params(["US", "DE", "FR", "UK"], "SE", [])
    @params(["DE", "US", "FR", "UK"], "CA", [])
    @params(["US"], "US", ["US"])
    @params(["US"], invalid, [])
    @params([], "US", [])
    @params(invalid, "US", [])
    function _(codes, value, expected)
      m.assertEqual(mc.collections.filter(codes, new mc.collections.ValuePredicate(value)), expected)
    end function

    @it("filters first matched with value predicate")
    @params(["US", "DE", "FR", "UK"], "US", ["US"])
    @params(["US", "DE", "FR", "UK"], "UK", ["UK"])
    @params(["US", "FR", "FR", "UK"], "FR", ["FR"])
    @params(["US", "DE", "UK", "UK"], "UK", ["UK"])
    @params(["US", "DE", "FR", "UK"], "SE", [])
    @params(["DE", "US", "FR", "UK"], "CA", [])
    @params(["US"], "US", ["US"])
    @params(["US"], invalid, [])
    @params([], "US", [])
    @params(invalid, "US", [])
    function _(codes, value, expected)
      m.assertEqual(mc.collections.filter(codes, new mc.collections.ValuePredicate(value), false), expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("using m as context")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("works with map")
    function _()
      items = ["a", "b", "c"]
      m.localData = "l"

      mappedItems = mc.collections.map(items, function(i)
        return `${i}-${m.localData}`
      end function, m)

      m.assertEqual(mappedItems, ["a-l", "b-l", "c-l"])
    end function

    @it("works with filter")
    function _()
      items = ["a", "b", "c"]
      m.localData = "b"

      item = mc.collections.filter(items, function(i): return i = m.localData: end function, true, m)

      m.assertEqual(item, ["b"])
    end function

    @it("works with find")
    function _()
      items = ["a", "b", "c"]
      m.localData = "b"

      item = mc.collections.find(items, function(i): return i = m.localData: end function, invalid, m)

      m.assertEqual(item, "b")
    end function

    @it("works with contains")
    function _()
      items = ["a", "b", "c"]
      m.localData = "b"

      m.assertTrue(mc.collections.contains(items, function(i): return i = m.localData: end function, m))

    end function

    @it("works with sort")
    function _()
      items = ["a", "b", "c"]
      m.localData = { "a": "3", "b": "2", "c": "1" }

      items = mc.collections.getSortedArrayByFunction(items, function(i): return m.localData[i]: end function, true, m)

      m.assertEqual(items, ["c", "b", "a"])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("using auto-injected m to give local context")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function printStuff(text)
      ? text
      m.localData++
    end function

    @it("works with forEach")
    function _()
      items = ["a", "b", "c"]
      m.localData = 0
      mc.collections.forEach(items, function(i): m.printStuff(i): end function)
      m.assertEqual(m.localData, 3)
    end function

    @it("works with map")
    function _()
      items = ["a", "b", "c"]
      m.localData = "l"

      mappedItems = mc.collections.map(items, function(i)
        return `${i}-${m.localData}`
      end function)

      m.assertEqual(mappedItems, ["a-l", "b-l", "c-l"])
    end function

    @it("works with filter")
    function _()
      items = ["a", "b", "c"]
      m.localData = "b"

      item = mc.collections.filter(items, function(i): return i = m.localData: end function)

      m.assertEqual(item, ["b"])
    end function

    @it("works with find")
    function _()
      items = ["a", "b", "c"]
      m.localData = "b"

      item = mc.collections.find(items, function(i): return i = m.localData: end function)

      m.assertEqual(item, "b")
    end function

    @it("works with contains")
    function _()
      items = ["a", "b", "c"]
      m.localData = "b"

      result = mc.collections.contains(items, function(i): return i = m.localData: end function)
      m.assertTrue(result)
    end function

    @it("works with sort")
    function _()
      items = ["a", "b", "c"]
      m.localData = { "a": "3", "b": "2", "c": "1" }

      items = mc.collections.getSortedArrayByFunction(items, function(i): return m.localData[i]: end function)

      m.assertEqual(items, ["c", "b", "a"])
    end function


  end class
end namespace
