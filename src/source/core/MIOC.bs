import "pkg:/source/core/Utils.bs"
namespace mioc
  ' /**
  '  * @module MIOC
  '  * @description Maestro IOC mixin methods. You can use this IOC container to allow for easy stubbing/mocking of data items in your app.
  '  */

  ' /**
  '  * @member nameOfFunction
  '  * @memberof module:MIOC
  '  * @instance
  '  * @function createContainer
  '  * @description creates an IOC container on your app. Call this as early as you can.
  '  */
  function createContainer()
    mioc.reset()
    m.__mioc = createObject("roSGNode", "Node")
    mc.setOrAddNodeField(mc.getGlobal(), "__mioc", m.__mioc)
    mc.setOrAddNodeField(mc.getScene(), "__mioc", m.__mioc)

  end function

  ' /**
  '  * @member nameOfFunction?
  '  * @memberof module:MIOC
  '  * @instance
  '  * @function initialize
  '  * @description Called automatically to setup your scope with ioc
  '  */
  function initialize()
    m.__mioc = mc.getGlobal().__mioc
    if m.__mioc = invalid
      'in some cases (like tests, the global reference can get screwed up - fall back to scene)
      m.__mioc = mc.getScene().__mioc
    end if
    if m.__mioc = invalid
      mc.private.logError("call createContainer must be called before initializing any scopes")
    end if
  end function

  function reset()
    container = mc.getGlobal().__mioc
    if container <> invalid
      'bs:disable-next-line
      fields = container.getFields()
      fieldNames = []
      for each key in fields
        fieldNames.push(key)
      end for
      container.removeFields(fieldNames)
    end if
    mioc.clearClassInstances()
  end function

  function getInstance(nameOrNameAndPath as string, pathOrDefaultValue = invalid as dynamic, defaultValue = invalid as dynamic) as dynamic
    if m.__mioc = invalid
      mioc.initialize()
    end if

    if nameOrNameAndPath.instr(".") <> -1
      defaultValue = pathOrDefaultValue
      parts = nameOrNameAndPath.split(".")
      nameOrNameAndPath = parts[0]
      parts.delete(0)
      pathOrDefaultValue = parts.join(".")
    end if

    instance = m.__mioc[nameOrNameAndPath]
    ' if instance = invalid
    ' mc.private.logWarn("value", nameOrNameAndPath, "was not found in IOC")
    ' end if

    if pathOrDefaultValue = invalid
      value = instance
    else
      value = mc.getPath(instance, pathOrDefaultValue)
    end if

    if value = invalid
      return defaultValue
    else
      return value
    end if

  end function

  function setInstances(instances as mc.types.assocarray)
    for each key in instances
      mioc.setInstance(key, instances[key])
    end for
  end function
  ' /**
  '  * @member setInstance
  '  * @memberof module:MIOC
  '  * @instance
  '  * @function
  '  * @description sets a node instance on the DI container
  '  * @param {field} name of the instance
  '  * @returns {boolean} true if added
  '  */
  function setInstance(field as string, instance as dynamic)
    if type(instance) = "<uninitialized>"
      mc.private.logError("tried to add uninitialized instance to IOC container for field ", field)
      return false
    end if

    if m.__mioc = invalid
      mioc.initialize()
    end if

    if mioc.isValidType(instance)
      if m.__mioc.doesExist(field)
        m.__mioc[field] = instance
      else
        newFields = {}
        newFields[field] = instance
        m.__mioc.addfields(newFields)
      end if
      return true
    else
      mc.private.logWarn("Instance type", type(instance), "is not supported in IOC")
      return false
    end if
  end function

  function updateInstance(nameOrNameAndPath as string, pathOrValue as dynamic, value = invalid as dynamic)
    if nameOrNameAndPath.instr(".") <> -1
      value = pathOrValue
      parts = nameOrNameAndPath.split(".")
      nameOrNameAndPath = parts[0]
      parts.delete(0)
      pathOrValue = parts.join(".")
    end if

    instance = mioc.getInstance(nameOrNameAndPath)
    if pathOrValue <> invalid and pathOrValue <> ""
      mc.setPath(instance, pathOrValue, value)
    else
      instance = value
    end if
    mioc.setInstance(nameOrNameAndPath, instance)
  end function

  function setInstanceField(field as string, instanceField as string, value as dynamic)
    instance = mioc.getInstance(field)
    if instance <> invalid
      mc.setOrAddNodeField(instanceField, value)
      mioc.setInstance(field, instance)
    end if
  end function
  ' /**
  '  * @member unsetInstance
  '  * @memberof module:MIOC
  '  * @instance
  '  * @function
  '  * @description sets a node instance on the DI container
  '  * @param {field} name of the instance
  '  * @returns {boolean} true if added
  '  */
  function unsetInstance(field as string)
    if m.__mioc = invalid
      mioc.initialize()
    end if

    if m.__mioc.doesExist(field)
      m.__mioc.removeField(field)
    end if
    return true
  end function

  function setClassInstance(instance as dynamic)
    if instance.doesExist("__classname")

      if m._instancesByType = invalid
        m._instancesByType = {}
      end if

      if not m._instancesByType.doesExist(instance.__classname)
        m._instancesByType[instance.__classname] = instance
      else
        mc.private.logError("instance with type", instance.__classname, "already existed")
      end if
    else
      mc.private.logError("passed non class value")
    end if
  end function

  ' /**
  '  * @member getClassInstance
  '  * @memberof module:MIOC
  '  * @instance
  '  * @function
  '  * @description wrapper for IOC purposes - getting the named item from the model Locator
  '  * @param {string|pointer} classname type to create, or a pointer to the constructor
  '  * @param {array} args - constructor args
  '  * @param {boolean} createTypeIfNotPresent
  '  * @param {boolean}  storeInstance - defaults to true
  '  * @returns {any|invalid} resource, or invalid if not found
  '  */
  function getClassInstance(clazz as dynamic, args = [] as mc.types.assocarray, createTypeIfNotPresent = true as boolean, storeInstance = true as boolean) as dynamic
    if mc.isFunction(clazz)
      instance = mioc.createClassInstance(clazz, args)
      if storeInstance and instance <> invalid
        mioc.setClassInstance(instance)
      end if
      return instance
    end if

    if m._instancesByType = invalid
      m._instancesByType = {}
    end if

    instance = invalid
    if m._instancesByType.doesExist(clazz)
      instance = m._instancesByType[clazz]
    else if createTypeIfNotPresent
      instance = mioc.createClassInstance(clazz, args)
      if storeInstance and instance <> invalid
        mioc.setClassInstance(instance)
      end if
    end if

    return instance
  end function

  ' @params {string|constructor} - name of class, or pointer to class constructor
  function createClassInstance(classType as dynamic, args = [] as mc.types.array) as dynamic

    if mc.isFunction(classType)
      return mc_apply(classType, args)
    end if

    'bs:disable-next-line
    clazz = mr_getClass(classType)

    if mc_isFunction(clazz)
      return mc_apply(clazz, args)
    else
      if type(m.top) = "roSGNode"
        subType = m.top.subtype()
      else
        subType = "UNKNOWN SCOPE"
      end if
      mc.private.logError("class", classType, "is not in scope inside", subType)
    end if

    return invalid
  end function

  function clearClassInstances()
    ' mc.private.logWarn("WARN clearing class instance store")
    m._instancesByType = {}
  end function

  function isValidType(instance as dynamic)
    instanceType = type(instance)
    if instanceType = "roSGNode" or instanceType = "roAssociativeArray" or instanceType = "String" or instanceType = "Integer" or instanceType = "Float" or instance = invalid or GetInterface(instance, "ifString") <> invalid or GetInterface(instance, "ifBoolean") <> invalid or GetInterface(instance, "ifInt") <> invalid or GetInterface(instance, "ifDouble") <> invalid or GetInterface(instance, "ifAssociativeArray") <> invalid or GetInterface(instance, "ifFloat") <> invalid or GetInterface(instance, "ifArray") <> invalid
      return true
    end if
    return false
  end function
end namespace

namespace mioc.testing

  function setContainer(container as mc.types.assocarray)
    mioc.testing.unset__mioc()
    m.__mioc = container
    mc.setOrAddNodeField(mc.getGlobal(), "__mioc", m.__mioc)
    mc.setOrAddNodeField(mc.getScene(), "__mioc", m.__mioc)
  end function

  function unset__mioc()
    m.__mioc = invalid
    mc.getGlobal().delete("__mioc")
  end function

  function createMockClassInstance(classname as string, id as string, fields = {} as mc.types.assocarray) as dynamic
    instance = { "id": id, "__classname": classname }
    instance.append(fields)
    mioc.setClassInstance(instance)
    return instance
  end function

end namespace
