import "pkg:/source/core/Tasks.bs"
import "pkg:/source/core/Utils.bs"
import "Types-Polyfill.bs"
import "pkg:/source/view/ViewUtils.bs"
import "pkg:/source/roku_modules/log/LogMixin.brs"

namespace mc
  class BaseClass

    public state = "none"
    protected name
    protected log

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(name as string)
      m.log = new log.Logger(name)
      m.name = name
    end function

    private function _initialize()
      m.state = "initialized"
      m.initialize()
      'bs:disable-next-line
      if m.isWiringObserversOnInit = true
        'bs:disable-next-line
        m_wireUpObservers()
      end if
    end function

    protected function initialize()
      'override me

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Internal Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function _apply(funcName as string, args as mc.types.array, warnIfNoFunction = true as boolean)
      return mc.apply(funcName, args, m, warnIfNoFunction)
    end function

    private function _addIOCObserver(fieldName as string, instanceName as string, path as string, observedPath as string, observedField as string, callback = invalid as function)
      'bs:disable-next-line
      instance = m.getInstance(instanceName)
      value = mc.getPath(instance, path)
      if observedPath <> ""
        instance = mc.getPath(instance, observedPath)
      end if

      if type(instance) = "roSGNode"
        if callback = invalid
          m.observeNodeField(instance, observedField, fieldName, "field")
        else
          m.observeNodeField(instance, observedField, callback, "fieldAndValue", false, fieldName)
        end if
      else
        m.log.warn("cannot add observer for injected field", fieldName, "from IOC", "instanceName", ".", path)
      end if

      return value
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ creation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function createSGNode(nodeType as string, parent = invalid as mc.types.node, id = invalid as string, args = invalid as mc.types.assocarray, callInitialize = true as boolean, mTarget = invalid as mc.types.assocarray) as mc.types.node
      return mc.createSGNode(nodeType, parent, id, args, callInitialize, mTarget)
    end function

    protected function createFragment(fragmentJson as dynamic, targetNode = invalid as mc.types.node, dataBindingContext = invalid as dynamic, assignViewsToM = false as boolean)
      return mv.createFragment(fragmentJson, targetNode, dataBindingContext, assignViewsToM)
    end function

    protected function createUI(json = {} as mc.types.assocarray)
      m.createFragment(json, m.top, invalid, true)
    end function

    protected function createViewsFromStyleJson(childrenJson as mc.types.array, targetNode = invalid as mc.types.node, assignViewsToM = true as boolean, mTarget = invalid as mc.types.assocarray)
      if mTarget = invalid
        mTarget = m
      end if
      if targetNode = invalid
        targetNode = mTarget.m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      return mv.createViewsFromStyleJson(childrenJson, targetNode, assignViewsToM, mTarget, true)
    end function

    protected function updateViewsWithStyleJson(json as dynamic, mTarget = invalid as mc.types.assocarray)
      if mTarget = invalid
        mTarget = m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      mv.updateViewsWithStyleJson(json, mTarget)
    end function

    protected function createNode(nodeType as string)
      return mc.createNode(nodeType)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ task wrappers, for easy stubbing
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function observeNodeField(node as mc.types.node, fieldName as string, callback as function, sendMode = "value" as string, once = false as boolean, fieldAndValueTargetField = invalid as string)
      mc.tasks.observeNodeField(node, fieldName, callback, sendMode, once, m, fieldAndValueTargetField)
    end function

    protected function unobserveNodeField(node as mc.types.node, fieldName as string, callback = invalid as function)
      mc.tasks.unobserveNodeField(node, fieldName, callback, m)
    end function

    protected function observe(invocation as dynamic, callback as function, sendMode = "value" as string, once = false as boolean, fieldAndValueTargetField = invalid as string)
      'substituted by plugin
    end function

    protected function unobserve(invocation as dynamic, callback = invalid as function)
      'substituted by plugin
    end function

    protected function waitAFrame(callback as function, duration = 0.01 as float, sendMode = "none" as string)
      return mc.tasks.waitAFrame(callback, duration, sendMode, m)
    end function

    protected function setTimeout(callback as function, duration = 0.01 as float, sendMode = "none" as string)
      return mc.tasks.setTimeout(callback, duration, sendMode, m)
    end function

    protected function setInterval(callback as function, duration = 0.01 as float, sendMode = "none" as string)
      return mc.tasks.setInterval(callback, duration, sendMode, m)
    end function

    protected function cancelWaitTimer(timer as mc.types.node)
      mc.tasks.cancelWaitTimer(timer)
    end function

    protected function cancelTimeout(timer as mc.types.node)
      mc.tasks.cancelWaitTimer(timer)
    end function

    protected function cancelInterval(timer as mc.types.node)
      mc.tasks.cancelWaitTimer(timer)
    end function

    protected function createTask(taskType as string, fields as mc.types.assocarray, callback = invalid as float, isRunning = true as boolean, sendMode = "value" as string, fieldName = "output" as string)
      return mc.tasks.createTask(taskType, fields, callback, isRunning, sendMode, m, fieldName)
    end function

    protected function cancelTask(task as mc.types.node)
      mc.tasks.cancelTask(task)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Notification Center
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function sendNotification(nameOrNotification as dynamic, data = invalid as dynamic)
      'bs:disable-next-line
      notificationCenter = m.getInstance("notificationCenter")
      if mc.isAACompatible(nameOrNotification)
        notification = nameOrNotification
      else
        notification = {
          name: nameOrNotification
          data: data
        }
      end if

      notificationCenter@.send(notification)
    end function

    protected function isNotificationObservingSupported() as boolean
      'bs:disable-next-line
      if m.top <> invalid
        return true
      end if
      m.log.warn("class", m.__classname, "cannot support notification observing - only nodes can support this feature")
      return false
    end function

    protected function observeNotification(name as string, callback as function)
      if m.isNotificationObservingSupported()
        callbacks = m["_notificationCallbacks"]
        if callbacks = invalid
          m["_notificationCallbacks"] = {}
          callbacks = m["_notificationCallbacks"]
        end if
        callbacks[name] = callback
        'bs:disable-next-line
        notificationCenter = m.getInstance("notificationCenter")
        'bs:disable-next-line
        notificationCenter@.addObserver(m.top, name)
      end if
    end function

    protected function unobserveNotification(name as string)
      if m.isNotificationObservingSupported()
        callbacks = m["_notificationCallbacks"]
        if callbacks <> invalid
          callbacks.delete(name)
          'bs:disable-next-line
          notificationCenter = m.getInstance("notificationCenter")
          'bs:disable-next-line
          notificationCenter@.removeObserver(m.top, name)
        end if
      end if
    end function

    protected function _onNotification(notification as mc.Notification)
      try
        callbacks = m["_notificationCallbacks"]
        if callbacks <> invalid
          callback = m["_notificationCallbacks"][notification.name]
          mc.apply(callback, [notification], m)
        end if
      catch error
        m.log.error("error handling notification", error)
      end try
    end function

  end class
end namespace
