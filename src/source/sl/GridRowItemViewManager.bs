import "pkg:/source/sl/CommonListApi.bs"
import "pkg:/source/sl/ItemViewManager.bs"
import "pkg:/source/sl/CellInfo.bs"

namespace sl
  class GridRowItemViewManager extends sl.ItemViewManager
    public row = invalid
    public numRows = 0
    public numCols = 1
    public componentBufferMode = "rendered"
    public lastRowIsRendered = "none"
    public isFlowSupported = false
    private maxRowPos = 0
    private rowOffsets = []
    private firstFlowIndex = 0
    private otherRowScreenPos = 0
    private perRowHeight = 0
    private isVerticalFlowFocusAllowed = false
    public upScreenPosition = 0
    public downScreenPosition = 0
    private lastFlowDirection = 1
    'bs:disable-next-line
    private placeHolderCell = m.createSGNode("sl_BaseCell", invalid, "#_#phc")
    private renderedRows = {}

    function new(list as mc.types.node, row as mc.types.node, container as mc.types.node, componentPool as mc.types.node, minPos as integer, maxPos as integer)
      super("GridRowItemViewManager", list, container, componentPool, 0, minPos, maxPos)
      m.row = row
    end function

    protected override function updateScreenRect()
      'bs:disable-next-line
      bounds = m.owner.sceneBoundingRect()
      m.screenRect = { translation: [bounds.x, bounds.y], size: [m.owner.width, m.maxRowPos] }
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function getRowIndexForItemIndex(index as integer) as integer
      return fix(index / m.numCols)
    end function

    function getCellInfosInRow(rowIndex as integer) as mc.types.array
      infos = []
      firstIndex = rowIndex * m.numCols
      for i = firstIndex to firstIndex + m.numCols - 1
        info = m.cellInfos[i]
        if info <> invalid
          infos.push(info)
        end if
      end for
      return infos
    end function

    function getRenderersInRow(rowIndex as integer, createIfNotReady = false as boolean, forceUpdate = false as boolean) as mc.types.array
      infos = m.getCellInfosInRow(rowIndex)
      renderers = []
      ' ? " renderers in row " rowIndex " "
      for each info in infos
        ' ? info.index " CI " info.componentIndex ;
        renderer = m.getRenderer(info.componentIndex, createIfNotReady, forceUpdate)
        if renderer <> invalid
          ' ? " [X] " ;
          renderers.push(renderer)
        end if
        ' ? ""
      end for
      return renderers
    end function

    function getSubIndexAtPosition(position as integer, direction as integer)
      position += m.row.translation[1] 'adjust for position in the list
      p = abs(position)
      i = 0
      position -= m.contentGroup.translation[1] 'adjust for header offsets

      numRows = m.rowOffsets.count() - 1
      for i = numRows to 0 step -1
        ' ? " CHECK ROW " ;i ; " " ; m.rowOffsets[i] ; " >>> "; p
        itemPos = m.rowOffsets[i]
        if p > itemPos
          return sc.clamp(i + 1, 0, numRows)
        end if
      end for

      'we must be at the end! -return last item
      return sc.clamp(i, 0, numRows)
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function getRowInfos(yPosition as integer, forceRecalculate = false as boolean) as mc.types.array
      if m.content = invalid
        m.log.info("gridrow has invalid")
        return []
      end if

      if m.settings = invalid or m.settings.subType() <> "sl_GridRowSettings"
        m.log.info("gridrow has invalid/incorrect settings type")
        return []
      end if

      if forceRecalculate
        m.rowInfos = invalid
      end if
      if m.rowInfos = invalid
        m.rowInfos = []

        height = m.owner.height

        rowHeight = m.settings.rowHeight
        contentOffset = m.settings.contentOffset[1]

        if m.settings.firstRowScreenPos <> m.settings.screenPos
          m.firstFlowIndex = 1
          m.otherRowScreenPos = m.settings.otherRowScreenPos
        else
          m.firstFlowIndex = 0
          m.otherRowScreenPos = m.settings.firstRowScreenPos
        end if
        m.maxRowPos = (m.settings.numRows - 1) * (m.perRowHeight)
        m.upScreenPosition = m.otherRowScreenPos

        if m.isVerticalFlowFocusAllowed
          m.downScreenPosition = m.maxRowPos
        else
          m.downScreenPosition = m.otherRowScreenPos
        end if
        m.updateScreenRect()

        ' ? "+>+>+>>+>+>++>+>+>+>>++>>+>+"
        for i = 0 to m.rowOffsets.count() - 1
          m.rowInfos.push(m.getRowInfo(i, [0, rowHeight], m.rowOffsets[i] - contentOffset, yPosition, height, m.maxRowPos))
          ' ? "LAYING OUT ITEM " ; i ; "RO " ; m.rowOffsets[i]
        end for
        ' ? "+>+>+>>+>+>++>+>+>+>>++>>+>+"
      end if
      return m.rowInfos
    end function

    public override function reset()
      m.log.info("releasing", m.renderersByContentId.count(), "row children")
      for each id in m.renderersByContentId
        m.componentPool@.releaseComponent(m.renderersByContentId[id])
      end for
      m.renderersByContentId = {}
      super.reset()
    end function

    override function createRenderers(content as mc.types.node, forceSync = false as boolean) as boolean
      'renderers are created as needed
      m.previousRendereredByContentId = m.renderersByContentId
      m.renderersByContentId = {}
      return true
    end function

    override function updateLayout(fullUpdate = false as boolean) as void
      ' ? " GRID UPDATE LAYOUT"
      m.log.info("GRID updateLayout")
      m.rects = []
      m.visibleItems = []
      m.rowOffsets = []
      m.rowInfos = invalid
      m.cellInfos = []
      m.isVerticalFlowFocusAllowed = m.getFocusSettings().vertAnimStyle = "floating"

      if m.content = invalid
        return
      end if

      i = 0
      xSpace = m.settings.space
      m.perRowHeight = m.settings.rowHeight + m.settings.rowSpace

      x = 0
      y = 0
      numItems = m.content.getChildCount()
      children = m.content.getChildren(-1, 0)
      m.numCols = m.settings.numColumns
      m.numCols = m.numCols < 1 ? 1 : m.numCols
      rowIndex = 0
      ' ? "children" ; formatJson(sc.collections.map(children, function(c as object)
      ' return c.title
      ' end function))

      ' ? "LAYING OUT+++++++++++++++++++++++++++++++++" ; m.numCols ; " perRowHeight "; m.perRowHeight

      oldRenderersByContentId = m.renderersByContentId
      m.renderersByContentId = {}

      renderedIds = {}
      while i < numItems
        m.rowOffsets.push(y)

        for col = 0 to m.numCols - 1
          item = children[i]
          if item = invalid
            exit for
          end if
          renderedIds[item.id] = true
          ' ? "ITEM " ; item.title ; " @ index " ; i ; " RI "; rowIndex
          settings = sl.listMixin.getCellSettings(m.owner.content, m.content, item)
          m.rects.push({
            translation: [x, y]
            size: settings.size
            index: i
            gridRow: rowIndex
            visible: true
          })

          positions = [
            new sl.CellPosition(0, x) 'up
            new sl.CellPosition(0, x) 'down
          ]

          cellInfo = new sl.CellInfo(settings.size, m.settings.focusSettings, positions, true, i, i)
          cellInfo.index = i
          cellInfo.id = item.id
          m.cellInfos.push(cellInfo)
          'TODO - for now, no vis options for rows children..
          m.visibleItems.push(item)

          if oldRenderersByContentId.doesExist(item.id)
            m.renderersByContentId[item.id] = oldRenderersByContentId[item.id]
            oldRenderersByContentId.delete(item.id)
          end if

          x += settings.size[m.axes] + xSpace
          i++
        end for

        x = 0
        y += m.perRowHeight
        rowIndex++
      end while

      for each id in oldRenderersByContentId
        renderer = oldRenderersByContentId[id]
        m.log.info("cleanupCell OLD renderer", id, sc.dv(renderer))
        m.cleanupCell(renderer)
      end for

      m.numRows = sc.clamp(m.rowOffsets.count(), 0, m.rowOffsets.count())
      m.numberOfItems = m.visibleItems.count()
      m.numberOfVisibleItems = m.numberOfItems
      ' ? " UPDATE LAYOUT MADE " m.numRows " rows from " m.numberOfItems " items"
    end function

    private function getRowInfo(rowIndex as integer, size as mc.types.array, yOffset as integer, y as integer, height as integer, maxPos as integer) as sl.CellInfo

      yOffset += y

      if rowIndex = 0
        screenPos = m.settings.firstRowScreenPos
        ' ? " ROW 0 " ; screenPos
        ' if screenPos > yOffset
        '   screenPos = yOffset
        ' end if
        isFlowFocusAllowed = false

        positions = [
          new sl.CellPosition(yOffset, screenPos) 'up
          new sl.CellPosition(yOffset, screenPos) 'down
        ]
      else if rowIndex = 1 and m.settings.otherRowScreenPos <> m.settings.firstRowScreenPos
        screenPos = m.settings.otherRowScreenPos
        ' ? " ROW 1 " ; screenPos
        ' if screenPos > yOffset
        '   screenPos = yOffset
        ' end if
        isFlowFocusAllowed = false
        positions = [
          new sl.CellPosition(yOffset, screenPos) 'up
          new sl.CellPosition(yOffset, screenPos) 'down
        ]
      else
        screenPos = m.settings.otherRowScreenPos
        isFlowFocusAllowed = m.isVerticalFlowFocusAllowed
        if m.isVerticalFlowFocusAllowed
          downScreenPos = (m.settings.numRows - 1) * (m.perRowHeight)
        else
          downScreenPos = 0
        end if
        ' ? "ROW SCREEN POS" ; rowIndex ; " " ; yOffset ; " Y " ; yOffset ; " F "; m.firstFlowIndex ; " SP "; screenPos
        positions = [
          new sl.CellPosition(yOffset, screenPos) 'up
          ' new sl.CellPosition(yOffset, screenPos) 'down
          new sl.CellPosition(yOffset - downScreenPos, screenPos) 'down
        ]
      end if
      'note - col width is irrelevant
      return new sl.CellInfo(size, m.settings, positions, isFlowFocusAllowed, rowIndex, rowIndex)
    end function

    private function getHeightOfGridRow()

      return m.numRows * (m.settings.rowHeight + m.settings.space) + m.settings.headerSettings.height
    end function

    private function getLastRowOffset() as integer
      if m.rowOffsets.count() > 0
        return m.rowOffsets[m.rowOffsets.count() - 1]
      else
        return 0
      end if
    end function

    private function getRowOffset(rowIndex as integer) as integer
      if m.rowOffsets.count() > rowIndex
        return m.rowOffsets[rowIndex]
      else
        return 0
      end if
    end function

    override function onContentItemsChange() as sl.ListChangeResult
      m.log.info("updating row renderers due to contents change")
      ' ? "((((((((())))))))) GRID IS UPDATING CONTENT ITEMS"
      previousInfo = sl.CellInfoUtils.cellInfoFromAA(m.itemScroller.cellInfo)
      previousNumRows = m.numRows
      m.forceUpdateLayout(true)

      ' ? " GRID UPDATED HAD " previousNumRows " ROWS. Now has " m.numRows

      result = {
        isLayoutRequired: previousNumRows <> m.numRows
        isFocusChangeRequired: false
      }

      if m.itemScroller.index >= m.content.getChildCount()
        m.itemScroller.index = sc.clamp(m.itemScroller.index, 0, m.content.getChildCount() - 1)
      end if

      m.previousRendereredByContentId = m.renderersByContentId

      nextIndex = m.getIndexAfterItemUpdate(previousInfo)
      ' ? " ACCORDING TO GRID NEXT INDEX WILL BE " nextIndex
      result.isFocusChangeRequired = nextIndex <> previousInfo.index

      m.updateRenderersWithChanges(nextIndex)
      return result
    end function

    private function updateRenderersWithChanges(nextIndex as integer)
      nextRowIndex = m.getRowIndexForItemIndex(nextIndex)
      startRowIndex = sc.clamp(nextRowIndex - m.itemScroller.viewPortEventNotifier.numberToLookBehind, 0, m.numRows)
      endRowIndex = sc.clamp(nextRowIndex + m.itemScroller.viewPortEventNotifier.numberToLookAhead, 0, m.numRows)
      ' ? " updateRenderers " m.content.title " nextRowIndex " startRowIndex "NOTIFYING FROM " startRowIndex " to " endRowIndex
      m.notifyEnterEvent(startRowIndex, endRowIndex, true)
    end function

    override function isVerticalFlowFocusPossible(info as sl.CellInfo, direction as integer, activeScreenPos as integer, scrollPos as integer)
      if not m.isVerticalFlowFocusAllowed
        return false
      end if
      ' ? " grid isVerticalFlowFocusPossible "
      ' ? info.componentIndex ; " NR "; m.settings.numRows ; " FRI " ; m.firstFlowIndex ; " ASP "; activeScreenPos ; " SP "; scrollPos

      if info.componentIndex <= m.firstFlowIndex and direction = 1
        return false
      end if

      activeScreenPos = m.lastFlowDirection = -1 ? m.upScreenPosition : m.downScreenPosition
      m.lastFlowDirection = direction

      ' ? " CHANGING ACTIVE SCREEN POS TO FIRST ROW POS"
      ' end if
      rowStartPos = scrollPos + activeScreenPos

      firstRowOnScreen = m.getSubIndexAtPosition(rowStartPos, direction)
      ' ? "L>>>>>>"
      ' ? "L>>>>>> ; first on screen" ; firstRowOnScreen
      ' ? "L>>>>>> ; last row ALLOWED screen "; firstRowOnScreen + (m.settings.numRows - 1)
      ' ? "L>>>>>> row "; info.componentIndex
      ' ? "L>>>>>> SP "; scrollPos ; " ASP "; activeScreenPos
      if direction = -1
        return info.componentIndex >= firstRowOnScreen
      else
        return info.componentIndex <= firstRowOnScreen + (m.settings.numRows - 1)
      end if
    end function


    override function notifyExitEvent(notifyStart as integer, notifyEnd as integer) as void
      if notifyStart = -1
        ' ? " clearing all " m.numRows
        notifyStart = 0
        notifyEnd = m.numRows
      end if

      for i = notifyStart to notifyEnd
        m.renderedRows[i.toStr()] = false
        rowRenderers = m.getRenderersInRow(i)
        for each comp in rowRenderers
          if comp.isInViewPort
            comp.isInViewPort = false
            if comp.id <> "#_#phc"
              comp@._apply("onDidExit", [{ direction: 1 }], false)
              ' ? " releasing " comp.index
              m.releaseCell(comp)
              ' m.releaseCellAtIndex(comp.index)
            end if
          else
          end if
        end for
      end for

      m.itemScroller.viewPortEventNotifier.isAllRendered = false
    end function

    override function notifyEnterEvent(notifyStart as integer, notifyEnd as integer, forceCellUpdate = false as boolean) as void
      m.log.verbose("notifyEnterEvent", notifyStart, notifyEnd, forceCellUpdate)

      'm.log.increaseIndent()Indent()

      for i = notifyStart to notifyEnd
        rowRenderers = m.getRenderersInRow(i, true, forceCellUpdate)
        m.renderedRows[i.toStr()] = true
        for each comp in rowRenderers
          if comp <> invalid

            if not comp.isInViewPort or forceCellUpdate
              m.log.verbose("notifying enter on row", i, "cell", comp.index, asString(comp.content.title))
              comp.isInViewPort = true
              comp@._apply("onDidEnter", [{ direction: 1 }], false)
            else
              m.log.verbose("SKIPPING notify enter on row", i, "cell", comp.index, asString(comp.content.title))
            end if
          end if
        end for
      end for

      'm.log.decreaseIndent()
    end function

  end class
end namespace
