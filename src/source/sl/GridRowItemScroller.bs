import "pkg:/source/sl/ItemScroller.bs"
import "pkg:/source/sl/GridRowItemViewManager.bs"

namespace sl
  class GridRowItemScroller extends sl.ItemScroller

    public currentRowIndex = 0

    function new(viewManager as sl.GridRowItemViewManager, focusManager as sc.types.node)
      super("GridRowItemScroller", viewManager, focusManager)
      m.isOnlyFloatingFocus = true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function getFocusSettings()
      return sl.listMixin.getFocusSettings(m.viewManager.owner.content, m.viewManager.content)
    end function

    'For a grid row, we can only move to the end of the current row
    override function moveToEnd(direction as integer, animated = true as boolean, animSpeedIndex = 0 as integer) as boolean

      m.isScrollCancelled = false

      if (m.index >= m.viewManager.numberOfItems - 1 and direction = 1) or m.index = 0 and direction = -1
        m.log.info("already at end - ignoring")
        return false
      end if

      if direction = -1
        index = fix(m.index / m.viewManager.numCols) * m.viewManager.numCols
        ' ? " MTCI 999 " m.__classname
        m.moveToIndex(index, animated, animSpeedIndex, -1, true)
      else
        index = ((fix(m.index / m.viewManager.numCols) * m.viewManager.numCols) + m.viewManager.numCols) - 1
        ' ? " MTCI 888 " m.__classname
        m.moveToIndex(index, animated, animSpeedIndex, 1, true)
      end if
      return true
    end function

    protected override function setCellInfo(info as sl.CellInfo)
      super.setCellInfo(info)
      if info <> invalid
        m.currentRowIndex = fix(info.index / m.viewManager.numCols)
      else
        m.currentRowIndex = -1
      end if
    end function

    protected override function notifyViewportEvents(direction as integer)
      'handled entirely by the list
      ' isInViewPort = m.viewManager.row <> invalid and m.viewManager.row.isInViewPort
      ' m.viewPortEventNotifier.notifyViewportEvents(m.direction, isInViewPort, true, m.viewManager.getRowIndexForItemIndex(m.focusedIndex))
    end function

    protected override function getCellInfo(cellInfo as sl.CellInfo, isFromListScroll = false as boolean) as sl.CellInfo

      'TODO - add the ability for a given row to _remember_ or choose the
      'default index it should give us
      if cellInfo = invalid
        return invalid
      end if

      if isFromListScroll
        return m.chooseAppropriateCellToScrollTo(cellInfo)
      else
        return m.viewManager.cellInfos[cellInfo.index]
      end if
    end function

    private function chooseAppropriateCellToScrollTo(cellInfo as sl.CellInfo) as sl.CellInfo
      ' ? " GRID CHOOSING INDEX CURRENT INDEX IS " ; m.index ; " CI  " ;cellInfo.componentIndex ; " is List scroll? "; isFromListScroll
      focusX = m.focusManager.focusScreenPosition[0] + m.viewManager.settings.contentOffset[0]
      cellInfosInRow = m.viewManager.getCellInfosInRow(cellInfo.componentIndex)
      nextInfo = invalid
      for i = cellInfosInRow.count() - 1 to 0 step -1
        info = cellInfosInRow[i]
        ' ? " RI " ; cellInfo.componentIndex ; " CI " ; info.index ; " P " ; info.getScreenPosition(1) ; " FP " ; focusX
        if info <> invalid and info.getScreenPosition(1) <= focusX
          nextInfo = info
          exit for
        end if
      end for

      if nextInfo = invalid
        ' ? "no item found for indicator position - using first item in row"
        nextInfo = cellInfosInRow[0]
      end if

      return nextInfo
    end function

    public override function chooseCellInfoForScrollingIntoRow(cellInfo as sl.CellInfo)
      ' ? " GRID CHOOSE SCROLLING INTO ROW" ; cellInfo.index; " CI "; cellInfo.componentIndex
      cellInfo = m.getCellInfo(cellInfo, true)
      if cellInfo <> invalid
        m.setCellInfo(cellInfo)
        ' ? " GRID CHOICE IS MADE index is now "; m.index
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus Indicator
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function getFocusIndicatorConfig(cellInfo as sl.CellInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as sl.FocusIndicatorConfig
      if cellInfo = invalid
        ? "ERROR grid got invalid cellInfo"
        return invalid
      end if
      info = m.getCellInfo(cellInfo, isFromListScroll)
      if info = invalid
        ? "ERROR grid could not find cellInfo matching"
        return invalid
      end if

      config = super.getFocusIndicatorConfig(cellInfo, direction, isFloatingFocus, isFromListScroll)
      config.subRowIndex = m.viewManager.getRowIndexForItemIndex(info.contentIndex)
      return config
    end function

    protected override function getFocusIndicatorTranslation(info as sl.CellInfo, parentCellInfo as sl.CellInfo, direction as integer, isFloatingFocus as boolean) as object
      ' ? " START GRID GET FOCUS INDICATOR TRANS INFO : " ; info
      if info = invalid or m.viewManager.settings = invalid
        return [0, 0]
      end if

      yScreenPos = 0

      if not isFloatingFocus and info.contentIndex > 1 and m.viewManager.isVerticalFlowFocusAllowed
        if direction = -1
          yScreenPos = m.viewManager.upScreenPosition
        else
          yScreenPos = m.viewManager.downScreenPosition
        end if
      else if m.viewManager.rowInfos <> invalid
        rect = m.viewManager.rects[info.contentIndex]
        ' ? " SUB ROW INDEX " ; rect.gridRow
        rowInfo = m.viewManager.rowInfos[rect.gridRow]
        if rowInfo <> invalid
          yScreenPos = rowInfo.getScreenPosition(direction)
        else
          ? " ERROR GETTING ROW INFO"
        end if
      end if
      ' yScreenPos = 0
      contentOffset = m.viewManager.settings.contentOffset

      ' ? " info CI "; info.contentIndex ; " " ; yScreenPos ; " axes "; m.axes ; " isFloatingFocus" ; isFloatingFocus

      ' ? " contentOffset "; formatJson(contentOffset)
      ' translation = [contentOffset[0], contentOffset[1]]
      translation = [contentOffset[0], contentOffset[1] + yScreenPos]

      headerOffset = m.viewManager.settings.headerSettings.height
      translation[1] += headerOffset

      if isFloatingFocus
        ' ? " is float"
        'replace with actual screen location

        'FIXME - probs wants to be true here
        cell = m.viewManager.getRenderer(info.contentIndex)
        if cell <> invalid
          'bs:disable-next-line
          bounds = cell.sceneBoundingRect()
          translation = [bounds.x, bounds.y]
        end if
      else

        translation[0] += info.getScreenPosition(direction)
        ' ? " INFO TRANSLATION "; translation[0]
      end if

      ' ? " END GRID GET FOCUS INDICATOR TRANS"
      return translation
    end function


  end class
end namespace
