import "pkg:/source/sl/ListMixin.bs"
import "pkg:/source/sl/RowItemScroller.bs"
import "pkg:/source/sl/RowItemViewManager.bs"
import "pkg:/source/sl/BaseRow.bs"
import "pkg:/source/sl/CellInfo.bs"

namespace sl
  @node("sl_HorizontalRow", "sl_BaseRow")
  class HorizontalRow extends sl.BaseRow

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager
    private itemScroller

    function new()
      super()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createViews()
      super.createViews()
      m.createManagers()
    end function

    private function createManagers()
      m.log.info("createManagers")
      m.viewManager = new sl.RowItemViewManager(m.owner, m.top, m.contentGroup, m.global.componentPool, 0, m.width)
      m.itemScroller = new sl.RowItemScroller(m.viewManager, m.owner.focusIndicatorManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Overridden Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onContentChange(content as sc.types.node)
      m.log.info("onContentChange on ", sc.dv(m.top))
      m.configureHeader()

      changeResult = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }
      if content = invalid
        m.log.info("row content is set to invalid. resetting")
        m.viewManager.reset()
      else
        m.log.info("doing a content change")
        m.viewManager.reset()
        m.viewManager.setContent(content)
        m.itemScroller.reset(true)
      end if
      ' end if
      if m.viewManager.numberOfItems = 0 and content <> invalid and content.isHidden <> true
        changeResult.isLayoutRequired = true
      end if

      return changeResult
    end function

    override function getRect(index as integer, useScreenCoords = false as boolean) as sc.types.assocarray
      rect = m.viewManager.getRect(index, useScreenCoords = true)
      rect.subRowIndex = 0
      return rect
    end function

    override function getRenderer(index as integer)
      if m.viewManager.cellInfos[index] <> invalid
        return m.viewManager.cellInfos[index].component
      end if
      return invalid
    end function

    protected override function onRecycle(newContent as sc.types.node)
      super.onRecycle(newContent)

      m.cleanHeader()
      m.viewManager.owner = m.owner
      m.viewManager.setContent(invalid)
      m.itemScroller.focusManager = m.owner.focusIndicatorManager
      m.itemScroller.reset()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Row API Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function moveToIndex(index as integer, animated as boolean, animSpeedIndex = 0 as integer)
      if m._content <> invalid and index <> -1
        ' ? " DO A MOVE TO INDEX "; index, animated
        ' ? " MTCI 777 " m.__classname " index " index
        m.itemScroller.moveToIndex(index, animated, animSpeedIndex)
      end if
    end function

    override function cancelMove(forceFocusUpdate as boolean)
      ' ? "HORIZROW cancelling move CANCEL CANCEL========================"
      if m._content <> invalid
        m.itemScroller.cancelScrolling(forceFocusUpdate)
      end if
    end function

    override function moveFromPress(direction as integer, isLongPress as boolean, isPage = false as boolean) as boolean
      if isLongPress
        return m.itemScroller.moveToEnd(direction)
      else
        return m.itemScroller.moveFromPress(direction, true, isPage)
      end if
    end function

    override function canMoveInDirection(direction as integer, longPress as boolean) as boolean
      settings = m.viewManager.getFocusSettings()

      m.log.verbose("canMoveInDirection: ", direction, " longPress: ", longPress, " allowLongPress: ", settings.allowLongPress, " index: ", m.itemScroller.index)

      if settings = invalid or (longPress = true and settings.allowLongPress = false)
        m.log.verbose("cannot move in direction because settings are invalid or long press is not allowed")
        return false
      end if

      return (m._content <> invalid and m._content.getChildCount() > 0) and ((direction = -1 and m.itemScroller.index > 0) or (direction = 1 and m.itemScroller.index < m._content.getChildCount() - 1))
    end function

    function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Delegate Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onDidEnter(event as sl.ListEvent)
      ' ? " onDidEnter "
      m.itemScroller.notifyViewportEvents(event.direction, event.forceCellUpdate = true)
    end function

    private function onDidExit(event as sl.ListEvent)
      ' ? " onDidExit "
      m.viewManager.notifyExitEvent(m.viewManager.getRenderedIndexes())
    end function


    ' private function onScrollingChange(event as sl.ListEvent)
    '   ? " onScrollingChange "
    ' end function

    private function onDidGainFocus(event as sl.ListEvent)
      ' ? " GRID onDidGainFocus " m.index subRowIndex direction
    end function

    private function onDidLoseFocus(event as sl.ListEvent)
      ' ? " GRID onDidLoseFocus " m.index subRowIndex direction
    end function

    private function onGainingFocus(event as sl.ListEvent)
      ' ? " GRID onGainingFocus " m.index subRowIndex direction fraction
    end function

    private function onLosingFocus(event as sl.ListEvent)
      ' ? " GRID onLosingFocus " m.index subRowIndex direction fraction
    end function

    private function callMethodOnFocusedCell(functionName as string, args as sc.types.array)
      cell = m.itemScroller.cellInfo.component
      if cell <> invalid

        ' TODO potentially filter events
        cell@._apply(functionName, args, false)
      end if
    end function

  end class
end namespace
