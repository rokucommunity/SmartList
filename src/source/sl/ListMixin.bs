namespace sl.listMixin
  function createListContent(focusSettings = invalid as sc.types.node, rowSettings = invalid as sc.types.node, listSettings = invalid as sc.types.node)
    content = createObject("roSGNode", "sl_ListContent")

    if rowSettings = invalid
      rowSettings = sl.listMixin.createRowSettings()
    end if

    if focusSettings = invalid
      focusSettings = sl.listMixin.createFocusSettings()
    end if

    if listSettings = invalid
      listSettings = sl.listMixin.createListSettings()
    end if

    content.update({
      rowSettings: rowSettings
      focusSettings: focusSettings
      listSettings: listSettings
    })

    return content
  end function

  function createRowSettings(cellSettings = invalid as sc.types.node, focusSettings = invalid as sc.types.node, space = 30 as integer, headerSettings = invalid as sc.types.node, screenPos = -1 as integer, compName = "sl_HorizontalRow" as string, height = -1 as integer)
    settings = createObject("roSGNode", "sl_RowSettings")
    settings.isHiddenWhenEmpty = true
    sl.listMixin.configureRowSettings(settings, cellSettings, focusSettings, space, headerSettings, screenPos, compName, height)
    return settings
  end function

  function createGridRowSettings(cellSettings = invalid as sc.types.node, focusSettings = invalid as sc.types.node, space = 30 as integer, headerSettings = invalid as sc.types.node, screenPos = -1 as integer, numColumns = 3 as integer, rowHeight = -1 as integer, numRows = 2 as integer, otherScreenPos = -1 as integer, height = -1 as integer, compName = "sl_GridRow" as string)
    settings = createObject("roSGNode", "sl_GridRowSettings")
    settings.isHiddenWhenEmpty = true
    if numRows = invalid or numRows < 1
      m.log.error("received illegal numRows making grid settings", numRows, "setting to 1")
      numRows = 1
    end if

    if numColumns = invalid or numColumns < 1
      m.log.error("received illegal numColumns making grid settings", numColumns, "setting to 1")
      numColumns = 1
    end if

    if otherScreenPos = -1
      otherScreenPos = screenPos
    end if

    sl.listMixin.configureRowSettings(settings, cellSettings, focusSettings, space, headerSettings, 0, compName, height)
    settings.numColumns = numColumns
    settings.rowHeight = rowHeight
    settings.numRows = numRows
    settings.space = settings.cellSettings.space
    settings.rowSpace = space
    settings.screenPos = -1
    settings.firstRowScreenPos = screenPos
    settings.otherRowScreenPos = otherScreenPos
    settings.focusSettings.horizAnimStyle = "floating" 'nothing else makes sense here
    return settings
  end function

  function configureRowSettings(settings as sc.types.node, cellSettings = invalid as sc.types.node, focusSettings = invalid as sc.types.node, space = 30 as integer, headerSettings = invalid as sc.types.node, screenPos = -1 as integer, compName = "sl_HorizontalRow" as string, height = -1 as integer)

    if cellSettings = invalid
      m.log.warn("there were no cell settings - this is probably a mistake - using defaults!")
      cellSettings = sl.listMixin.createCellSettings()
    end if

    if headerSettings = invalid
      headerSettings = sl.listMixin.createHeaderSettings()
    end if

    if focusSettings = invalid
      focusSettings = sl.listMixin.createFocusSettings()
    end if

    if compName = "sl_HorizontalRow" and focusSettings.horizAnimStyle <> "fixed"
      m.log.warn("Horizontal row cannot use floating focus for horizontal animation - forcing fixed focus!")
      focusSettings.horizAnimStyle = "fixed"
    end if

    settings.update({
      componentName: compName
      screenPos: screenPos
      height: height
      space: space
      cellSettings: cellSettings
      contentOffset: [0, 0]
      headerSettings: headerSettings
      focusSettings: focusSettings
    })
  end function

  function createCustomRowSettings(compName as string, height as integer, screenPos = -1 as integer)
    settings = createObject("roSGNode", "sl_RowSettings")

    settings.update({
      componentName: compName
      screenPos: screenPos
      height: height
      space: 0
      cellSettings: invalid
      contentOffset: [0, 0]
      headerSettings: sl.listMixin.createEmptyHeaderSettings()
      focusSettings: sl.listMixin.createFocusSettings("fixed", invalid, "none")
    })

    return settings
  end function

  function createListSettings()
    settings = createObject("roSGNode", "sl_ListSettings")

    settings.update({
      animSpeeds: [0.1, 0.05, 0.02]
    })

    return settings
  end function

  function createHeaderSettings(labelOffset = [30, 0] as string, height = 50 as integer, fontKey = "MediumBold,30" as string, color = "#ffffff" as string)
    settings = createObject("roSGNode", "sl_HeaderSettings")

    settings.update({
      labelOffset: labelOffset
      height: height
      fontKey: fontKey
      textColor: color
    })

    return settings
  end function

  function createEmptyHeaderSettings()
    settings = createObject("roSGNode", "sl_HeaderSettings")

    settings.update({
      offset: [0, 0]
      height: 0
      fontKey: ""
      position: "none"
    })
    return settings
  end function

  function createCellSettings(compName = "sl_SimpleCell" as string, size = [300, 500] as sc.types.array, space = 30 as integer, screenPos = -1 as integer)
    settings = createObject("roSGNode", "sl_CellSettings")

    settings.update({
      compName: compName
      size: size
      space: space
      screenPos: screenPos
    })

    return settings
  end function

  function createFocusSettings(horizAnimStyle = "fixed" as string, offsets = invalid as sc.types.array, feedbackStyle = "onTop" as string, vertAnimStyle = "fixed" as string)
    settings = createObject("roSGNode", "sl_FocusSettings")
    if offsets = invalid
      offsets = [0, 0, 0, 0]
    end if
    settings.update({
      animSpeeds: [0.1, 0.05, 0.02]
      horizAnimStyle: horizAnimStyle
      feedbackOffsets: offsets
      feedbackStyle: feedbackStyle
      vertAnimStyle: vertAnimStyle
    })
    return settings

  end function

  function setTileSettings(compName = "sl_Cell" as string, cellSize = [300, 500] as sc.types.array)
  end function

  function getRowSettings(listContent as sc.types.node, rowContent = invalid as sc.types.node)
    if rowContent <> invalid and rowContent.settings <> invalid
      ' ? " USING ROW SETTINGS " ; rowContent.settings.screenPos
      return rowContent.settings
    else if listContent <> invalid and listContent.rowSettings <> invalid
      ' ? " USING LIST SETTINGS"
      return listContent.rowSettings
    else
      'THIS SHOULD NOT BE POSSIBLE
      m.log.error("no settings for list - this should not have been called!")
      return createObject("roSGNode", "sl_RowSettings")
    end if
  end function

  function getCellSettings(listContent as sc.types.node, rowContent = invalid as sc.types.node, itemContent = invalid as sc.types.node)
    if itemContent <> invalid and itemContent.settings <> invalid
      return itemContent.settings
    else if rowContent <> invalid and rowContent.settings <> invalid and rowContent.settings.cellSettings <> invalid
      return rowContent.settings.cellSettings
    else if listContent <> invalid and listContent.rowSettings <> invalid
      return listContent.rowSettings.cellSettings
    else
      m.log.error("no listContent for list - this should not have been called!")
      return invalid
    end if
  end function

  function getFocusSettings(listContent as sc.types.node, rowContent = invalid as sc.types.node)
    if rowContent <> invalid and rowContent.settings <> invalid and rowContent.settings.focusSettings <> invalid
      return rowContent.settings.focusSettings
    else if listContent <> invalid and listContent.rowSettings <> invalid and listContent.rowSettings.focusSettings <> invalid
      return listContent.rowSettings.focusSettings
    else if listContent <> invalid and listContent.focusSettings <> invalid
      m.log.error("no listContent for list - this should not have been called!")
      return listContent.focusSettings
    end if
    return invalid
  end function

  ' roku_list.setRowSettings(row, rowRenderer, offset, cellREnderr, cellSize)
  ' roku_list.setTileSettings(content, cellRenderer, cellSize)
end namespace
