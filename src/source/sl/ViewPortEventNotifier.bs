import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/sl/ItemViewManager.bs"
import "pkg:/source/sl/ItemScroller.bs"
import "pkg:/source/lib/DebugTimer.bs"
namespace sl
  class ViewPortEventNotifier extends sc.BaseClass
    'rendered component maps
    private viewManager as sl.ItemViewManager
    private container as sc.types.node
    private axes = 0
    public delegates = []

    public renderStrategy = "all"
    public numberToLookAhead = 4
    public numberToLookBehind = 4

    private isAllRendered = false 'todo - define exactly what this means, later

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    function new(viewManager as sl.ItemViewManager)
      super("ViewPortEventNotifier")
      m.viewManager = viewManager
      m.container = viewManager.container
      m.axes = viewManager.axes
      m.onViewManagerUpdate()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function onViewManagerUpdate()
      m.delegates = []

      if m.viewManager.delegate <> invalid
        m.delegates.push(m.viewManager.delegate)
      end if

      if m.viewManager.row = invalid or m.viewManager.__classname = "sl.GridRowItemViewManager"
        'grids use the list settings
        settings = m.viewManager.listSettings
      else
        settings = m.viewManager.getItemSettings()
      end if

      if settings <> invalid
        m.renderStrategy = settings.renderStrategy
        if m.renderStrategy = "all"
          m.numberToLookAhead = 99999
          m.numberToLookBehind = 99999
        else
          m.numberToLookBehind = settings.numberItemsToRenderBefore
          m.numberToLookAhead = settings.numberItemsToRenderAfter
        end if
      else
        m.numberToLookAhead = 4
        m.numberToLookBehind = 4
        m.renderStrategy = "all"
      end if
    end function

    protected renderedIndexes = []

    private pendingDirection
    private pendingIsRowInViewport
    private pendingForceAll

    function notifyViewportEvents(direction as integer, isRowInViewport as boolean, forceAll = false as boolean) as void
      m.pendingDirection = direction
      m.pendingIsRowInViewport = isRowInViewport
      m.pendingForceAll = forceAll

      if m.viewManager.itemScroller.focusManager._isContentUpdating
        m._notifyViewportEvents()
      else
        ' ? "MTCI TIMEOUT NOTIFIER"
        m.setTimeout(m._notifyViewportEvents)
      end if
    end function

    function _notifyViewportEvents() as void

      isRowInViewport = m.pendingIsRowInViewport
      forceAll = m.pendingForceAll

      m.log.verbose("notifyViewportEvents, forced?", forceAll)

      'for non-lists
      if m.viewManager.visibleItems = invalid
        m.log.verbose("notifyViewportEvents - no visible items")
        return
      end if

      if forceAll
        m.isAllRendered = false
      end if

      if m.isAllRendered
        m.log.verbose("notifyViewportEvents - all rendered")
        return
      end if

      'm.log.increaseIndent()Indent()

      oldRendereredCellInfosByIndex = {}

      oldRendereredCellInfosByIndex.append(m.viewManager.rendereredCellInfosByIndex)

      if not isRowInViewport
        indexes = m.viewManager.getRenderedIndexes()

        m.viewManager.notifyExitEvent(indexes)
      else
        m.log.verbose(" NVE D ISI ", m.viewManager.itemScroller.index)

        enterIndexes = []
        index = m.viewManager.itemScroller.index
        startIndex = index - m.numberToLookBehind
        endIndex = index + m.numberToLookAhead

        startIndex = sc.clamp(startIndex, 0, m.viewManager.numberOfItems)
        endIndex = sc.clamp(endIndex, 0, m.viewManager.numberOfItems)
        if forceAll
          fromIndex = 0
          toIndex = m.viewManager.numberOfItems
        else
          fromIndex = startIndex
          toIndex = endIndex
        end if
        ' timer = new sc.utils.DebugTimer("NotifyViewPortEvents")
        ' ? " NVE F "; startIndex ; " TO " ; endIndex " from " fromIndex " to " toIndex
        for index = fromIndex to toIndex - 1
          isInViewPort = isRowInViewport and (startIndex <= index and index <= endIndex)
          comp = m.viewManager.getRenderer(index, isInViewPort, forceAll)
          if comp <> invalid
            m.log.verbose("valid comp", index, sc_dv(comp), comp.index)
            if comp.content <> invalid
              m.log.verbose("valid content", comp.content.title)
            end if
          else
            m.log.error("invalid comp", index)
          end if
          if isInViewPort
            if comp <> invalid
              enterIndexes.push(index)
            end if
            oldRendereredCellInfosByIndex.delete(index.toStr())
          end if
        end for

        exitEventIndexes = []
        for each key in oldRendereredCellInfosByIndex
          cellInfo = oldRendereredCellInfosByIndex[key]
          exitEventIndexes.push(cellInfo.index)
        end for
        ' timer.log("process")
        ' ? " NVE G"
        ' ? " >>>>>>>>>>>>>>>>>>>>> "
        ' ? "NEW"; formatJson(m.viewManager.rendereredCellInfosByIndex.keys())
        ' ? "OLD"; formatJson(oldRendereredCellInfosByIndex.keys())
        ' ? " NOTIFYING EXIT" formatJson(exitEventIndexes)
        ' ? " >>>>>>>>>>>>>>>>>>>>>"
        m.viewManager.notifyExitEvent(exitEventIndexes)
        m.viewManager.notifyEnterEvent(enterIndexes)
        ' timer.log("RUN CALLS")
        if m.renderStrategy = "all"
          m.isAllRendered = true
        end if
      end if

      'm.log.decreaseIndent()
    end function

    private inViewportComponentsById = {}
    private inViewportSubIndexes = {}

    function notifyListHiddenChange(isHidden as boolean) as void
      m.notifyListViewportEvents(m.viewManager.itemScroller.cellInfo, m.viewManager.itemScroller.nextCellInfo, m.viewManager.itemScroller.direction)
    end function

    function notifyListViewportEvents(cellInfo as sl.CellInfo, nextCellInfo as sl.CellInfo, direction as integer, forceAll = false as boolean) as void
      ' ? " NLVE nextCellInfo" nextCellInfo " VC " m.viewManager.visibleComponents
      if nextCellInfo = invalid or m.viewManager.visibleComponents = invalid
        return
      end if

      ' ? "LVE " m.isAllRendered " forceAll " forceAll
      if forceAll
        ' ? " clearing all is rendered coz forcAll"
        m.isAllRendered = false
      end if

      if m.isAllRendered
        ' ? " everything is already rendered; nothing else to do"
        return
      end if

      newInViewportComponentsById = {}
      newInViewportSubIndexes = {}

      if not m.viewManager.owner.isHidden
        if direction = -1
          index = cellInfo.index
        else
          index = nextCellInfo.index
        end if

        numberOfItems = m.viewManager.numberOfItems
        startIndex = sc.clamp(index - m.numberToLookBehind, 0, numberOfItems)
        endIndex = sc.clamp(index + m.numberToLookAhead, 0, numberOfItems)

        if forceAll
          fromIndex = 0
          toIndex = numberOfItems
        else
          fromIndex = startIndex
          toIndex = endIndex
        end if

        ' ? " NVL F "; startIndex ; " TO " ; endIndex " from " fromIndex " to " toIndex

        lastContentIndex = -1
        didEnter = false
        for i = fromIndex to toIndex - 1
          compInfo = m.viewManager.cellInfos[i]
          comp = compInfo.component
          ' ? " VPN " ; i " LCI " lastContentIndex " " compInfo.contentIndex
          if compInfo.contentIndex <> lastContentIndex
            lastContentIndex = compInfo.contentIndex
            ' ? " ITS A NEW COMPONENT " compInfo.contentIndex
            newInViewportComponentsById[comp.id] = comp
            m.inViewportComponentsById.delete(comp.id)
            didEnter = false
            if startIndex <= index and index <= endIndex
              comp.isInViewPort = true
              ' ? " IT DID ENTER"
              didEnter = true
            end if
          end if

          if didEnter
            ' ? " SENDING DID ENTER "; sc.dv(comp)
            comp@._apply("onDidEnter", [{ subRowIndex: compInfo.componentIndex, direction: direction, forceCellUpdate: forceAll }], false)
          end if

          subIndexKey = compInfo.index.toStr()
          ' ? ">>> SUB INDEX KEY IS " ; subIndexKey " COMP INFO IDX " compInfo.index "CONT " compInfo.contentIndex "COMP " compInfo.componentIndex
          newInViewportSubIndexes[subIndexKey] = compInfo
          m.inViewportSubIndexes.delete(subIndexKey)
        end for

        for each key in m.inViewportSubIndexes
          compInfo = m.inViewportSubIndexes[key]
          ' ? " SUB INDEX DID EXIT "; key " " compInfo.componentIndex
          compInfo.component@._apply("onDidExit", [{ subRowIndex: compInfo.componentIndex, direction: direction }], false)
        end for
      else
        ' ? "list is hidden; not rendering anything!"
        for each key in m.inViewportSubIndexes
          compInfo = m.inViewportSubIndexes[key]
          ' ? " SUB INDEX DID EXIT "; key " " compInfo.componentIndex
          compInfo.component@._apply("onDidExit", [{ subRowIndex: compInfo.componentIndex, direction: 1 }], false)
        end for
        m.inViewportSubIndexes = {}
      end if

      ' ? " VPN "; m.inViewportComponentsById
      ' ? " VPN NEW "; newInViewportComponentsById
      for each key in m.inViewportComponentsById
        comp = m.inViewportComponentsById[key]
        if comp.isInViewPort
          ' ? " DID EXIT "; key
          comp.isInViewPort = false
          comp@._apply("onDidExit", [{ subRowIndex: -1, direction: 1 }], false)
        end if
      end for

      m.inViewportComponentsById = newInViewportComponentsById
      m.inViewportSubIndexes = newInViewportSubIndexes

      if m.renderStrategy = "all"
        m.isAllRendered = true
      end if
    end function
  end class


end namespace
