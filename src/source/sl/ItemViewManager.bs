import "pkg:/source/sl/CommonListApi.bs"
import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/sl/ListMixin.bs"
import "pkg:/source/sl/ItemScroller.bs"
import "pkg:/source/sl/CellInfo.bs"

namespace sl
  class ItemViewManager extends sc.BaseClass

    public screenRect = { translation: [0, 0], size: [1920, 1080] }
    public componentBufferMode = "none"
    private componentPool as sc.types.node

    'owning views
    'we wrap the container to make it very easy to reason about content offsets
    public container = invalid
    public owner = invalid
    public delegate = invalid
    public contentGroup = invalid
    public cellInfos = []
    private rowInfos as sc.types.array
    private renderersByContentId = {}
    private rendereredCellInfosByIndex = {}
    private contentItems = []


    'tracking used for reusing cells during multi-render batches
    private previousRendereredByContentId = {}
    private reusedRenderers = []

    'content
    public content = invalid
    public rects = []
    public settings = invalid
    public listSettings = invalid

    'tracking
    public direction = 0
    public visibleItems = []
    public numberOfItems = 0
    public numberOfVisibleItems = 0

    ' 0 - x, 1 - y, 2 - both
    public axes = 0
    public minPos = 0
    public maxPos = 1080
    public lastScrollIndex = 0
    public lastScrollDirection = 0
    public isScrolling = false
    public scrollingStartIndex = -1
    private isRendering = false

    'TODO - move into settings or calculate this
    private renderedIndexUpdateInterval = 10

    'stored so we can send it with initialstate
    public itemScroller as sl.ItemScroller

    'bs:disable-next-line
    protected placeHolderCell = m.createSGNode("sl_BaseCell", invalid, "#_#phc")

    function new(name as string, owner as sc.types.node, container as sc.types.node, componentPool as sc.types.node, axes as sc.types.array, minPos as integer, maxPos as integer)
      super(name)
      m.container = container
      m.contentGroup = container.getParent()
      m.componentPool = componentPool
      m.owner = owner
      m.axes = axes
      m.minPos = minPos
      m.maxPos = maxPos
      m.lastScrollDirection = 0
      m.lastScrollIndex = 0

      m.updateScreenRect()
    end function

    protected function updateScreenRect()
      'bs:disable-next-line
      bounds = m.owner.sceneBoundingRect()
      m.screenRect = { translation: [bounds.x, bounds.y], size: [m.owner.width, m.owner.height] }
    end function

    public function reset()
      m.log.info ("resetting itemViewManager", m.__classname)

      m.content = invalid
      m.contentItems = []
      m.rects = []
      m.settings = invalid

      m.direction = 0
      m.visibleItems = []
      m.numberOfItems = 0
      m.numberOfVisibleItems = 0

      m.lastScrollIndex = 0
      m.lastScrollDirection = 0
      m.isScrolling = false
      m.scrollingStartIndex = -1
      m.isRendering = false

      m.itemScroller.reset()
    end function

    function forceUpdateLayout(fullUpdate = false as boolean)
      m._updateLayout(fullUpdate)
    end function

    function setContent(content as sc.types.node)
      m.log.verbose("setContent")
      m.content = content
      m.contentItems = m.getContentItems(content)
      m.settings = sl.listMixin.getRowSettings(m.owner.content, m.content)
      m.listSettings = m.owner.content.listSettings

      if content = invalid
        ' ? " RESETTING CONTENT"
      else
        if m._createRenderers(content) = false
          m.isRendering = true
          m.log.verbose("This viewManager is doing async rendering")
        else
          m.log.verbose("This viewManager is doing synchronous rendering")

          m.onRenderersCreated()
        end if
      end if
    end function

    protected function getContentItems(content as sc.types.node)

      if content <> invalid
        'bs:disable-next-line
        if content.isSubType("mc_Node") or content.subType() = "mc_Node"
          return content@.getChildren()
        else
          return content.getChildren(-1, 0)
        end if
      end if
      return []
    end function

    function _createRenderers(content as sc.types.node) as boolean
      m.visibleItems = []

      return m.createRenderers(content)
    end function

    protected function onRenderersCreated()
      m.log.verbose("onRenderersCreated", m.__classname)

      m.isRendering = false
      m._updateLayout()
    end function

    function _updateLayout(fullUpdate = false as boolean)
      'm.log.increaseIndent()Indent("updateLayout " + m.__classname)
      m.updateScreenRect()
      m.updateLayout(fullUpdate)
      'm.log.decreaseIndent()
    end function

    function onFocusIndexChange(direction as integer, index as integer)
      'TODO... notify?

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ util
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function convertChildTranslationToOwner(containerTranslation as sc.types.array)
      return [m.container.translation[0] + containerTranslation[0], m.container.translation[1] + containerTranslation[1]]
    end function

    function convertOwnerTranslationToChild(ownerTranslation as sc.types.array)
      return [m.container.translation[0] - ownerTranslation[0], m.container.translation[1] - ownerTranslation[1]]
    end function

    function setIsScrolling(isScrolling as boolean, isLong as boolean, startIndex as integer) as void
      'MAYBE
      if m.isScrolling = isScrolling
        return
      end if

      m.log.verbose("setIsScrolling ", isScrolling, " ", m.__classname)

      'TODO - move this logic into the LIST!!!

      m.isScrolling = isScrolling
      m.scrollingStartIndex = isScrolling ? startIndex : -1
      m.owner.isScrolling = isScrolling

      'TODO - reenable scrolling events!
      ' if m.listSettings.sendScrollStartStop
      '   ' ? " SENDING SCROLL EVENTS"
      '   'only want this to be the components in viewPort - 'TODO make more efficient
      '   for each id in m.renderersByContentId
      '     comp = m.renderersByContentId[id]
      '     if comp.isInViewPort
      '       comp@._apply("onScrollingStart", [startIndex, isLong], false)
      '     end if
      '   end for
      ' end if

      ' startIndex = m.scrollingStartIndex
      ' if m.owner.delegate <> invalid
      '   m.owner.delegate@._apply("onScrollingStart", [startIndex, m.row.index, isLong], false)
      ' end if
    end function

    function updateScrolling(currentIndex as integer) as void

      'TODO - tell list about this!
      if currentIndex = m.scrollingStartIndex or m.scrollingStartIndex = -1
        return
      end if

      ' if m.listSettings.sendScrollUpdate
      'TODO send scroll events
      ' ? " SEND SCROLL UPDATE"
      'only send it to rendered components..
      ' for each id in m.renderersByContentId
      ' comp = m.renderersByContentId[id]
      '       comp@._apply("onScrollingChange", [startIndex, isLong], false)
      ' end for
      ' end if
      ' if m.owner.delegate <> invalid
      '   m.owner.delegate@._apply("onScrollingChange", [startIndex, m.row.index, isLong], false)
      ' end if
    end function

    private function getCellInfoForContentIndex(contentIndex as integer) as sl.CellInfo
      info = invalid
      ' ? "getCellInfoForContentIndex" ; contentIndex
      for each info in m.cellInfos
        ' ? ">>>" ; info.contentIndex
        if info.contentIndex = contentIndex
          return info
        end if
      end for
      ' ? "no match"
      return invalid
    end function

    'FIXME - this is expensive
    function getCellInfoForContent(content as sc.types.node) as sl.CellInfo
      info = invalid
      if content <> invalid and m.cellInfos <> invalid
        ' ? "getCellInfoForContentIndex" ; contentIndex
        id = content.id
        for each info in m.cellInfos
          ' ? ">>>" ; info.contentIndex
          if info.id = id
            return info
          end if
        end for
      end if
      ' ? "no match"
      return invalid
    end function

    'FIXME - this is expensive
    function getCellInfoForContentId(id as string) as sl.CellInfo
      info = invalid
      if id <> "" and m.cellInfos <> invalid
        ' ? "getCellInfoForContentIndex" ; contentIndex
        for each info in m.cellInfos
          ' ? ">>>" ; info.contentIndex
          if info.id = id
            return info
          end if
        end for
      end if
      ' ? "no match"
      return invalid
    end function

    function getRenderedIds()
      return m.renderersByContentId.keys()
    end function

    function getRenderedIndexes()
      indexes = []
      for each index in m.rendereredCellInfosByIndex
        cellInfo = m.rendereredCellInfosByIndex[index]
        indexes.push(cellInfo.index)
      end for
      return indexes
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ visibility state management
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function tidyUpUnusedRenderers() as void
      removedRenderers = []
      m.log.verbose("cleaning unused renderers")

      'note: CHILD ZERO is the row's animation.
      for i = 1 to m.container.getChildCount() - 1
        renderer = m.container.getChild(i)
        m.log.info("considering", sc.dv(renderer))

        if renderer.content = invalid
          removedRenderers.push(renderer)
        else if m.renderersByContentId[renderer.content.id] = invalid
          removedRenderers.push(renderer)
          renderer.content = invalid
        end if
      end for
      m.log.verbose("Releasing", removedRenderers.count(), " renderers")
      for each renderer in removedRenderers
        m.log.info("releasing", sc.dv(renderer))

        m.releaseCell(renderer)
      end for
    end function

    function getCell(index as integer)
      cell = invalid
      item = m.contentItems[index]

      ' ? "getCell" index
      if item <> invalid
        cell = m.renderersByContentId[item.id]
        if cell = invalid or cell.id = "#_#phc"
          ' ? "REPLACING PLACEHOLDER CELL AT INDEX "; index
          settings = sl.listMixin.getCellSettings(m.owner.content, m.content, item)
          cell = m.getCellForCreation(item, index, settings.compName, true, true)
          m.updateCell(cell, index, item)
          return cell
        end if
      end if
      return cell
    end function

    protected function updateCell(cell as sc.types.node, index as integer, item as sc.types.node)
      if cell <> invalid
        ' ? " updating rendered cell IDX" cell.index " CT " asString(item.title) " index " index " ID " asString(item.id)
        m.previousRendereredByContentId.delete(item.id)
        m.renderersByContentId[item.id] = cell
        m.rendereredCellInfosByIndex[index.toStr()] = m.cellInfos[index]
        cell.translation = m.rects[index].translation

        'MOVE THIS AWAY
        ' if m.itemScroller.focusManager.cellInfo <> invalid and m.itemScroller.focusManager.cellInfo.index = cell.index
        ' ? "fixing focus index " m.itemScroller.focusManager.cellInfo.index " >  " index
        '   m.itemScroller.focusManager.cellInfo.index = index
        ' end if

        ' if m.itemScroller.focusManager.nextCellInfo <> invalid and m.itemScroller.focusManager.nextCellInfo.index = cell.index
        ' ? "fixing next focus index " m.itemScroller.focusManager.nextCellInfo.index " >  " index
        '   m.itemScroller.focusManager.nextCellInfo.index = index
        ' end if

        'TODO - _might_ need something different than initial state here..

        cell.visible = true
        cell.index = index
        componentConfig = m.cellInfos[index]
        componentConfig.component = cell
        componentConfig.index = index
        componentConfig.id = item.id
        cell.initialState = {
          'bs:disable-next-line
          row: m.row
          list: m.owner
          size: m.rects[index].size
          content: item
          isScrolling: m.isScrolling
        }
      end if
    end function

    protected function getCellForCreation(item as sc.types.node, index as integer, compName as string, isRendered as boolean, force as boolean)
      ' ? " GETTING CELL FOR CREATION "; index; " isRendered "; isRendered
      ' if not isRendered and not force'index > 10 and not force
      ' if false and not isRendered and not force'index > 10 and not force
      if not isRendered and not force
        ' ? "getting placeholder"
        return m.placeHolderCell
      else
        cell = m.componentPool@.getComponent(compName)
        if cell <> invalid
          cell.index = index
          cell.translation = m.rects[index].translation

          cell.initialState = {
            'bs:disable-next-line
            row: m.row
            list: m.owner
            size: m.rects[index].size
            content: item
            isScrolling: m.isScrolling
          }

          cell.visible = true

          if isRendered
            ' cell@._apply("onDidEnter", [{subRowIndex:cell.index, direction:1}], false)
          end if

          m.container.appendChild(cell)
        end if
        return cell
      end if
    end function

    function releaseCell(cell as sc.types.node)
      m.log.verbose("releasing cell")

      if cell <> invalid and cell.id <> "#_#phc"
        cellInfo = m.cellInfos[cell.index]
        if cellInfo <> invalid
          m.log.verbose("releasing cell at index ", cell.index)
          m.rendereredCellInfosByIndex.delete(cellInfo.index.toStr())
          m.log.verbose("releasing cell at index ", cell.index, " with id ", cellInfo.id)
          m.componentPool@.releaseComponent(cell)
          m.renderersByContentId[cellInfo.id] = m.placeHolderCell
          m.previousRendereredByContentId.delete(cellInfo.id)
          cell.isInViewPort = false
          cell@._apply("didExit", [1], false)
          cell.initialState = {}
        else
          m.log.verbose("No cellInfo for index ", cell.index)
        end if
      else
      end if
    end function

    function cleanupCell(cell as sc.types.node)
      if cell <> invalid and cell.id <> "#_#phc"
        m.log.verbose("releasing cell at index ", cell.index)
        m.componentPool@.releaseComponent(cell)
        ' m.previousRendereredByContentId.delete(cellInfo.id)
        cell.isInViewPort = false
        cell@._apply("didExit", [1], false)
        cell.initialState = {}
      end if
    end function

    function notifyExitEvent(indexes as sc.types.array) as void
      m.log.verbose("notifyExitEvent", m.__classname, indexes)

      for each index in indexes
        comp = m.getRenderer(index)
        if comp <> invalid
          m.log.verbose("notifying exit on ", comp.id)
          if comp.id <> "#_#phc"
            if comp.isInViewPort
              m.releaseCell(comp)
            end if
          end if
        end if
      end for

      m.itemScroller.viewPortEventNotifier.isAllRendered = false
    end function

    function notifyEnterEvent(indexes as sc.types.array) as void
      m.log.verbose("notifyEnterEvent", m.__classname, indexes)

      for each index in indexes
        comp = m.getRenderer(index, true)
        if comp <> invalid
          m.log.verbose("notifying enter on ", comp.id, " with index ", comp.index, " and id ", comp.id)

          if not comp.isInViewPort
            comp.isInViewPort = true
            comp@._apply("onDidEnter", [{ subRowIndex: 0, direction: 1 }], false)
          end if
        end if
      end for
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ itemRect positions
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function getFlowScreenPosition(index as integer, direction as integer)
      itemRect = m.rects[index]

      if itemRect = invalid
        m.log.warn("no itemRect for index", index)
        return invalid
      end if

      itemScreenPos = m.container.translation[m.axes] + itemRect.translation[m.axes]

      ' ? "GFSP I " ; index ; " ao: "; m.itemScroller.activeOffset ; " pos " ; itemScreenPos
      if itemScreenPos >= m.minPos and itemScreenPos + itemRect.size[m.axes] <= m.maxPos
        'we can simply move the focus to this position
        return itemScreenPos
      end if

      'if part or all of the view is off the viewport, then a scroll is required
      return invalid
    end function

    function getOffsetForScreenPosition(itemRect as object, screenPos as integer)
      if itemRect <> invalid
        return itemRect.translation[m.axes] - screenPos
      else
        return m.minPos
      end if
    end function

    function getIndexAtPosition(position as integer, direction as integer)
      p = abs(position)
      i = 0
      for i = 0 to m.cellInfos.count() - 1
        info = m.cellInfos[i]
        'the offset is already factored in
        itemPos = abs(info.getScrollOffset(direction))
        ' ? "i "; i ; "pos"; position ; " p "; p ; " ip " ; itemPos
        if itemPos > p
          ' ? "+++++!!! MATCHED ITEM INDEX "; i - skipped
          return sc.clamp(i - 1, 0, m.numberOfItems - 1)
        end if
      end for
      ' end ifk

      'we must be at the end! -return last item
      index = sc.clamp(i - 1, 0, m.numberOfItems - 1)
      ' ? "+++++!!! MATCHED ITEM INDEX "; index
      return index
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ general item api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function getRect(index as integer, useScreenCoords = false as boolean) as sc.types.assocarray
      rect = m.rects[index]

      if rect <> invalid
        screenRect = {
          size: [rect.size[0], rect.size[1]]
          translation: [rect.translation[0], rect.translation[1]]
          index: rect.index
          screenPos: rect.screenPos
          subRowIndex: rect.gridrow
        }
        if useScreenCoords
          screenRect.translation = m.convertChildTranslationToOwner(screenRect.translation)
        end if
      else
        screenRect = {
          translation: [0, 0]
          size: [0, 0]
          index: -1
          screenpos: 0
          subRowIndex: -1
        }
      end if
      return screenRect
    end function

    function getFocusSettings()
      if m.settings <> invalid
        return m.settings.focusSettings
      else
        return invalid
      end if
    end function

    function getItemSettings()
      return m.settings
    end function

    function getItemSize(index as integer) as sc.types.array
      itemRect = m.rects[index]
      if itemRect <> invalid
        return itemRect.size
      else
        return [0, 0]
      end if
    end function

    function getIsOnScreen(info as sl.CellInfo, screenPos = 0 as integer) as boolean
      rect = m.rects[info.contentIndex]
      if rect = invalid
        return false
      end if
      if info.component = invalid
        'TODO - this is wrong - a component might not yet be rendered..
        info.component = m.getRenderer(info.index)
        if info.component = invalid
          ' ? " could not get renderer for this info"
          return false
        end if
      end if
      'bs:disable-next-line
      bounds = info.component.sceneBoundingRect()
      w = rect.size[0]
      h = rect.size[1]
      translation = [bounds.x, bounds.y]
      translation[m.axes] += screenPos
      return translation[0] >= m.screenRect.translation[0] and translation[0] + w <= m.screenRect.size[0] and translation[1] >= m.screenRect.translation[1] and translation[1] + h <= m.screenRect.size[1]
    end function
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ abstract methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function isFlowFocusPossible(info as sl.CellInfo, direction as integer, activeScreenPos as integer)
      isFlowPossible = info.isFlowFocusPossible(m.container.translation[m.axes], m.maxPos, direction, m.axes)

      if not isFlowPossible and info.isFlowFocusAllowed
        'check on the renderer
        ' ? "Flow not possible based on component info - checking actual component " ; m.screenPos ; " NI "; info.index
        isFlowPossible = m.getIsOnScreen(info, activeScreenPos)
      end if
      return isFlowPossible
    end function

    function isVerticalFlowFocusPossible(info as sl.CellInfo, direction as integer, activeScreenPos as integer)
      return true
    end function

    function createRenderers(content as sc.types.node, forceSync = false as boolean) as boolean
      m.log.error("You must override this method")
      return false
    end function

    function updateLayout(fullUpdate = false as boolean)
      m.log.error("You must override this method")
    end function

    function applyRenderStateMap(renderedStateMap as sc.types.assocarray)
      m.log.error("You must override this method")
    end function

    function getRenderer(index as integer, createIfNotReady = false as boolean, forceCellUpdate = false as boolean)
      ' ? " GR ";
      if m.contentItems <> invalid and m.cellInfos <> invalid
        item = m.contentItems[index]
        ' ? " A";
        if item <> invalid
          cell = m.renderersByContentId[item.id]
          ' ? " B";
          if cell <> invalid and cell.id <> "#_#phc"
            ' ? " C";
            if forceCellUpdate
              m.updateCell(cell, index, item)
            end if
            ' ? " D"
            return cell
          else if createIfNotReady
            ' ? " E"
            return m.getCell(index)
          else
            ' ? " F"
            return invalid
          end if
        else
          ' ? " G"
          return invalid
        end if
      else
        ' ? " H"
        return invalid
      end if
    end function

    function onContentItemsChange() as sl.ListChangeResult
      return {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }
    end function

    function getRowInfos(yOffset as integer, forceRecalculate = false as boolean) as sc.types.array
      if forceRecalculate
        m.rowInfos = invalid
      end if

      if m.settings = invalid
        ' ? "+!!!!!?!! INVALID SETTINGS"
        return []
      end if
      if m.rowInfos = invalid
        focusSettings = m.getFocusSettings()

        screenPos = m.settings.screenPos
        positions = [
          new sl.CellPosition(yOffset, screenPos) 'normal
          new sl.CellPosition(yOffset, screenPos) 'float-scroll
        ]
        m.rowInfos = [new sl.CellInfo([0, 0], focusSettings, positions, false, 0, 0)]
      end if
      return m.rowInfos
    end function

    protected function updateChangedItems()
      for each item in m.visibleItems
        if item.version <> invalid
          renderer = m.renderersByContentId[item.id]
          if renderer <> invalid and renderer.contentVersion <> item.version
            ' m.log.info("updating renderer")
            ' ? " updating render for item version "; item.version
            renderer@.forceUpdate()
          end if
        end if
      end for
    end function

    protected function getIndexAfterItemUpdate(previousInfo as sl.CellInfo) as integer
      if previousInfo = invalid or previousInfo.index = -1
        return 0
      end if

      newIndex = previousInfo.contentIndex

      isFollowingContent = m.listSettings.postUpdateIndexMode = "content"
      if isFollowingContent
        m.log.info("Attempting to maintain focus on the same content", m.__classname)

        cellInfoAtOldIndex = m.getCellInfoForContentIndex(previousInfo.contentIndex)
        if cellInfoAtOldIndex <> invalid and cellInfoAtOldIndex.id = previousInfo.id
          newIndex = cellInfoAtOldIndex.contentIndex
        else
          m.log.verbose("the previously focused item has moved after the list changed - trying to restore it")
          newCellInfo = m.getCellInfoForContentId(previousInfo.id)
          if newCellInfo <> invalid
            m.log.verbose("following content to new list position")
            newIndex = newCellInfo.contentIndex
          else
            m.log.verbose("Falling back to previous index")
          end if
        end if
      else
        m.log.info("Attempting to maintain focus on the same index", newIndex, m.__classname)
      end if

      m.log.info("the newIndex wants to be", newIndex, "numberOfVisibleItems", m.numberOfVisibleItems)
      return sc.clamp(newIndex, 0, m.numberOfVisibleItems - 1)
    end function

  end class
end namespace
