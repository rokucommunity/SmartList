import "pkg:/source/sl/ListMixin.bs"
import "pkg:/source/sl/GridRowItemScroller.bs"
import "pkg:/source/sl/GridRowItemViewManager.bs"
import "pkg:/source/sl/BaseRow.bs"
import "pkg:/source/sl/CellInfo.bs"

namespace sl
  ' displays items in a grid, with:
  ' - floating focus scrolling left and right
  ' - TBD fixed focus vertical
  @node("sl_GridRow", "sl_BaseRow")
  class GridRow extends sl.BaseRow

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager
    private itemScroller

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ view tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createViews()
      super.createViews()
      m.createManagers()
    end function

    private function createManagers()
      m.log.info("createManagers")
      m.viewManager = new sl.GridRowItemViewManager(m.owner, m.top, m.contentGroup, m.global.componentPool, 0, m.width)
      m.itemScroller = new sl.GridRowItemScroller(m.viewManager, m.owner.focusIndicatorManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Overridden Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onRecycle(newContent as mc.types.node)
      super.onRecycle(newContent)

      m.cleanHeader()
      m.viewManager.owner = m.owner
      m.viewManager.setContent(invalid)
      m.itemScroller.focusManager = m.owner.focusIndicatorManager
      m.itemScroller.reset()
    end function

    protected override function onContentChange(content as mc.types.node, keepOldFocusIfPossible = false as boolean)
      m.log.info("onContentChange")
      ' ? " GRID CHANGE ========================================"
      m.configureHeader()

      if content = invalid
        m.log.info("row content is set to invalid. resetting")
        ' ? " GRID CHANGE AAAA"
        m.viewManager.reset()
      else
        ' ? " GRID CHANGE BBBB"
        m.viewManager.reset()
        m.viewManager.setContent(content)

        ' ? " GRID CHANGE CCCC " keepOldFocusIfPossible
        ' m.focusManager.isNotifying = keepOldFocusIfPossible = invalid or keepOldFocusIfPossible = true
        m.itemScroller.reset(keepOldFocusIfPossible)
        ' m.focusManager.isNotifying = true
      end if
    end function

    override function moveToIndex(index as integer, animated as boolean, animSpeedIndex = 0 as integer)
      'FIXME - what to do here?
      ' ? " GRID MOVE TO INDEX - ASSUMING THIS INDEX IS ON SCREEN - OR THIS SHOULD NOT HAVE BEEN CALLED"
      if m._content <> invalid and index <> -1
        m.itemScroller.forceFocusOnIndex(index, true, false)
      end if
    end function

    override function cancelMove(forceFocusUpdate as boolean)
      m.log.verbose("GRID cancelling move CANCEL CANCEL========================")
      if m._content <> invalid
        m.itemScroller.cancelScrolling(forceFocusUpdate)
      end if
    end function

    override function getRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    override function getRect(index as integer, useScreenCoords = false as boolean) as mc.types.assocarray
      return m.viewManager.getRect(index, useScreenCoords = true)
    end function

    override function getItemSize(index as integer) as mc.types.array
      return m.viewManager.getItemSize(index)
    end function

    function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List move API implementation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function moveFromPress(direction as integer, isLongPress as boolean, isPage = false as boolean) as boolean
      ' ? "moving row from press long? " isLongPress
      if isLongPress
        return m.itemScroller.moveToEnd(direction)
      else
        return m.itemScroller.moveFromPress(direction, true, false) 'disabled on grid 'isPage)
      end if
    end function

    override function canMoveInDirection(direction as integer, longPress as boolean) as boolean
      settings = m.viewManager.getFocusSettings()
      if settings = invalid or (longPress = true and settings.allowLongPress = false)
        return false
      end if
      ' if m.isAlreadyScrolling(key = "up" or key = "down")
      '   return false
      ' end if
      index = m.itemScroller.index
      normalizedColumn = index mod m.viewManager.numCols

      ' ? "CAN SCROLL KEY"; key

      return (m._content <> invalid and m._content.getChildCount() > 0) and ((direction = -1 and normalizedColumn <> 0) or (direction = 1 and normalizedColumn < m.viewManager.numCols - 1))
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Delegate Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onDidEnter(event as sl.listEvent)
      m.log.verbose("onDidEnter SRI ", event.subRowIndex, " FORCE ", event.forceCellUpdate = true)
      m.viewManager.notifyEnterEvent(event.subRowIndex, event.subRowIndex, event.forceCellUpdate = true)
    end function

    private function onDidExit(event as sl.ListEvent)
      m.log.verbose(" GRID onDidExit SRI ", event.subRowIndex)
      m.viewManager.notifyExitEvent(event.subRowIndex, event.subRowIndex)
    end function

    ' private function onScrollingChange(event as sl.ListEvent)
    '   ? " onScrollingChange "
    ' end function

    private function onDidGainFocus(event as sl.ListEvent)
      ' ? " GRID onDidGainFocus " m.index subRowIndex direction
    end function

    private function onDidLoseFocus(event as sl.ListEvent)
      ' ? " GRID onDidLoseFocus " m.index subRowIndex direction
    end function

    private function onGainingFocus(event as sl.ListEvent)
      ' ? " GRID onGainingFocus " m.index subRowIndex direction fraction
    end function

    private function onLosingFocus(event as sl.ListEvent)
      ' ? " GRID onLosingFocus " m.index subRowIndex direction fraction
    end function

    private function callMethodOnFocusedCell(functionName as string, args as mc.types.array)
      cell = m.itemScroller.cellInfo.component

      if cell <> invalid
        ' TODO potentially filter events
        cell@._apply(functionName, args, false)
      end if
    end function

  end class
end namespace
