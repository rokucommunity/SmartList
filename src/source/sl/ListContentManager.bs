import "pkg:/source/sl/CommonListApi.bs"
import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/sl/ListItemViewManager.bs"
import "pkg:/source/sl/ListItemScroller.bs"
import "pkg:/source/sl/List.bs"

namespace sl
  interface RowContentInfo
    row as mc.types.node
    version as integer
    isHidden as boolean
    isFocusEnabled as boolean
  end interface

  class ListContentManager extends sc.BaseClass
    public content as mc.types.node

    private list as sl.List
    private listNode as mc.types.node
    private isUpdateEnabled = true

    private viewManager as sl.ListItemViewManager
    private itemScroller as sl.ListItemScroller
    private focusIndicatorManager as mc.types.node
    private rowContentInfoByContentId = {}
    private previousFocusedRowInfo as sl.CellInfo
    private previousFocusedCellInfo as sl.CellInfo
    private previousRowContent as mc.types.node
    private previousCellContent as mc.types.node
    private isForcingUpdateAll = false

    private pendingUpdates = []

    private updateTimer as mc.types.node

    function new(list as sl.List, viewManager as sl.ListItemViewManager, itemScroller as sl.ListItemScroller, focusIndicatorManager as mc.types.node)
      super("ListContentManager")
      m.list = list
      m.listNode = list.top
      m.viewManager = viewManager
      viewManager.contentManager = m
      m.itemScroller = itemScroller
      m.focusIndicatorManager = focusIndicatorManager
    end function

    public function setContent(content as mc.types.node, forceUpdate = false as boolean) as void

      m.toggleContentObserver(false)
      if content = invalid
        m.log.info("listContent set to invalid. Resetting list")
        content = sl.listMixin.createListContent()
        content.id = "invalidContent"
        m.content = content
        m.listNode.content = content
        m.list.cleanup()
        ' ? " LCM RENDERING SET CONTENT INVALID"
        m.setListRendering(false)
        return
      end if

      m.list.contentGroup.visible = false

      m.setListRendering(true)
      previousContent = m.content

      m.content = content
      m.listNode.content = content

      m.isForcingUpdateAll = forceUpdate

      if previousContent = invalid or not previousContent.isSameNode(content)
        m.log.info("Setting new content on list")
        if forceUpdate
          m.ascertainPreviousFocusInfo()
        end if
        m.list.resetState()
        m.updateListFocusAfterApplyingChanges()
      else if forceUpdate
        ' ? " IS DOING FORCED UPDATE ON SAME CONTENT"
        m.synchronizeContent(true, true)
      else if content <> invalid
        m.log.info("current content has changed in some untracked way!")
        m.synchronizeContent(true, forceUpdate)
      else
        m.log.warn("unknown content change")
      end if

      m.isForcingUpdateAll = false
      m.toggleContentObserver(true)
    end function

    function setUpdatesEnabled(enabled as boolean)
      m.isUpdateEnabled = enabled
    end function

    function synchronizeContent(notifyRows = true as boolean, forceUpdateAll = false as boolean) as void
      if m.content = invalid
        m.log.verbose(" no content")
        return
      end if

      ? " LCM RENDERING SYNC CONTENT"
      m.setListRendering(true)

      m.focusIndicatorManager@.setEnabled(false)
      m.focusIndicatorManager@.setDelegateCallbacksEnabled(false)
      listResult = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }

      'm.log.resetIndent()

      m.log.verbose(" SYNC content")
      'm.log.increaseIndent()Indent("synchronizeContent")

      m.ascertainPreviousFocusInfo()

      for each rowContent in m.content.getChildren(-1, 0)
        ? "CHECKING CONTENT " rowContent.id
        info = m.rowContentInfoByContentId[rowContent.id]
        if info <> invalid
          ? "GOT INFO " rowContent.id
          m.updateContentOnRow(info.row, rowContent, notifyRows, listResult)
        else
          m.log.verbose(" THERE SHOULD HAVE BEEN A ROW SET FOR ", rowContent.id)
        end if
      end for

      'm.log.increaseIndent()Indent("list changes are")

      listResult.isLayoutRequired = m.isForcingUpdateAll or m.isListLayoutRequired(m.content.changes)
      if listResult.isLayoutRequired
        listResult.isFocusChangeRequired = true
      end if
      m.updateListContentIfRequired(listResult)

      m.updateListFocusAfterApplyingChanges()
      m.changedRowsById = {}
      m.pendingUpdates = []
      'm.log.decreaseIndent()
      'm.log.resetIndent()
    end function

    private function ascertainPreviousFocusInfo()
      m.log.verbose("ascertaining previous focus info")

      m.previousFocusedRowInfo = m.itemScroller.cellInfo
      m.previousCellContent = invalid
      m.previousRowContent = invalid
      if m.previousFocusedRowInfo <> invalid
        m.previousRowContent = m.list.focusedRowContent
        if m.previousFocusedRowInfo.component <> invalid
          m.previousFocusedCellInfo = m.previousFocusedRowInfo.component@.getFocusedCellInfo()
          if m.previousFocusedCellInfo <> invalid
            m.previousCellContent = m.list.focusedCellContent
          end if
        end if
      end if
    end function

    private function isListLayoutRequired(changes as mc.types.node) as boolean
      m.log.info("ascertaining if layout updates are required")
      'TODO..
      return true
    end function

    private function updateListFocusAfterApplyingChanges() as void
      m.log.verbose("list", sc.dv(m.listNode), "has to update focus after this change")
      m.log.info("restoring focus to", m.previousFocusedRowInfo, m.previousFocusedCellInfo)

      m.log.info("is list rendering", sc.dv(m.listNode), m.listNode._isRenderingUpdate)

      if m.listNode._isRenderingUpdate
        m.log.warn("cannot update the list focus while the list is rendering - listItemViewManager will call back when ready")
        m.observe(m.listNode._isRenderingUpdate, m.updateListFocusAfterApplyingChanges, "none", true)
        return
      end if

      newIndices = m.getIndicesAfterApplyingChanges()

      m.log.info("setting the focus indicator manager enabled again")

      m.focusIndicatorManager@.setEnabled(true)

      m.executeListFocus(newIndices[0], newIndices[1])
      m.list._setIndices(newIndices[0], newIndices[1])
      m.setListRendering(false)
      m.log.info("list is now focused on", formatJson(newIndices))


      m.notifyDelegatesIfRequired()
      'm.log.decreaseIndent()
    end function


    private function notifyDelegatesIfRequired()
      'FIXME - Im' sure the ItemFocusManager could be used here..
      focusedRowIndex = m.listNode.focusedRowIndex
      focusedCellIndex = m.listNode.focusedCellIndex
      previousRowIndex = asInteger(m.previousFocusedRowInfo.index, -1)
      previousCellIndex = asInteger(m.previousFocusedCellInfo.index, -1)

      if m.didFocusChangeInWayThatNeedsNotifying()
        m.log.verbose("Have to notify update about the focus change")
        isLostFoundTheSame = previousRowIndex = focusedRowIndex and previousCellIndex = focusedCellIndex
        if not isLostFoundTheSame and previousRowIndex <> -1
          m.focusIndicatorManager@.sendManualDelegateRowMessage("didLoseFocus", {
            rowIndex: previousRowIndex
            subRowIndex: 0'm.previousFocusedRowInfo.subRowIndex
            index: previousCellIndex
            direction: 1
          })

          if previousCellIndex <> -1
            m.focusIndicatorManager@.sendManualDelegateCellMessage("didGainFocus", {
              rowIndex: previousRowIndex
              subRowIndex: 0'm.previousFocusedRowInfo.subRowIndex
              index: previousCellIndex
              direction: 1
            })
          end if
        end if

        toEvent = {
          rowIndex: focusedRowIndex
          subRowIndex: m.listNode.focusedSubRowIndex
          index: focusedCellIndex
          direction: 1
        }

        if toEvent.rowIndex <> -1 and asString(m.previousRowContent.id) <> asString(m.list.focusedRowContent.id)
          m.focusIndicatorManager@.sendManualDelegateRowMessage("didGainFocus", toEvent)
        end if

        if toEvent.cellIndex <> -1
          m.focusIndicatorManager@.sendManualDelegateCellMessage("didGainFocus", toEvent)
        end if
      end if
    end function

    private function didFocusChangeInWayThatNeedsNotifying() as boolean
      previousRowIndex = asInteger(m.previousFocusedRowInfo.index, -1)
      previousCellIndex = asInteger(m.previousFocusedCellInfo.index, -1)
      m.log.info("checking if the changes to focus after update, require an update in list focus state")
      m.log.info("previously RI:", previousRowIndex, "CI:", previousCellIndex, sc.dv(m.previousRowContent), sc.dv(m.previousCellContent))
      m.log.info("now RI:", sc.dv(m.list.focusedRowContent), sc.dv(m.list.focusedCellContent))

      if previousRowIndex = -1
        m.log.verbose("list never had content")
        return true
      end if

      if (m.list.focusedRowContent = invalid) <> (m.previousRowContent = invalid)
        m.log.verbose("list has changed if it had a focused row:", m.list.focusedRowContent <> invalid)
        return true
      end if

      if (m.list.focusedCellContent = invalid) <> (m.previousCellContent = invalid)
        m.log.verbose("list has changed whether it had a focused cell:", m.list.focusedCellContent <> invalid)
        return true
      end if

      if m.list.focusedRowContent <> invalid and m.list.focusedRowContent.id <> m.previousRowContent.id
        m.log.verbose("list is focused on a different row now")
        return true
      end if

      if m.list.focusedCellContent <> invalid and m.list.focusedCellContent.id <> m.previousCellContent.id
        m.log.verbose("list is focused on a different Cell")
        return true
      end if

      m.log.info("after the updates, we're still focused on the same thing")

      return false
    end function

    private function getIndicesAfterApplyingChanges() as mc.types.array

      'm.log.increaseIndent()Indent("updateListFocusAfterApplyingChanges")
      indices = []
      if indices = invalid or indices.count() <> 2
        m.log.info("using standard heuristics for restoring focus indices")
        indices = m.getIndicesUsingStandardBehavior()
      end if

      m.log.info("after updating, indices are going to be", indices[0], indices[1])
      return indices
    end function

    private function getIndicesUsingStandardBehavior() as mc.types.array
      rowIndex = 0
      cellIndex = 0

      newRowInfo = invalid
      if m.previousFocusedRowInfo <> invalid
        rowIndex = m.viewManager.getIndexAfterItemUpdate(m.previousFocusedRowInfo)
        newRowInfo = m.viewManager.getCellInfoForContentIndex(rowIndex)
        if newRowInfo <> invalid
          content = m.content.getChild(rowIndex)
          if content.isHidden or not content.isFocusEnabled
            m.log.verbose("chosen content is no longer focusable")
            rowIndex = m.getValidRowIndexAfter(rowIndex)
            m.log.verbose("next which is focusable, is at index", rowIndex)
            newRowInfo = m.viewManager.getCellInfoForContentIndex(rowIndex)
          end if
        end if
        if newRowInfo <> invalid
          row = newRowInfo.component
          rowIndex = newRowInfo.contentIndex
          if m.previousFocusedRowInfo.id <> newRowInfo.id
            m.log.verbose("the contents are different at this index")
            'TODO - might need to choose this more logically
            cellIndex = 0
          else
            cellIndex = row@.getIndexAfterItemUpdate(m.previousFocusedCellInfo)
          end if
          m.log.info("after changes, the new cellIndex is", cellIndex)
        end if


        if rowIndex < 0
          rowIndex = 0
        end if

        if cellIndex < 0
          cellIndex = 0
        end if
      end if

      return [rowIndex, cellIndex]
    end function

    private function getValidRowIndexAfter(rowIndex as integer) as integer
      'first go forwards
      for i = rowIndex + 1 to m.content.getChildCount() - 1
        row = m.content.getChild(i)
        if not row.isHidden and row.isFocusEnabled
          m.log.verbose("valid row index after", rowIndex, i)
          return rowIndex
        end if
      end for

      for i = rowIndex - 1 to 0 step -1
        row = m.content.getChild(i)
        if not row.isHidden and row.isFocusEnabled
          m.log.verbose("valid row index after", rowIndex, i)
          return rowIndex
        end if
      end for
      return -1
    end function

    private function executeListFocus(rowIndex as integer, cellIndex as integer)
      m.log.verbose("focusing on item", rowIndex, cellIndex)

      m.focusIndicatorManager@.setDelegateCallbacksEnabled(false)
      'm.log.increaseIndent()Indent("MOVE TO NEW POS")

      m.itemScroller.viewPortEventNotifier.isAllRendered = false
      m.list.moveToRowItemIndex(rowIndex, cellIndex, false)
      'm.log.decreaseIndent()

      'm.log.increaseIndent()Indent("COMPLETE")
      ' ? " EXECUTE LIST FOCUS"
      m.itemScroller.setFocusManagerInfo(m.itemScroller.cellInfo, m.itemScroller.nextCellInfo, m.itemScroller.direction, false)

      m.focusIndicatorManager@.completeFocusNow(true)
      m.focusIndicatorManager@.setDelegateCallbacksEnabled(true)
      'm.log.decreaseIndent()

      if m.listNode.isChildFocused or m.listNode.isFocused
        m.focusIndicatorManager@.setFocusedOnRow(true)
      end if
    end function

    private function updateContentOnRow(row as mc.types.node, content as mc.types.node, notifyRow = false as boolean, result = invalid as sl.ListChangeResult) as void
      if row = invalid
        m.log.verbose("applyRowContentUpdate cannot set content on invalid row")
        return
      end if

      isChanged = m.isForcingUpdateAll or m.updateRowContentInfo(row, content, result)
      m.log.verbose("applyRowContentUpdate isChanged:", isChanged)
      if isChanged
        if notifyRow
          m.log.verbose("notifying row")
          m.applyRowContentUpdate(row, content, result)
        else
          m.log.verbose("not notifying row", isChanged, notifyRow)
        end if

        'we have to reset the viewPortEventNotifier to ensure that the row is re-rendered, in case of "all" strategy
        m.itemScroller.viewPortEventNotifier.isAllRendered = false
      end if
    end function

    public function setContentOnRow(row as mc.types.node, content as mc.types.node, isRecycled = false as boolean, result = invalid as sl.ListChangeResult) as void
      if row = invalid
        m.log.verbose("setContentOnRow cannot set content on invalid row")
        return
      end if

      ' ? " L>>!>!>>!>!!>!!!> SET CONTENT ON ROW 1 " sc.dv(row) " content " sc.dv(content)
      isChanged = m.updateRowContentInfo(row, content, result)
      ' ? " L>>!>!>>!>!!>!!!> SET CONTENT ON ROW 2 " sc.dv(row) " content " sc.dv(content) " isChanged " isChanged

      m.log.info("setContentOnRow isChanged:", isChanged)

      if isRecycled
        ' ? " L>>!>!>>!>!!>!!!> SET CONTENT ON ROW 3 recycling row  " sc.dv(row) " content " sc.dv(content)
        row@.recycle(content)
      end if

      ? "::::::::::::: ADD OBSERVER"
      m.toggleRowContentObserver(content, true)
      m.applyRowContentChange(row, content, result)

      if isChanged
        'we have to reset the viewPortEventNotifier to ensure that the row is re-rendered, in case of "all" strategy
        m.itemScroller.viewPortEventNotifier.isAllRendered = false
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Row Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function applyRowContentChange(row as mc.types.node, content as mc.types.node, result as sl.ListChangeResult)
      ' ? " APPLYING ROW " sc.dv(row) " content " sc.dv(content)

      rowResult = row@.setContent(content, m.isForcingUpdateAll)

      if result <> invalid
        if not result.isLayoutRequired and rowResult.isLayoutRequired
          result.isLayoutRequired = true
        end if
        if not result.isFocusChangeRequired and rowResult.isFocusChangeRequired
          result.isFocusChangeRequired = true
        end if
      end if
    end function

    private function applyRowContentUpdate(row as mc.types.node, content as mc.types.node, result as sl.ListChangeResult)
      rowResult = row@.onContentItemsChange(true)

      if result <> invalid
        if not result.isLayoutRequired and rowResult.isLayoutRequired
          result.isLayoutRequired = true
        end if
        if not result.isFocusChangeRequired and rowResult.isFocusChangeRequired
          result.isFocusChangeRequired = true
        end if
      end if
    end function

    private function updateRowContentInfo(row as mc.types.node, content as mc.types.node, result as sl.ListChangeResult) as boolean
      m.log.verbose("updateRowContentInfo")

      if row = invalid
        m.log.verbose(" updateRowContentInfo cannot set content on invalid row")
        return false
      end if

      isChanged = false
      oldRowContentInfo = m.getRowContentInfoForRow(row)
      m.removeRowContentInfo(oldRowContentInfo)
      newRowContentInfo = m.getNewRowContentInfo(row, content)

      isChanged = m.processRowContentChanges(oldRowContentInfo, newRowContentInfo, result)
      ' ? " PROCESS ROW CONTENT CHANGES isChanged " isChanged " isForcingUpdateAll " m.isForcingUpdateAll
      return isChanged
    end function

    private function getRowContentInfoForRow(row as mc.types.node) as sl.RowContentInfo
      content = row.content
      if content <> invalid
        return m.rowContentInfoByContentId[content.id]
      end if
      return invalid
    end function

    private function removeRowContentInfo(rowContentInfo as sl.RowContentInfo)
      if rowContentInfo <> invalid
        m.rowContentInfoByContentId.delete(rowContentInfo.id)
      end if
    end function

    private function getNewRowContentInfo(row as mc.types.node, content as mc.types.node) as sl.RowContentInfo
      if content <> invalid
        ' store pertinent info about the content a given row
        newRowContentInfo = {
          id: content.id
          version: content.version
          isHidden: content.isHidden
          isFocusEnabled: content.isFocusEnabled
          row: row
        }

        m.rowContentInfoByContentId[content.id] = newRowContentInfo
        return newRowContentInfo
      end if
      return invalid
    end function

    private function processRowContentChanges(oldRowContentInfo as sl.ListRowContentInfo, newRowContentInfo as sl.ListRowContentInfo, result as sl.ListChangeResult) as boolean
      isChanged = false
      if oldRowContentInfo <> invalid and newRowContentInfo = invalid
        m.log.verbose("updateRowContentInfo - removing old content")

        isChanged = true
        ' m.toggleRowContentObserver(false, oldRowContentInfo.row)
        if result <> invalid
          result.isLayoutRequired = true
        end if
      else if oldRowContentInfo = invalid and newRowContentInfo <> invalid
        m.log.verbose("updateRowContentInfo - adding new content")

        isChanged = true
        if result <> invalid
          result.isLayoutRequired = true
        end if
      else if oldRowContentInfo <> invalid and newRowContentInfo <> invalid
        m.log.verbose("updateRowContentInfo - old & newContent info not invalid. lets compare", oldRowContentInfo.index, oldRowContentInfo.version, newRowContentInfo.version)

        ' If the row is still using some Content, and we are also passing a Content. check for differences in version, which indicates changes.
        isChanged = m.isForcingUpdateAll or oldRowContentInfo.version <> newRowContentInfo.version or m.changedRowsById.doesExist(oldRowContentInfo.id)
        ' Check if there is a difference in the focus or hidden state
        if oldRowContentInfo.isHidden <> newRowContentInfo.isHidden
          ' Hidden state has changed, so the list needs laying out again.
          m.log.verbose("updateRowContentInfo - isHidden changed")
          if result <> invalid
            result.isLayoutRequired = true
          end if
          isChanged = true
        end if

        if oldRowContentInfo.isFocusEnabled <> newRowContentInfo.isFocusEnabled
          ' the row has changed whether it is focusable or not
          m.log.verbose("updateRowContentInfo - isFocusEnabled changed")
          if result <> invalid
            result.isFocusChangeRequired = true
          end if
          isChanged = true
        end if
      end if

      return isChanged
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Content Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onListContentItemsChange(changes as mc.types.array)
      m.log.info("The list content items have changed")
      m.focusIndicatorManager@.cancelFlowFocus()
      m.viewManager.onContentItemsChange(changes)
      m.focusIndicatorManager@.cancelFlowFocus()
      m.viewManager.isScrolling = false
      m.itemScroller.isDoingFlowFocus = false
      m.log.info("previous focus ", m.itemScroller.previousFocusedRow, m.itemScroller.previousFocusedIndex)

    end function

    private function updateListContentIfRequired(result as sl.ListChangeResult)
      m.log.info("processing list changes")

      'm.log.increaseIndent()Indent()
      currentFocusSettings = m.focusIndicatorManager@.getCurrentFocusSettings()
      m.log.verbose("LCM processing list changes>>>>>>>>>>>>>>>")
      if currentFocusSettings <> invalid
        m.log.verbose(" current focus settings ", currentFocusSettings.rowIndex, " ICI ", currentFocusSettings.cellIndex)
      end if

      m.log.verbose(" RI ", m.listNode.focusedRowIndex, " CI ", m.listNode.focusedCellIndex)
      if result.isLayoutRequired
        m.focusIndicatorManager@.cancelFlowFocus()
        m.viewManager.isScrolling = false
        m.itemScroller.isDoingFlowFocus = false

        m.log.info("the list needs to update it's layout as a result of these changes")
        'm.log.increaseIndent()Indent()
        m.viewManager.isUpdating = true
        m.viewManager.createRenderers(m.content, true)
        m.viewManager.forceUpdateLayout(false)
        m.itemScroller.reset(false)

        ' m.itemScroller.processChanges([])

        'this move allows us to render anything, and clean up renderers
        m.list.moveToRowItemIndex(m.listNode.focusedRowIndex, m.listNode.focusedCellIndex, false)
        'm.log.decreaseIndent()
        m.log.verbose(" LCM PROCESSING END<<<<<<<<<<<<<<<<<<<<<<<<")
      end if
      'm.log.decreaseIndent()
    end function

    private function setListRendering(rendering as boolean)
      m.log.info("setting listRendering to", rendering)
      ' ? " SETTING CONTENT RENDERING!!!! " rendering
      m.focusIndicatorManager._isContentUpdating = rendering
      if not rendering and not m.list.contentGroup.visible
        m.list.contentGroup.visible = true
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Content change observation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'we observe changes on the main content, and rows, and set isChanged on them
    'to indicate a change is required.

    private function toggleContentObserver(active as mc.types.node)
      ? " TOGGLING CONTENT OBSERVER " active

      if m.content <> invalid
        m.unobserve(m.content.change, m.onContentChange)
        if active
          m.observe(m.content.change, m.onContentChange, "both")
        end if
      end if
    end function

    private function scheduleDelayedUpdate()
      ? " SCHEDULE 1"

      if m.updateTimer = invalid and m.isUpdateEnabled
        ? " SCHEDULE 2"
        m.log.verbose("triggering delayed update")

        m.updateTimer = m.setTimeout(m.onDelayedUpdateTimer)
      end if
    end function

    private function onDelayedUpdateTimer()
      m.log.info("delayed update timer is fired. Going to process pending updates")
      m.updateTimer = invalid
      ? " UPDATE TIMER FIRED"
      m.synchronizeContent()
    end function

    private function toggleRowContentObserver(rowContent as mc.types.node, active as mc.types.node)
      if rowContent <> invalid
        m.unobserve(rowContent.change, m.onRowContentChange)
        if active
          m.observe(rowContent.change, m.onRowContentChange, "both")
        end if
      end if
    end function

    private function onRowContentChange(change as mc.types.assocarray, rowContent as mc.types.node)
      ? " ROW CONTENT HAS CHANGE " sc.dv(rowContent)
      m.changedRowsById[rowContent.id] = true
      rowContent.version++
      m.scheduleDelayedUpdate()
    end function

    private changedRowsById = {}
    private function onContentChange(change as mc.types.assocarray, content as mc.types.node)
      ? " CONTENT HAS CHANGE " sc.dv(content)
      m.pendingUpdates.push(change)
      m.scheduleDelayedUpdate()
    end function

  end class
end namespace
