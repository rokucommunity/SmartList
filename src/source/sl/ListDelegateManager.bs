import "pkg:/source/lib/BaseClass.bs"

namespace sl

  class ListDelegateManager extends sc.BaseClass
    public listDelegate as mc.types.node
    public isActive = true
    public isNotifyingListDelegate = true

    private list as mc.types.node
    private cellDelegateFunctionMap = {
      "willGainFocus": "onCellWillGainFocus"
      "willLoseFocus": "onCellWillLoseFocus"
      "didGainFocus": "onCellDidGainFocus"
      "didLoseFocus": "onCellDidLoseFocus"
      "gainingFocus": "onCellGainingFocus"
      "losingFocus": "onCellLosingFocus"
    }
    private componentFunctionMap = {
      "willGainFocus": "onWillGainFocus"
      "willLoseFocus": "onWillLoseFocus"
      "didGainFocus": "onDidGainFocus"
      "didLoseFocus": "onDidLoseFocus"
      "gainingFocus": "onGainingFocus"
      "losingFocus": "onLosingFocus"
    }

    private rowDelegateFunctionMap = {
      "willGainFocus": "onRowWillGainFocus"
      "willLoseFocus": "onRowWillLoseFocus"
      "didGainFocus": "onRowDidGainFocus"
      "didLoseFocus": "onRowDidLoseFocus"
      "gainingFocus": "onRowGainingFocus"
      "losingFocus": "onRowLosingFocus"
    }


    function new(list as mc.types.node)
      super("ListDelegateManager")
      m.list = list
    end function

    function callCellDelegateMethod(eventName as string, event as mc.types.assocarray) as void
      if not m.isActive
        m.log.info(" ****** DELEGATE MANAGER NOT ACTIVE ********")
        ' ? " *********************** DELEGATE MANAGER NOT ACTIVE"
        return
      end if
      delegateFunctionName = m.cellDelegateFunctionMap[eventName]
      cellFunctionName = m.componentFunctionMap[eventName]
      if delegateFunctionName = invalid
        m.log.error("Unknown cell event ", eventName)
        return
      end if

      if delegateFunctionName = "onCellGainingFocus" or delegateFunctionName = "onCellLosingFocus"
        event.cell@._apply(cellFunctionName, [{
          direction: event.direction
          fraction: event.fraction
        }], false)
        if m.isNotifyingListDelegate
          m.listDelegate@._apply(delegateFunctionName, [{
            rowIndex: event.rowIndex
            cellIndex: event.index
            direction: event.direction
            fraction: event.fraction
          }], false)
        end if

      else
        event.cell@._apply(cellFunctionName, [{
          direction: event.direction
        }])
        if m.isNotifyingListDelegate
          m.listDelegate@._apply(delegateFunctionName, [{
            rowIndex: event.rowIndex
            cellIndex: event.index
            direction: event.direction
          }], false)
        end if
      end if
    end function

    function callRowDelegateMethod(eventName as string, event as mc.types.assocarray) as void
      if not m.isActive
        m.log.info(" ****** DELEGATE MANAGER NOT ACTIVE ********")
        ' ? " *********************** DELEGATE MANAGER NOT ACTIVE"
        return
      end if

      delegateFunctionName = m.rowDelegateFunctionMap[eventName]
      rowFunctionName = m.componentFunctionMap[eventName]
      if delegateFunctionName = invalid
        m.log.error("Unknown row event ", eventName)
        return
      end if

      if delegateFunctionName = "onRowGainingFocus" or delegateFunctionName = "onRowLosingFocus"
        event.row@._apply(rowFunctionName, [{
          subRowIndex: event.subRowIndex
          direction: event.direction
          fraction: event.fraction
        }], false)
        if m.isNotifyingListDelegate
          m.listDelegate@._apply(delegateFunctionName, [{
            rowIndex: event.rowIndex
            subRowIndex: event.index
            direction: event.direction
            fraction: event.fraction
          }], false)
        end if
      else
        event.row@._apply(rowFunctionName, [{
          subRowIndex: event.subRowIndex
          direction: event.direction
        }], false)
        if m.isNotifyingListDelegate
          m.listDelegate@._apply(delegateFunctionName, [{
            rowIndex: event.rowIndex
            subRowIndex: event.index
            direction: event.direction
            fraction: event.fraction
          }], false)
        end if
      end if

    end function

    function callCellDelegateMethodOnList(eventName as string, event as mc.types.assocarray) as void
      delegateFunctionName = m.cellDelegateFunctionMap[eventName]
      if m.listDelegate = invalid
        return
      end if

      if delegateFunctionName = invalid
        m.log.error("Unknown cell event ", eventName)
        return
      end if

      if delegateFunctionName = "onCellGainingFocus" or delegateFunctionName = "onCellLosingFocus"
        m.log.error("unsupported method", delegateFunctionName)
      else
        m.listDelegate@._apply(delegateFunctionName, [{
          rowIndex: event.rowIndex
          cellIndex: event.index
          direction: event.direction
        }], false)
      end if
    end function

    function callRowDelegateMethodOnList(eventName as string, event as mc.types.assocarray) as void
      delegateFunctionName = m.rowDelegateFunctionMap[eventName]
      if m.listDelegate = invalid
        return
      end if

      if delegateFunctionName = invalid
        m.log.error("Unknown row event ", eventName)
        return
      end if
      if delegateFunctionName = "onRowGainingFocus" or delegateFunctionName = "onRowLosingFocus"

        m.log.error("unsupported method", delegateFunctionName)
      else
        m.listDelegate@._apply(delegateFunctionName, [{
          rowIndex: event.rowIndex
          subRowIndex: event.subRowIndex
          direction: event.direction
        }], false)
      end if
    end function
  end class

end namespace
