import "pkg:/source/sl/ListItemScroller.bs"
import "pkg:/source/sl/ListItemViewManager.bs"
import "pkg:/source/sl/ListMixin.bs"
import "pkg:/source/lib/BaseView.bs"
import "pkg:/source/lib/Animation.bs"
import "pkg:/source/sl/FocusIndicatorConfig.bs"
import "pkg:/source/sl/CellInfo.bs"
import "pkg:/source/sl/ItemFocusManager.bs"

namespace sl
  @node("sl_FocusIndicatorManager", "sv_BaseView")
  class FocusIndicatorManager extends sv.BaseView

    @alwaysnotify
    @observer("onIsHiddenChange")
    public isHidden = true
    public list as sc.types.node
    public isFocusing = false
    public _isContentUpdating = false

    'TODO - revisit this
    @alwaysnotify
    @observer("onActiveScreenPosChange")
    public activeScreenPos = 0

    @alwaysnotify
    @observer("onNextScreenPosChange")
    public nextScreenPos = 0

    public focusedFraction = 0.0

    private nextFocusIndex as sc.types.array

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Internal event tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public isDoingFlowFocus = false
    public focusScreenPosition = [0, 0]
    public listIsMoving = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private focusPoint as sc.types.node
    private focusIndicator as sc.types.node
    private activeFocusView as sc.types.node
    private nextFocusView as sc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Animations
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private focusPointAnim
    private _list as sc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ State
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private shouldShowIndicator = false
    private isIndicatorOnTop = true
    private direction = 0

    private flowFocusDelegate as sc.types.node

    private nextConfig as object

    private nextFocusSettings as sc.types.node
    private previousFocusSettings as sc.types.node
    private previousSize = [0, 0]
    private previousTranslation = [0, 0]
    private rowHasIndicator = true
    private isFocusSettingsChangePending = false
    private minFocusChangeFraction = 0.5
    private isFocusedOnRow = false

    private manualMode = false
    private enabled = false

    'bs:disable-next-line
    private itemFocusManager = new sl.ItemFocusManager("FocusIndicatorManager", m)

    function new()
      super("sl_FocusIndicatorManager")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.createAnims()
      m._list = m.list
      m.itemFocusManager.setList(m._list)
    end function

    private function createViews()
      'TODO - might still end up needing this... depends on how floating focus lands
      m.focusIndicator = m.createSGNode("mv_Poster", m.top, `focusIndicator_${rnd(10000)}`, {
        blendColor: "#ffffff"
        uri: "pkg:/images/input-focusrect.9.png"
        visible: false
      })
      m.focusPoint = m.createSGNode("mv_Rectangle", m.top, "focusPoint", {
        color: "#ff0000"
        size: [20, 20]
        visible: false
      })
      m.activeFocusView = m.createSGNode("mv_Rectangle", m.top, "activeFocusView", {
        color: "#00ff00"
        size: [20, 20]
        visible: false
      })
      m.nextFocusView = m.createSGNode("mv_Rectangle", m.top, "nextFocusView", {
        color: "#ff0000"
        size: [20, 20]
        visible: false
      })
    end function

    private function createAnims()
      m.focusPointAnim = new sv.animations.Move(m.focusPoint, 0.2, [0, 0], [0, 0])
      m.focusPointAnim.observeFraction(m.onFlowFocusFractionChange, m)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ FocusManager Proxy
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function setNextFocusIndicatorConfig(focusIndicatorConfig as sl.FocusIndicatorConfig) as void

      ' ? " SNIC 111"
      if not m.isActive()
        return
      end if

      m.log.verbose("setNextFocusIndicatorConfig ")
      ' ? " SNIC 222"
      if focusIndicatorConfig <> invalid
        m.log.verbose("[[ Next FIC is: R:", focusIndicatorConfig.rowIndex, " C:", focusIndicatorConfig.cellIndex, " ROW:", sc.dv(focusIndicatorConfig.row), " CELL:", sc.dv(focusIndicatorConfig.cell))
      else
        m.log.verbose(" next config INVALID ")
      end if
      ' ? " SNIC 333"

      if m.isSameConfig(focusIndicatorConfig)
        m.log.verbose(" is same")
        ' ? " SNIC 444"
        return
      end if
      m.log.verbose(" SETTING LAST MOVE FRACTION 0 SET NEXT ")
      m.lastMoveFraction = 0
      m.preprareNextFocusConfig(focusIndicatorConfig)
      ' ? " SNIC 555"
      m.itemFocusManager.setNextFocusIndicatorConfig(focusIndicatorConfig)
    end function

    private function isSameConfig(config as sl.FocusIndicatorConfig) as boolean
      if m.nextConfig <> invalid and config <> invalid
        return m.nextConfig.cellIndex = config.cellIndex and m.nextConfig.rowIndex = config.rowIndex and m.nextConfig.direction = config.direction
      end if
      return false
    end function

    function onFocusAnimationUpdate(fraction as float) as void
      if not m.isActive()
        return
      end if
      m.itemFocusManager.onFocusAnimationUpdate(fraction)
    end function

    function completeFocusNow(force = false as boolean) as void
      if not m.isActive()
        return
      end if

      m.log.info("completing focus right now!")
      if force = true
        m.itemFocusManager.didStart = true
        m.itemFocusManager.didFinish = false
      end if
      m.itemFocusManager.onFocusAnimationUpdate(1)
    end function

    function setEnabled(enabled as boolean)
      m.log.info("setting focus enabled", enabled)
      m.enabled = enabled
    end function

    function setIsFocusing(isFocusing as boolean)
      m.log.info("setting is focusing", isFocusing)
      m.isFocusing = isFocusing
    end function

    function setDelegateCallbacksEnabled(listDelegateEnabled as boolean)
      m.log.info("setting callbacks enabled to", listDelegateEnabled)
      m.itemFocusManager.isNotifyingListDelegate = listDelegateEnabled
    end function

    function setDelegateManagerEnabled(enabled as boolean)
      m.log.info("setting delegateManager notifier enabled to", enabled)
      m.itemFocusManager.delegateManager.isActive = enabled
    end function

    function reset()
      m.log.info("resetting item focus manager, so that it can get all it's delegates in the right state")
      m.itemFocusManager.reset()
    end function

    function sendManualDelegateRowMessage(method as string, event as sc.types.assocarray)
      m.itemFocusManager.delegateManager.callRowDelegateMethodOnList(method, event)
    end function

    function sendManualDelegateCellMessage(method as string, event as sc.types.assocarray)
      m.itemFocusManager.delegateManager.callCellDelegateMethodOnList(method, event)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function setFocusComplete(focusIndicatorConfig as sl.FocusIndicatorConfig) as void
      ' ? " SET FOCUS COMPLETE"
      if not m.isActive()
        return
      end if

      m.log.verbose(" FOCUS COMPLETE next indices", focusIndicatorConfig.rowIndex, ", ", focusIndicatorConfig.cellIndex)
      ' ? " SET INDICES AFTER COMPLETE " focusIndicatorConfig.rowIndex ", " focusIndicatorConfig.cellIndex
      m._list@._setIndices(focusIndicatorConfig.rowIndex, focusIndicatorConfig.cellIndex)
      'We must be already prepared
      m.applyFocusSettings(true)
      m.moveFocusIndicatorToTargetPosition(1)
      m.setSystemFocusOnRenderer()
    end function

    public function setManualFocusIndicatorMode(active as boolean)
      m.manualMode = active
      if not active
        m.applyFocusSettings(true)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onIsHiddenChange(isHidden as boolean)
      m.log.verbose("on isHidden change ", m.isHidden, " should show ", m.shouldShowIndicator)
      if not m.manualMode
        m.focusIndicator.visible = m.shouldShowIndicator and not m.isHidden
      end if
    end function

    private function onActiveScreenPosChange(y as integer) as void
      if not m.manualMode
        m.activeFocusView.translation = [200, y]
      end if
    end function

    private function onNextScreenPosChange(y as integer) as void
      if not m.manualMode
        m.nextFocusView.translation = [220, y]
      end if
    end function

    public function setFocusedFraction(fraction as float) as void
      ' ? " SET FOCUSED FRACTIN " fraction
      ' ? " SFF AA"
      if not m.isActive()
        ' ? " SFF BBB"
        return
      end if

      m.log.verbose("ON ROW Fraction CHANGE", fraction, " ", m.isDoingFlowFocus)
      m._list.focusedFraction = fraction

      ' ? " SFF CCC"
      if m.isDoingFlowFocus
        'flow focus callbacks will handle this
        ' ? " SFF DDD"
        return
      end if

      if fraction = 1
        ' ? " SFF EEE FINISHED"
        m.applyFocusSettings(true)
      else if m.isFocusSettingsChangePending and fraction > m.minFocusChangeFraction
        ' ? " SFF FFF"
        m.applyFocusSettings(false)
      end if

      ' ? " SFF GGG"
      m.moveFocusIndicatorToTargetPosition(fraction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus settings Managements
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function preprareNextFocusConfig(focusIndicatorConfig as sl.FocusIndicatorConfig) as void
      if m._list.state = "rendering" or m._list.content = invalid
        return
      end if

      m.nextConfig = focusIndicatorConfig

      if m.nextConfig = invalid
        m.log.info("nextConfig is invalid - hiding")

        m.focusIndicator.visible = false
        m.shouldShowIndicator = false
        m.rowHasIndicator = false
        m.direction = 0
        return
      end if

      m.log.verbose(" SET CONFIG TO ", m.nextconfig.rowIndex, " ", m.nextConfig.cellIndex)
      m.log.verbose(" SET CONFIG TO ", m.nextconfig.rowIndex, " ", m.nextConfig.cellIndex)

      m.setActiveFocusSettings(m.nextConfig.settings)

      m.log.verbose(">>> NEXT FOCUS STYLE ", sc.getPath(m.nextFocusSettings, "feedbackStyle"))
      m.log.verbose(">>> NEXT HIDDEN ", sc.getPath(m.nextConfig, "isHidden"))
      if m.nextFocusSettings = invalid or m.nextFocusSettings.feedbackStyle = "none" or m.nextConfig.isHidden
        m.log.verbose(">>> HIDE INDICATOR")
        m.rowHasIndicator = false
        m.shouldShowIndicator = false
        m.focusIndicator.visible = false
      else if m.previousFocusSettings <> invalid and (m.previousFocusSettings.feedbackStyle = "none" or (m.previousFocusSettings.feedbackStyle <> "none" and m.previousFocusSettings.feedbackStyle <> m.nextFocusSettings.feedbackStyle))
        m.focusIndicator.visible = false
        m.shouldShowIndicator = false
      else if m.isHidden
        m.focusIndicator.visible = false
        m.shouldShowIndicator = false
      else
        m.rowHasIndicator = true
      end if

      m.isFocusSettingsChangePending = true
    end function

    function getCurrentFocusSettings()
      return m.nextConfig
    end function

    private function setActiveFocusSettings(newSettings as sc.types.node)
      m.previousFocusSettings = m.nextFocusSettings
      m.nextFocusSettings = newSettings
      m.previousSize = m.focusIndicator.size
      m.previousTranslation = m.focusIndicator.translation
      m.focusScreenPosition = m.nextConfig.indicatorTranslation
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Moving/Applying focus settings
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    ' applies changes that affect the focus indicators appearance, like color, image, vis
    ' @params {node} focusSettings - settings to use when applying
    private function applyFocusSettings(isFinal as boolean) as void
      ' ? " APPLY FOCUS SETTINGS final? " isFinal
      m.setIsFocusing(not isFinal)

      m.shouldShowIndicator = false

      m.log.verbose(">>applyFocusSettings")
      if m.nextFocusSettings = invalid or m.nextConfig = invalid
        return
      end if
      m.log.verbose("-------------isFinal ", isFinal, " ", sc.getPath(m.previousFocusSettings, "feedbackStyle"), " NEXT ", sc.getPath(m.nextFocusSettings, "feedbackStyle"))
      'note - we don't show the focus indicator till we're in place, ifE the last row was hidden
      nextHidden = m.nextConfig.isHidden = true or m.nextFocusSettings.feedbackStyle = "none"
      previousHidden = (m.previousFocusSettings = invalid or m.previousFocusSettings.feedbackStyle = "none" or not m.rowHasIndicator)
      m.log.verbose(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
      m.log.verbose(nextHidden, " ", previousHidden)
      if nextHidden or (not isFinal and previousHidden)
        m.rowHasIndicator = false
        m.focusIndicator.visible = false
      else
        m.rowHasIndicator = true
        m.log.verbose("APPLY FOCUS SETTINGS VIS")
        if not m.focusIndicator.visible and not m.isHidden
          m.focusIndicator.visible = not m.isHidden
        end if
        m.shouldShowIndicator = true

        if m.isIndicatorOnTop and m.nextFocusSettings.feedbackStyle = "underneath"
          m._list.insertChild(m.focusIndicator, 0)
          m.isIndicatorOnTop = false
        else if not m.isHidden and m.nextFocusSettings.feedbackStyle = "onTop"
          m._list.appendChild(m.focusIndicator)
          m.isIndicatorOnTop = true
        end if

      end if

      if not m.manualMode
        m.focusIndicator.blendColor = m.nextFocusSettings.feedbackColor
        m.focusIndicator.uri = m.nextFocusSettings.feedbackUri
      end if

      m.isFocusSettingsChangePending = false
    end function

    'this prevents the indicator focus jumping back, which can happen due to screenPos movements
    private lastMoveFraction = 0

    private function moveFocusIndicatorToTargetPosition(fraction as float) as void
      m.log.verbose(" MOVE FOCUS INDICATOR TO POS ", fraction)
      if m.nextConfig = invalid
        return
      end if

      if fraction < m.lastMoveFraction
        return
      end if

      m.lastMoveFraction = fraction

      if fraction = 1
        translation = m.nextConfig.indicatorTranslation
        size = m.nextConfig.indicatorSize
        ' m.focusScreenPosition = m.nextConfig.indicatorTranslation
        m.log.verbose("ACTIVE FOCUS POS IS NOW ", formatJson(m.nextConfig.indicatorTranslation))
      else
        translation = sc.interpolateArray(m.previousTranslation, m.nextConfig.indicatorTranslation, fraction)
        size = sc.interpolateArray(m.previousSize, m.nextConfig.indicatorSize, fraction)
      end if

      if not m.manualMode
        m.log.verbose("was in position", formatJson(m.previousTranslation), "moving to ", formatJson(m.nextConfig.indicatorTranslation))
        m.focusIndicator.translation = translation
        m.focusIndicator.size = size
      else
        m.log.verbose("not animating. focus indicator in manual mode")
      end if
      m.log.verbose("moveFocusIndicatorToTargetPosition ", fraction, " ", m.nextConfig.indicatorTranslation[1])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Flow Focus Support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function startFlowFocus(focusIndicatorConfig as sl.FocusIndicatorConfig, speed as float, delegate as sc.types.node) as void

      if not m.isActive()
        return
      end if

      m.log.info("starting flow focus ")
      m.log.verbose("START FLOW FOCUS ", m.__classname)

      m.isDoingFlowFocus = true
      m.nextConfig = focusIndicatorConfig
      m.log.verbose(" SET CONFIG TO ", m.nextconfig.rowIndex, " ", m.nextConfig.cellIndex)
      m.log.verbose(" SETTING LAST MOVE FRACTION 0 START FLOW")
      m.lastMoveFraction = 0
      m.setActiveFocusSettings(m.nextConfig.settings)
      ' m.focusScreenPosition = m.nextConfig.indicatorTranslation

      'TODO - finish animation if existing delegate
      'HACK! TODO - get the correct offset for the list's location
      m.nextConfig.indicatorTranslation[1] = m.nextConfig.indicatorTranslation[1] - m._list.translation[1]
      m.nextConfig.indicatorTranslation[0] = m.nextConfig.indicatorTranslation[0] - m._list.translation[0]

      speed *= 2
      m.flowFocusDelegate = delegate
      m.log.verbose(">>>> ANIMATE FLOW FOCUS ", speed)
      m.focusPointAnim.setFromToValue(m.focusIndicator.translation, m.nextConfig.indicatorTranslation)
      m.focusPointAnim.animateTo(m.nextConfig.indicatorTranslation, speed)
      m.setIsFocusing(true)
      m.focusPointAnim.start()
    end function

    public function cancelFlowFocus() as void
      if not m.isActive()
        return
      end if

      m.setIsFocusing(false)
      m.flowFocusDelegate = invalid
      m.isDoingFlowFocus = false
      m.log.verbose(" SETTING LAST MOVE FRACTION 0 CANCEL FLOW")
      m.lastMoveFraction = 0
      m.focusPointAnim.pause()
      m.focusPoint.translation = [0, 0]
    end function

    private function onFlowFocusFractionChange(fraction as float)
      m.log.verbose(" ON FLOW FRACTION CHANGE ", fraction)
      m.moveFocusIndicatorToTargetPosition(fraction)
      if m.isFocusSettingsChangePending and fraction > m.minFocusChangeFraction
        m.applyFocusSettings(false)
      end if

      if m.flowFocusDelegate <> invalid
        m.log.verbose(" telling delegate ", sc.dv(m.flowFocusDelegate))
        m.flowFocusDelegate@.onFlowFocusFraction(fraction)
      else
        m.log.verbose(" NO FOCUS")
      end if

      if fraction = 1
        m.applyFocusSettings(true)
        m.isDoingFlowFocus = false
        ' else
        ' m.onFocusAnimationUpdate(fraction)
      end if
    end function

    private function getRowRenderer(index as integer)
      return m._list@.getRowRenderer(index)
    end function

    private function getCellRenderer(rowIndex as integer, cellIndex as integer)
      return m._list@.getCellRenderer(rowIndex, cellIndex)
    end function

    'set the actual ROKU focus on an item
    private function setSystemFocusOnRenderer(forceFocus = false as boolean) as void
      focusTarget = m._list

      'TODO - consider if the willDoSystemFocus call should be overridden
      m.isFocusedOnRow = m._list.isChildFocused or m.list.isFocused
      if m.nextConfig <> invalid and (forceFocus or m.nextConfig.willDoSystemFocus = true)
        m.log.verbose(" SETTING SYSTEM FOCUS ON ", sc.dv(m.nextConfig.row))

        focusTarget = m.nextConfig.row
        if m.isFocusedOnRow and focusTarget <> invalid
          sv.setFocus(focusTarget)
        else
          m.log.warn("not setting focus on", sc.dv(focusTarget), "owner child focused?", m._list.isChildFocused, "owner focused?", m.list.isFocused)
        end if
      end if
    end function

    function setFocusedOnRow(focused as boolean)
      m.log.verbose(" setFocusedOnRow ", focused)
      m.isFocusedOnRow = focused
      if focused
        m.setSystemFocusOnRenderer(true)
      end if
    end function

    function isActive() as boolean
      if not m.enabled
        m.log.info("ignoring call while disabled")
        return false
      else if m.list._isRenderingUpdate
        m.log.info("ignoring call while list is rendering")
        return false
      end if
      return true
    end function

  end class
end namespace
