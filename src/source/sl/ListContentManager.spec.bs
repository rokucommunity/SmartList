import "pkg:/source/tests/BaseTestSuite.spec.bs"
import "pkg:/source/sl/ListContentManager.bs"

namespace tests

  @suite("ListContentManager tests")
  class ListContentManagerTests extends tests.BaseTestSuite

    private manager as sl.ListContentManager

    private list
    private viewManager
    private itemScroller
    private focusIndicatorManager

    protected override function beforeEach()
      super.beforeEach()
      m.list = { "id": "list" }
      m.viewManager = { "id": "viewManager" }
      m.itemScroller = { "id": "itemScroller" }
      m.focusIndicatorManager = { "id": "focusIndicatorManager" }

      m.manager = new sl.ListContentManager(m.list, m.viewManager, m.itemScroller, m.focusIndicatorManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("updateRowContentInfo")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("does nothing if row is invalid")
    function _()

      row = invalid
      content = { "id": "content" }
      result = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }
      m.assertFalse(m.manager.updateRowContentInfo(row, content, result))
    end function

    @it("does nothing if row is invalid, and there is no result")
    function _()
      row = invalid
      content = { "id": "content" }

      m.assertFalse(m.manager.updateRowContentInfo(row, content, invalid))
    end function

    @it("returns isChanged value returned from processRowContentChanges")
    @params(false)
    @params(true)
    function _(isChanged)
      content = { "id": "content" }
      row = { id: "row" }
      result = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }

      oldRowContentInfo = { "id": "oldRowContentInfo" }
      newRowContentInfo = { "id": "newRowContentInfo" }

      m.expectCalled(m.manager.getRowContentInfoForRow(row), oldRowContentInfo)
      m.expectCalled(m.manager.removeRowContentInfo(oldRowContentInfo))
      m.expectCalled(m.manager.getNewRowContentInfo(row, content), newRowContentInfo)
      m.expectCalled(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, result), isChanged)

      m.assertEqual(m.manager.updateRowContentInfo(row, content, result), isChanged)

    end function


    @it("returns isChanged value returned from processRowContentChanges, does not crash if there is no result")
    @params(false)
    @params(true)
    function _(isChanged)
      content = { "id": "content" }
      row = { id: "row" }

      oldRowContentInfo = { "id": "oldRowContentInfo" }
      newRowContentInfo = { "id": "newRowContentInfo" }

      m.expectCalled(m.manager.getRowContentInfoForRow(row), oldRowContentInfo)
      m.expectCalled(m.manager.removeRowContentInfo(oldRowContentInfo))
      m.expectCalled(m.manager.getNewRowContentInfo(row, content), newRowContentInfo)

      m.expectCalled(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, invalid), isChanged)


      m.assertEqual(m.manager.updateRowContentInfo(row, content, invalid), isChanged)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("removeRowContentInfo")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("does nothing if content is invalid")
    function _()

      m.manager.rowContentInfoByContentId = {}
      m.manager.removeRowContentInfo(invalid)
    end function

    @it("does nothing if content is not found in rowContentInfoByContentId dictionary")
    function _()

      m.manager.rowContentInfoByContentId = {
        "other": { id: "otherContentInfo" }
      }
      m.manager.removeRowContentInfo({ id: "contentInfo" })

      m.assertNotInvalid(m.manager.rowContentInfoByContentId["other"])
    end function

    @it("removes content info by content from rowContentInfoByContentId")
    function _()
      contentInfo = { id: "contentInfo" }
      m.manager.rowContentInfoByContentId = {
        "different": { id: "otherContentInfo" }
        "contentInfo": contentInfo
      }
      m.manager.removeRowContentInfo(contentInfo)

      m.assertInvalid(m.manager.rowContentInfoByContentId["contentInfo"])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getNewRowContentInfo")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("does nothing if new content is invalid")
    function _()
      row = { "id": "row" }
      content = invalid
      m.manager.rowContentInfoByContentId = {}

      m.manager.getNewRowContentInfo(row, content)

      m.assertEmpty(m.manager.rowContentInfoByContentId)
    end function


    @it("returns info if content is not invalid, and stores it in rowContentInfoByContentId dictionary")
    function _()
      row = { "id": "row" }
      content = {
        id: "content"
        version: 5
        isHidden: false
        isFocusEnabled: false
      }
      m.manager.rowContentInfoByContentId = {}

      contentInfo = m.manager.getNewRowContentInfo(row, content)

      m.assertEqual(m.manager.rowContentInfoByContentId["content"], contentInfo)

      m.assertEqual(contentInfo, {
        id: "content"
        version: 5
        isHidden: false
        isFocusEnabled: false
        row: row
      })

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("processRowContentChanges")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns true if new content is not invalid, and old content is invalid")
    function _()
      oldRowContentInfo = invalid
      newRowContentInfo = { id: "newContentInfo" }
      result = { "id": "result" }

      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, result))

      m.assertTrue(result.isLayoutRequired)
    end function

    @it("returns true if new content is not invalid, and old content is invalid, does not crash if no result is passed")
    function _()
      oldRowContentInfo = invalid
      newRowContentInfo = { id: "newContentInfo" }

      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, invalid))
    end function

    @it("returns true if new content is invalid, and old content is not invalid")
    function _()
      oldRowContentInfo = { id: "oldContentInfo" }
      newRowContentInfo = invalid

      result = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }

      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, result))

      m.assertTrue(result.isLayoutRequired)
    end function

    @it("returns true if the new content is invalid, and the old is not invalid, does not crash if no result is passed")
    function _()
      oldRowContentInfo = { id: "oldContentInfo" }
      newRowContentInfo = invalid

      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, invalid))
    end function

    @it("returns true old and new content 'focusEnabled' state is different")
    @params(false, true)
    @params(true, false)
    function _(oldFocusEnabled, newFocusEnabled)
      oldRowContentInfo = {
        id: "oldContentInfo"
        isFocusEnabled: oldFocusEnabled
      }

      newRowContentInfo = {
        id: "newContentInfo"
        isFocusEnabled: newFocusEnabled
      }

      result = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }

      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, result))

      m.assertTrue(result.isFocusChangeRequired)
    end function

    @it("returns true if old and new content 'focusEnabled' states are different, does not crash if no result is passed")
    @params(false, true)
    @params(true, false)
    function _(oldFocusEnabled, newFocusEnabled)
      oldRowContentInfo = {
        id: "oldContentInfo"
        isFocusEnabled: oldFocusEnabled
      }

      newRowContentInfo = {
        id: "newContentInfo"
        isFocusEnabled: newFocusEnabled
      }
      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, invalid))
    end function

    @it("returns true if old and new content 'hidden' states are different")
    @params(false, true)
    @params(true, false)
    function _(oldIsHidden, newIsHidden)
      oldRowContentInfo = {
        id: "oldContentInfo"
        isHidden: oldIsHidden
      }

      newRowContentInfo = {
        id: "newContentInfo"
        isHidden: newIsHidden
      }

      result = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }

      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, result))

      m.assertTrue(result.isLayoutRequired)
    end function

    @it("returns true if old and new content 'hidden' states are different, does not crash if no result is passed")
    @params(false, true)
    @params(true, false)
    function _(oldIsHidden, newIsHidden)
      oldRowContentInfo = {
        id: "oldContentInfo"
        isHidden: oldIsHidden
      }

      newRowContentInfo = {
        id: "newContentInfo"
        isHidden: newIsHidden
      }

      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, invalid))
    end function

    @it("returns true old and new 'isHidden' state is equal, but their versions and ids are different")
    @params(0, 1)
    @params(1, 2)
    function _(oldVersion, newVersion)
      oldRowContentInfo = {
        id: "oldContentInfo"
        isHidden: false
        version: oldVersion
      }
      newRowContentInfo = {
        id: "newContentInfo"
        isHidden: false
        version: newVersion
      }

      result = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }

      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, result))

      m.assertFalse(result.isFocusChangeRequired)
      m.assertFalse(result.isLayoutRequired)
    end function

    @it("returns true if old and new id and 'isHidden' state are equal, but their versions are different, does not crash if no result is passed")
    @params(0, 1)
    @params(1, 2)
    function _(oldVersion, newVersion)
      oldRowContentInfo = {
        id: "oldContentInfo"
        isHidden: false
        version: oldVersion
      }
      newRowContentInfo = {
        id: "newContentInfo"
        isHidden: false
        version: newVersion
      }

      m.assertTrue(m.manager.processRowContentChanges(oldRowContentInfo, newRowContentInfo, invalid))

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("scheduleDelayedUpdate")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("does nothing if there is a scheduled update timer")
    function _()
      m.manager.isUpdateEnabled = true
      m.manager.updateTimer = { "id": "updateTimer" }

      m.expectNotCalled(m.manager.setTimeout)

      m.manager.scheduleDelayedUpdate()
    end function


    @it("does nothing if there is update are disabled")
    function _()
      m.manager.isUpdateEnabled = false

      m.expectNotCalled(m.manager.setTimeout)

      m.manager.scheduleDelayedUpdate()
    end function

    @it("sets timer, if updates are enabled")
    function _()
      m.manager.isUpdateEnabled = true

      timer = { "id": "timer" }

      m.expectCalled(m.manager.setTimeout(m.manager.onDelayedUpdateTimer), timer)

      m.manager.scheduleDelayedUpdate()

      m.assertEqual(m.manager.updateTimer, timer)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("toggleContentObserver")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("does nothing if there is no content")
    @params(false)
    @params(true)
    function _(active)
      m.expectNotCalled(m.manager.unobserve)
      m.expectNotCalled(m.manager.observe)

      m.manager.content = invalid

      m.manager.toggleContentObserver(active)
    end function

    @it("unobserves when active is false`")
    function _()
      m.manager.content = { "id": "content" }

      m.expectCalled(m.manager.unobserve(m.manager.content.change, m.manager.onRowContentChange, "both"))
      m.expectNotCalled(m.manager.observe)

      m.manager.content = invalid

      m.manager.toggleContentObserver(false)
    end function

    @it("unobserves, and observes when active is true`")
    function _()
      m.manager.content = { "id": "content" }

      m.expectCalled(m.manager.unobserve(m.manager.content.change, m.manager.onRowContentChange, "both"))
      m.expectCalled(m.manager.observe(m.manager.content.change, m.manager.onRowContentChange, "both"))

      m.manager.content = invalid

      m.manager.toggleContentObserver(true)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onRowContentChange")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("stores row id, and schedules update")
    function _()

      a = { "id": "a" }
      b = { "id": "b" }

      m.expectCalled(m.manager.scheduleDelayedUpdate())

      m.manager.onRowContentChange({ id: "change" }, a)
      m.assertEqual(m.manager.changedRowsById, { a: true })

      m.expectCalled(m.manager.scheduleDelayedUpdate())

      m.manager.onRowContentChange({ id: "change" }, b)

      m.assertEqual(m.manager.changedRowsById, { a: true, b: true })
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onContentChange")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("stores row id, and schedules update")
    function _()

      content = { "id": "content" }
      m.manager.content = content

      m.expectCalled(m.manager.scheduleDelayedUpdate())

      m.manager.onContentChange({ id: "a" }, content)
      m.assertEqual(m.manager.pendingChanges, [{ id: "a" }])

      m.expectCalled(m.manager.scheduleDelayedUpdate())

      m.manager.onContentChange({ id: "b" }, content)

      m.assertEqual(m.manager.pendingChanges, [{ id: "a" }, { id: "b" }])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onDelayedUpdateTimer")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("calls synchronizeContent and resets tracking fields")
    function _()

      m.manager.pendingChanges = [{ "id": "a" }]
      m.manager.changedRowsById = { "a": true }

      m.expectCalled(m.manager.synchronizeContent())

      m.manager.onDelayedUpdateTimer()

      m.assertEmpty(m.manager.pendingChanges)
      m.assertEmpty(m.manager.changedRowsById)
    end function

  end class
end namespace
