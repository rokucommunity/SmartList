import "pkg:/source/sl/ItemViewManager.bs"
import "pkg:/source/sl/ListMixin.bs"
import "pkg:/source/sl/ListContentManager.bs"

namespace sl
  class ListItemViewManager extends sl.ItemViewManager

    private batchTimer as sc.types.node
    private visibleComponents = []

    private isUpdating = false
    private isShowingAllComps = false
    ' public componentBufferMode = "rendered"
    public componentBufferMode = "none"
    public contentManager as sl.ListContentManager

    public override function reset()
      m.log.info("resetting LIST. numItems: ", m.numberOfItems)

      if m.isRendering
        m.cancelBatching()
      end if

      if m.visibleComponents.count() > 0
        m.log.info("releasing", m.visibleComponents.count(), "list children")
        for each component in m.visibleComponents
          component.content = invalid
        end for
        m.componentPool@.releaseComponents(m.visibleComponents)
      end if
      m.renderersByContentId = {}

      super.reset()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ async row creation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private creationIndex = -1
    'sometimes we want to create all rows up front, for important screens
    'using async renderer creation allows us to do this without clogging up the devices's render thread
    private batchSize = 3
    private batchDelay = 3

    function new(list as sc.types.node, container as sc.types.node, minPos as integer, maxPos as integer, componentPool as sc.types.node)
      super("ListItemViewManager", list, container, componentPool, 1, minPos, maxPos)
    end function

    override function getRenderer(index as integer)
      return m.visibleComponents[index]
    end function

    private function cancelBatching()
      m.isRendering = false
      m.isUpdating = false
      'ensure that we catch any components if we were half way through a batch, so we can remove them
      allComponents = {}
      m.visibleComponents = []
      allComponents.append(m.previousRendereredByContentId)
      allComponents.append(m.renderersByContentId)
      for each id in allComponents
        m.visibleComponents.push(allComponents[id])
      end for
      m.cancelWaitTimer(m.batchTimer)
    end function

    override function createRenderers(content as sc.types.node, forceSync = false as boolean) as boolean

      m.owner._isRenderingUpdate = true
      m.log.verbose(">>> LIST CREATE RENDERERS _isRenderingUpdate", sc.dv(m.owner), m.owner._isRenderingUpdate)
      m.visibleComponents = []
      m.visibleItems = []
      m.updateRects()

      if content <> invalid
        m.creationIndex = -1
        m.previousRendereredByContentId = m.renderersByContentId
        m.renderersByContentId = {}
        m.reusedRenderers = []
        m.visibleComponents = []
        m.listSettings = content.listSettings
        if not forceSync and m.listSettings.rowCreationStrategy = "async" and not m.isUpdating
          m.log.verbose("creating renderers in async mode")
          m.batchSize = m.listSettings.rowCreationBatchSize
          m.batchDelay = m.listSettings.rowCreationBatchDelay
          m.owner.state = "rendering"
          isReady = false
          m.batchTimer = m.setTimeout(m.createRendererBatch, 0.15)
        else
          m.log.verbose("creating renderers in sync mode")
          m.batchSize = m.contentItems.count()
          isReady = true
          m.createRendererBatch()
        end if
        return isReady
      end if
      return false
    end function

    override function setIsScrolling(isScrolling as boolean, isLong as boolean, startIndex as integer) as void
      super.setIsScrolling(isScrolling, isLong, startIndex)
      ' ? " IS SCROLLING ON LIST?" isScrolling
      m.itemScroller.focusManager.listIsMoving = isScrolling
    end function

    protected override function onRenderersCreated()
      super.onRenderersCreated()
      m.log.info("Renderers created on list")

      if m.content <> invalid
        m.log.verbose("BATCHING: completed", m.contentItems.count(), "rows")
      else
        m.log.verbose("BATCHING: completed. no rows")
      end if
      m.tidyUpUnusedRenderers()
      if not m.isUpdating
        m.owner.state = "rendered"
        m.itemScroller.reset()
      else
        m.log.info("was updating, so not updating scroll position")
        'TODO - update the scrolling position if it was on a removed row
        m.isUpdating = false
      end if
      m.owner._isRenderingUpdate = false
    end function

    override function createRendererBatch() as void
      if m.content <> invalid
        index = 0
        m.log.verbose("BATCHING: creating", m.creationIndex, "to", m.creationIndex + m.batchSize)

        for i = 0 to m.batchSize
          m.log.increaseIndent()
          m.log.info("BEGIN CREATE ROW" + i.toStr())
          m.creationIndex++
          index = m.creationIndex
          if m.creationIndex >= m.contentItems.count()
            m.log.verbose("finished creating all renderers")

            m.onRenderersCreated()
            m.log.decreaseIndent()
            return
          end if
          rowContent = m.contentItems[index]
          settings = sl.listMixin.getRowSettings(m.content, rowContent)
          rect = m.rects[index]

          comp = m.previousRendereredByContentId[rowContent.id]
          if comp <> invalid
            ' m.log.info("using comp for the same row")
            m.log.verbose(" REUSING COMP FOR SAME ROW ", index)
            comp.index = index
            comp.translation = rect.translation
            comp.owner = m.owner

            if m.contentManager.isForcingUpdateAll
              ' ? " FORCING UPDATE ON ROW " i
              m.contentManager.setContentOnRow(comp, rowContent, true)
              'note - the content has to be set at this point, or it can't track its own changes
              comp.content = rowContent
            end if

            m.reusedRenderers.push(comp)
            m.previousRendereredByContentId.delete(rowContent.id)
            'TODO do I need to set renderState
          else
            m.log.verbose("creating row for this item")
            comp = m.createRow(rowContent, index, settings, rect)
          end if


          if comp <> invalid
            m.visibleComponents.push(comp)
            m.renderersByContentId[rowContent.id] = comp
          else
            m.log.error("could not create row for index ")
          end if
          m.visibleComponents.push(comp)
          index++
        end for
        if m.creationIndex < m.contentItems.count()
          m.log.verbose("BATCHING: progress: ", m.creationIndex, "of", m.contentItems.count(), "rows")

          m.setTimeout(m.createRendererBatch, 0.15)
        end if
      end if
      'm.log.decreaseIndent()
    end function

    function createRow(rowContent as sc.types.node, index as integer, settings as sc.types.node, rect as sc.types.assocarray)
      compName = settings.componentName <> invalid ? settings.componentName : "sl_HorizontalRow"
      'm.log.increaseIndent()Indent("CREATE ROW " + index.toStr() + " " + compName)
      'TODO - measure height to ascertain how many
      isRendered = index < 4
      ' isRendered = true
      row = m.componentPool@.getComponent(compName, 1)
      m.renderersByContentId[rowContent.id] = row

      row.setFields(rect)


      m.log.info("CREATING ROW ", index, " isRendered ", isRendered)
      state = {
        renderState: isRendered ? "rendered" : m.componentBufferMode
        owner: m.owner
        width: m.owner.width
        isInViewport: false
        ' isInViewport: isRendered
      }

      row.setFields(state)
      m.container.appendChild(row)
      m.log.info("appending row to container")

      if row.isInitialized
        m.log.info("RECYCLE EXISTING ROW", rowContent.title)

        m.contentManager.setContentOnRow(row, rowContent, true)
        'note - the content has to be set at this point, or it can't track its own changes
        row.content = rowContent
        m.log.verbose(">>>>>> isInViewPort", row.isInViewPort)


        m.log.verbose("row content is now", sc.dv(row.content))
      else
        m.log.info("CREATE NEW ROW", rowContent.title)
        'note - the content has to be set at this point, or it can't track its own changes
        row.content = rowContent
        row@._initialize(invalid)
        m.contentManager.setContentOnRow(row, rowContent, false)
      end if

      ' if isRendered
      '   m.log.info("row is rendered, so calling onDidEnter", rowContent.title)
      '   row@._apply("onDidEnter", [{ subRowIndex: 0, direction: 1, forceCellUpdate: true }], false)
      ' end if
      'm.log.decreaseIndent()
      return row
    end function

    override function updateLayout(fullUpdate = false as boolean)
      'm.log.increaseIndent()Indent("UPDATE LAYOUT")

      if fullUpdate
        m.log.verbose("full update - checking for changed types")
        for i = 0 to m.rects.count() - 1
          rect = m.rects[i]
          comp = m.visibleComponents[i]
          if comp <> invalid and comp.content <> invalid and comp.subType() <> comp.content.settings.componentName
            if comp.getParent() <> invalid
              m.log.verbose("removing comp from parent")
              comp.getParent().removeChild(comp)
            end if
            comp = m.createRow(comp.content, comp.index, comp.content.settings, rect)
            m.visibleComponents[i] = comp
            m.renderersByContentId[comp.id] = comp
          end if
        end for
      end if

      m.log.verbose("updating rectangles")

      m.updateRects()

      m.log.verbose("updating components")
      for i = 0 to m.rects.count() - 1
        rect = m.rects[i]
        comp = m.visibleComponents[i]
        if comp <> invalid
          comp.translation = rect.translation
          comp.visible = rect.visible
          if fullUpdate
            m.log.verbose(" >>>> DO FULL UPDATE on ", sc.dv(comp))
            comp@.forceUpdate(true, fullUpdate)
          end if
        end if
      end for

      'm.log.decreaseIndent()
    end function

    override function updateRects() as void
      m.log.verbose("updating rectangles on LIST")

      y = 0
      w = m.owner.width
      m.rects = []
      m.visibleItems = []
      m.visibleComponents = []

      if m.content = invalid
        ' ? " INVALID CONTENT"
        return
      end if

      'm.log.increaseIndent()Indent()
      for i = 0 to m.contentItems.count() - 1
        item = m.contentItems[i]
        settings = sl.listMixin.getRowSettings(m.content, item)
        visible = item.isHidden <> true and (not settings.isHiddenWhenEmpty or item.count() > 0)
        m.log.verbose(i, sc.dv(item), " VISIBLE ", visible, " L ", item.count(), " isHidden ", item.isHidden)

        if visible
          if settings.subType() = "sl_GridRowSettings"
            height = m.calculateGridRowHeight(item, settings)
          else
            height = m.calculateRowHeight(settings)
          end if
          screenPos = settings.screenPos

          translation = [0, y]
          yOffset = 0
          contentOffset = settings.contentOffset
          if contentOffset <> invalid
            translation[0] += contentOffset[0]
            yOffset = contentOffset[1]
            translation[1] += yOffset
          end if

          height += settings.space + yOffset
          if settings.peekNextPixels <> 0
            screenPos = 1080 - (height + settings.peekNextPixels)
            settings.screenPos = screenPos
          end if

          y += height
        else
          height = 0
          screenPos = 0
          translation = [0, 0]
          m.log.verbose("not visible")
        end if

        m.visibleItems.push(item)
        m.rects.push({
          translation: translation
          size: [w, height]
          index: i
          screenPos: screenPos
          visible: visible
        })
        comp = m.renderersByContentId[item.id]
        if comp <> invalid
          if comp.height = 0 or comp.height = -1
            comp.height = height
          end if
          m.visibleComponents.push(comp)
        end if
      end for
      'm.log.decreaseIndent()

      m.numberOfItems = m.visibleItems.count()
      m.numberOfVisibleItems = m.visibleComponents.count()
    end function

    override function getFocusSettings()
      return m.content.focusSettings
    end function

    ' @params{sl_RowSettings} settings for the current row
    private function calculateRowHeight(settings as sc.types.node) as integer
      height = 300
      if settings = invalid
        return height
      end if

      if settings.height <> -1
        height = settings.height
      else if settings.cellSettings <> invalid
        height = settings.cellSettings.size[1]
      end if

      if settings.headerSettings.position <> "none"
        height += settings.headerSettings.height
      end if
      return height
    end function

    private function calculateGridRowHeight(row as sc.types.node, settings as sc.types.node) as integer
      numItems = row.count()
      numCols = settings.numColumns
      numCols = numCols < 1 ? 1 : numCols
      numRows = sc.divideNumberToNearest(numItems, numCols)
      rowHeight = settings.rowHeight + settings.rowSpace
      height = numRows * rowHeight

      ' ? "+>+>+ GRID HEIGHT "; numItems ; "/" numCols ; " NR "; numRows ; " height " ; height
      if settings.headerSettings.position <> "none"
        height += settings.headerSettings.height
      end if
      return height
    end function

    override function onContentItemsChange()
      m.log.info("updating row renderers due to contents change")
      m.isUpdating = true
      m.createRenderers(m.content, true)
      ' m.itemScroller.processChanges(changes)
    end function

    override function isFlowFocusPossible(info as sl.CellInfo, direction as integer, activeScreenPos as integer)
      if info <> invalid and info.component <> invalid and info.component.subType() = "sl_GridRow"

        isFlowPossible = info.component@.isVerticalFlowFocusPossible(info, direction, activeScreenPos, m.container.translation[m.axes])
        ' ? "L>>>>>> GRID ROW " ; info.index ; " D " ; direction ; isFlowPossible
      else
        isFlowPossible = info.isFlowFocusPossible(m.container.translation[m.axes], m.maxPos, direction, m.axes)
      end if

      if not isFlowPossible and info.isFlowFocusAllowed
        'check on the renderer
        ' ? "Flow not possible based on component info - checking actual component " ; m.screenPos ; " NI "; info.index
        ' isFlowPossible = m.getIsOnScreen(info, activeScreenPos)
        isFlowPossible = m.getIsOnScreen(info, 0)
      end if
      ' end if

      return isFlowPossible
    end function

    public function getItemInfoForIndex(rowIndex as integer, cellIndex as integer)
    end function

    override function getIndexAtPosition(position as integer, direction as integer)
      p = abs(position)
      i = 0
      for i = 0 to m.cellInfos.count() - 1
        info = m.cellInfos[i]
        'the offset is already factored in
        itemPos = abs(info.getPosition(direction))
        ' itemPos = abs(info.getScrollOffset(direction))
        ' ? "i "; i ; " pos"; position ; " p "; p ; " ip " ; itemPos ; " INFO " ; info.index ; " c " ; sc.dv(info.component)
        if itemPos > p
          ' ? "+++++!!! MATCHED ITEM INDEX "; i - 1
          return sc.clamp(i - 1, 0, m.numberOfItems - 1)
        end if
      end for
      ' end ifk

      'we must be at the end! -return last item
      index = sc.clamp(i - 1, 0, m.numberOfItems - 1)
      ' ? "+++++!!! MATCHED ITEM INDEX "; index
      return index
    end function


    override function recalculateCellInfos() as void
      m.log.verbose(" LIST recalculateCellInfos!! ")
      m.cellInfos = []
      virtualIndex = 0
      'm.log.increaseIndent()Indent("recalculateCellInfos")
      for i = 0 to m.visibleItems.count() - 1
        item = m.visibleItems[i]
        settings = sl.listMixin.getRowSettings(m.content, item)
        if (item.isHidden = invalid or item.isHidden = false) and (item.isFocusEnabled = invalid or item.isFocusEnabled = true) and (not settings.isHiddenWhenEmpty or item.count() > 0)
          component = m.renderersByContentId[item.id]
          m.log.verbose("got component", sc.dv(component))

          if component <> invalid
            infos = component@.getRowInfos(true)

            contentIndex = component.index
            for subIndex = 0 to infos.count() - 1
              info = infos[subIndex]
              cellInfo = sl.CellInfoUtils.cellInfoFromAA(info)
              cellInfo.component = component
              cellInfo.contentIndex = contentIndex
              cellInfo.index = virtualIndex
              cellInfo.contentVersion = item.version
              cellInfo.id = item.id
              m.cellInfos.push(cellInfo)
              virtualIndex++
            end for
          else
            m.log.error("no component found for item", sc.dv(item))

          end if
        else
          m.log.verbose("skipping item", sc.dv(item))
        end if
      end for
      'm.log.decreaseIndent()
      m.numberOfItems = m.cellInfos.count()
    end function

    protected override function tidyUpUnusedRenderers() as void
      removedRenderers = []
      m.log.verbose("cleaning unused renderers")

      for i = 1 to m.container.getChildCount() - 1
        renderer = m.container.getChild(i)
        if renderer.content = invalid or m.renderersByContentId[renderer.content.id] = invalid
          m.log.verbose("Releasing renderer at index", i, " as it is no longer in use: it has different/invalid content")

          removedRenderers.push(renderer)
          renderer.content = invalid
        else

          currentInfoAtIndex = m.rendereredCellInfosByIndex[renderer.index.toStr()]
          if currentInfoAtIndex <> invalid and not currentInfoAtIndex.component.isSameNode(renderer)
            m.log.verbose("releasing renderer at index", i, " as it is no longer in use: it is a different component")

            removedRenderers.push(renderer)
            renderer.content = invalid
          end if
        end if
      end for
      m.log.verbose("Releasing", removedRenderers.count(), " renderers")
      m.componentPool@.releaseComponents(removedRenderers)
    end function
  end class
end namespace
