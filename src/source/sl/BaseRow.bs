import "pkg:/source/sl/ListMixin.bs"
import "pkg:/source/sl/RowItemScroller.bs"
import "pkg:/source/sl/RowItemViewManager.bs"
import "pkg:/source/lib/BaseView.bs"
import "pkg:/source/sl/CellInfo.bs"
import "pkg:/source/sl/FocusIndicatorConfig.bs"
import "pkg:/source/sl/CommonListApi.bs"

namespace sl
  @node("sl_BaseRow", "sv_BaseView")
  class BaseRow extends sv.BaseView

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Pubic Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'Instance of RowContent
    public content as mc.types.node

    public index = -1
    public renderState = "none"

    public isInViewport = false
    public height = 0
    public width = 0

    'set this to true, if you have row content that changes other fields you want to know about in `onContentChange`
    public alwaysNotifyContentChange = false

    public owner as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected backgroundGroup as mc.types.node
    protected contentGroup as mc.types.node
    protected foregroundGroup as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Protected Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected _content ' use this reference on m for speed
    protected settings

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Header Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected header as mc.types.node
    protected currentHeaderType = invalid

    function new()
      super(m.top.subType())
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function initialize()
      super.initialize()
      m.createViews()
    end function

    protected function createViews()
      m.backgroundGroup = m.createSGNode("Group", m.top, "backgroundGroup")
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.foregroundGroup = m.createSGNode("Group", m.top, "foregroundGroup")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function onContentItemsChange(isChildChange = false as boolean) as sl.ListChangeResult
      m.log.verbose(" ROW ", sc.dv(m.top), " CHANGES: ")
      if m.content = invalid
        m.log.error("content was invalid on row, during onContentItemsChange: investigate this case", sc.dv(m.top))
        return {
          isLayoutRequired: false
          isFocusChangeRequired: false
        }
      end if

      if isChildChange = true
        m.log.info("Content children have been added/removed")
        m.log.info("doing a content update, in case this is important for the row, itself")
        m.onContentUpdate(m.content)
        return m.applyChildChanges()
      else
        'TODO this might not be needed. potentially handled at cell level?..
        m.log.verbose("Some content cells have changed")
        return m.updateChangedCells()
      end if
    end function

    function applyChildChanges() as sl.ListChangeResult
      m.log.verbose(" applying child changes ", sc.dv(m.top))
      'bs:disable-next-line
      if m.viewManager <> invalid
        'bs:disable-next-line
        return m.viewManager.onContentItemsChange()
      end if
      return {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }
    end function

    function updateChangedCells() as sl.ListChangeResult
      m.log.verbose(" updating changed cells ", sc.dv(m.top))
      'bs:disable-next-line
      if m.viewManager <> invalid
        'bs:disable-next-line
        m.viewManager.updateChangedItems()
      end if
      return {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }
    end function

    function setContent(content as mc.types.node, isForced = false as boolean) as sl.ListChangeResult
      m.settings = sl.listMixin.getRowSettings(m.owner.content, content)
      m._content = content
      m.log.verbose(" SET CONTENT ", sc.dv(m.top))
      if isForced
        ' ? " FORCING UPDATE ON ROW "
        'bs:disable-next-line
        if m.itemScroller <> invalid
          'bs:disable-next-line
          m.itemScroller.viewPortEventNotifier.isAllRendered = false
        end if
      end if

      result = m.onContentChange(content)
      m.onContentUpdate(content)
      return result
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function forceUpdate(keepOldFocusIfPossible = true as boolean, fullUpdate = false as boolean) as void
      m.log.verbose(" FORCE UPDATE ON ", m.__classname)
      if m.owner = invalid or m._content = invalid
        return
      end if
      m.settings = sl.listMixin.getRowSettings(m.owner.content, m._content)
      m.log.verbose(" forceUPdate ", sc.dv(m.top))
      m.onContentChange(m._content)

      'bs:disable-next-line
      if m.configureHeader <> invalid
        'bs:disable-next-line
        m.configureHeader(true)
      end if
    end function

    function updateChangedItems()
      m.log.verbose(" Base row updateChangedItems")
      'bs:disable-next-line
      if m.viewManager <> invalid and m.viewManager.updateChangedItems <> invalid
        ' m.log.verbose("invoking on view manager")
        'bs:disable-next-line
        m.viewManager.updateChangedItems()
      end if
    end function

    function getIndexAfterItemUpdate(previousInfo as sl.CellInfo) as integer
      m.log.verbose(" Base row updateChangedItems")
      'bs:disable-next-line
      if m.viewManager <> invalid and m.viewManager.getIndexAfterItemUpdate <> invalid
        'bs:disable-next-line
        return m.viewManager.getIndexAfterItemUpdate(previousInfo)
      end if
      if previousInfo <> invalid
        return previousInfo.index
      else
        return -1
      end if
    end function

    function getFocusedCellInfo() as sl.CellInfo
      'bs:disable-next-line
      if m.itemScroller <> invalid
        'bs:disable-next-line
        return m.itemScroller.cellInfo
      end if
      return invalid
    end function

    function getCellInfo(index as integer) as sl.CellInfo
      'bs:disable-next-line
      if m.viewManager <> invalid
        'bs:disable-next-line
        return m.viewManager.cellInfos[index]
      end if
      return invalid
    end function

    function getRenderer(index as integer) as object
      'implement me
      return invalid
    end function

    function getRenderersAtSubRowIndex(subRowIndex as integer) as mc.types.array
      'implement me
      return []
    end function

    function getRect(index as integer, useScreenCoords = false as boolean) as mc.types.assocarray
      'implement me
      return invalid
    end function

    function getRowInfos(forceRecalculate = false as boolean) as mc.types.array
      'bs:disable-next-line
      if m.viewManager <> invalid
        'bs:disable-next-line
        return m.viewManager.getRowInfos(m.top.translation[1], forceRecalculate = true)
      else
        focusSettings = m.settings.focusSettings

        screenPos = m.settings.screenPos
        yOffset = m.top.translation[1]

        positions = [
          new sl.CellPosition(yOffset, screenPos) 'normal
          new sl.CellPosition(yOffset, screenPos) 'float-scroll
        ]
        rowInfo = new sl.CellInfo([m.width, m.height], focusSettings, positions, false, m.index, 0)
        return [rowInfo]
      end if
    end function

    function getFocusIndicatorConfig(cellInfo as sl.CellInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as sl.FocusIndicatorConfig


      'bs:disable-next-line
      if m.itemScroller <> invalid
        cellInfo = m.getRowInfos(false)[cellInfo.componentIndex]
        'bs:disable-next-line
        return m.itemScroller.getFocusIndicatorConfig(cellInfo, direction, isFloatingFocus, isFromListScroll)
      else
        return sl.createFocusIndicatorConfig(m.top, invalid, direction)
      end if
    end function

    function chooseCellInfoForScrollingIntoRow(cellInfo as sl.CellInfo)
      'bs:disable-next-line
      if m.itemScroller <> invalid
        'bs:disable-next-line
        m.itemScroller.chooseCellInfoForScrollingIntoRow(cellInfo)
      end if
    end function

    function isVerticalFlowFocusPossible(cellInfo as sl.CellInfo, direction as integer, activeScreenPos as integer, scrollPos as integer) as boolean
      'bs:disable-next-line
      if m.viewManager <> invalid
        'bs:disable-next-line
        return m.viewManager.isVerticalFlowFocusPossible(cellInfo, direction, activeScreenPos, scrollPos)
      end if
      return true
    end function

    'sends a row data event back to the owning list
    protected function sendRowData(data as mc.types.assocarray)
      if m.owner <> invalid and m.owner.delegate <> invalid
        m.owner.delegate@._apply("onRowData", [{
          rowIndex: m.top.index
          data: data
        }], false)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Abstract methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function onContentChange(content as mc.types.node) as sl.ListChangeResult
      ' ? "ON CONTENT CHANGE"
      return {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }
    end function

    protected function onContentUpdate(content as mc.types.node)
      ' ? "ON CONTENT UPDATED"
      m.configureHeader(false)
    end function

    protected function onRecycle(newContent as mc.types.node)
      m.log.verbose("recycling row", sc.dv(m.top), "content", sc.dv(newContent))
      m.isInViewport = false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Row API Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function moveFromPress(direction as integer, isLongPress as boolean, isPage = false as boolean) as boolean
      'implement me
      return false
    end function

    function getItemSize(index as integer) as mc.types.array
      'implement me
      return invalid
    end function

    function moveToIndex(index as integer, animated as boolean, animSpeedIndex = 0 as integer)
      'implement me
    end function

    function cancelMove(forceFocusUpdate as boolean)
      'implement me
    end function

    function canMoveInDirection(direction as integer, longPress as boolean) as boolean
      'implement me
      return false
    end function

    function getCellContainer()
      return m.contentGroup
    end function

    function recycle(newContent as mc.types.node)
      m.onRecycle(newContent)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Header Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function configureHeader(forceUpdate = false as boolean)
      if m._content = invalid
        m.cleanHeader()
      else if m.contentGroup <> invalid
        headerSettings = m.settings.headerSettings
        if forceUpdate = true or m.currentHeaderType = invalid or m.currentHeaderType <> headerSettings.compName
          m.cleanHeader()
          m.currentHeaderType = headerSettings.compName
          m.header = m.global.componentPool@.getComponent(headerSettings.compName, 1)

          if m.header <> invalid
            if headerSettings.position = "onTop"
              m.foregroundGroup.appendChild(m.header)
            else if headerSettings.position = "underneath"
              m.backgroundGroup.appendChild(m.header)
            end if
          end if
        end if

        if m.header <> invalid
          m.header.translation = [-m.settings.contentOffset[0], 0] 'cancel out this row's offset
          m.header.width = m.width
          m.header.height = headerSettings.height
          m.header@.setContent(m._content, headerSettings)
          m.contentGroup.translation = [0, headerSettings.height]
        else
          m.contentGroup.translation = [0, 0]
        end if
      end if
    end function

    protected function cleanHeader()
      if m.header <> invalid
        m.log.info("cleaning header")
        m.header@.setContent(invalid)
        m.global.componentPool@.releaseComponent(m.header)
        m.header = invalid
        m.currentHeaderType = invalid
      end if
    end function

  end class
end namespace
