import "pkg:/source/sl/ItemScroller.bs"
import "pkg:/source/sl/ListItemViewManager.bs"
import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/lib/Animation.bs"
import "pkg:/source/sl/ListMixin.bs"
import "pkg:/source/sl/CellInfo.bs"
import "pkg:/source/sl/ViewPortEventNotifier.bs"
import "pkg:/source/sl/FocusIndicatorConfig.bs"
import "pkg:/source/lib/DebugTimer.bs"

namespace sl
  class ItemScroller extends sc.BaseClass

    public container as sc.types.node

    public viewManager
    public focusManager
    public viewPortEventNotifier
    private settings

    public isMovingMultiple = false

    public isLastMoveFlowFocus = false

    public cellInfo as sl.CellInfo
    public nextCellInfo as sl.CellInfo
    public nextFocusIndicatorConfig as sl.FocusIndicatorConfig
    public targetCellInfo as sl.CellInfo

    public focusedItem as sc.types.node

    public index = 0
    public nextIndex = 0

    public focusedIndex = 0
    public nextPosition = 0
    public targetIndex = 0
    public scrollStartIndex = 0
    public direction = 0
    public axes = 0 'x = 0, y =1
    public screenPos = 0
    public nextScreenPos = 0

    public isFloatingFocus = false
    public isOnlyFloatingFocus = false

    public moveAnimation

    private animSpeed = 0.05
    private animSpeedIndex = 0.05

    private activeScrollLocation = 0
    private nextScrollLocation = 0
    private postHopIndex = 0
    private isScrollCancelled = false
    private keyPressIndex = 0

    protected previousScreenPos = 0

    private isMultiMoveFinished = false
    private disableNonAnimatedFocusUpdates = false

    private itemsInAnimation = []
    private numberOfAnimationSteps = 0

    private pendingCellInfo
    private pendingNextCellInfo
    private pendingDirection
    private pendingIsFloatingFocus

    function new(name as string, viewManager as sl.ItemViewManager, focusManager as sc.types.node)
      super(name)
      m.viewManager = viewManager
      viewManager.itemScroller = m

      m.container = m.viewManager.container
      m.axes = m.viewManager.axes
      m.viewPortEventNotifier = new sl.ViewPortEventNotifier(viewManager)
      m.moveAnimation = new sv.animations.Move(m.container, 1, m.container.translation, m.container.translation)
      m.focusManager = focusManager
      m.toggleAnimationObservers(true)
    end function

    function toggleAnimationObservers(active as boolean)
      m.moveAnimation.disableKeyObservers()
      m.moveAnimation.unobserveKeyFraction()
      m.moveAnimation.unobserveKeyIndex()

      if active
        m.moveAnimation.enableKeyObservers()
        m.moveAnimation.observeKeyFraction(m.onKeyFraction, m)
        m.moveAnimation.observeKeyIndex(m.onKeyIndex, m)
      end if
    end function


    private function onKeyFraction(fraction as float)
      ' ? " ON KEY FRACTION " fraction " index is" m.index
      fraction = sc.clamp(fraction, 0.0, 1.0)
      if fraction <> 1
        m.focusManager@.onFocusAnimationUpdate(fraction)
      end if
    end function

    private function onKeyIndex(index as integer) as void
      if index = 0
        return
      end if
      ' ? " on KEY INDEX " index " m.index " m.index " m.nextIndex " m.nextIndex " TI " m.targetIndex

      if index = m.numberOfAnimationSteps
        ' ? "FINISHED WHOLE ANIM ON STEP " index "(" m.index ")"
        m.finishMovingToIndex(false, true)
      else
        ' ? " FINISHED STEP " index "(" m.index ")"
        m.focusManager@.onFocusAnimationUpdate(1)
        m.setFocusIndex(m.nextIndex, true, true)
      end if
    end function

    public function onViewManagerUpdate()
      if m.viewManager.settings <> invalid
        m.settings = m.viewManager.settings.focusSettings
      end if

      m.viewPortEventNotifier.onViewManagerUpdate()
    end function

    public function reset(keepOldFocusIfPossible = false as boolean) as void

      ' ? " RESET keepOldFocusIfPossible " keepOldFocusIfPossible

      if keepOldFocusIfPossible
        index = m.index
      else
        index = 0
      end if

      m.onViewManagerUpdate()

      'FIXME - fix recovering focus
      if keepOldFocusIfPossible
        ' ? m.__classname ; " KEEP INDEX"
        if index >= m.viewManager.numberOfItems
          ' ? m.__classname ; " NEEDS FIXING TO LAST "
          'move to next item
          index = m.viewManager.numberOfItems - 1
        end if
      end if

      m.setFocusIndex(index, false, false)
    end function

    public function cancelScrolling(setFocusNow = false as boolean)
      ' ? ">>> CANCEL SCROLLING " ; m.__classname ; " " ; m.viewManager.isScrolling " " setFocusNow

      if setFocusNow
        m.focusManager@.completeFocusNow()
      end if

      'Tidy up the scrolling in here
      m.isScrollCancelled = m.viewManager.isScrolling
      if m.viewManager.isScrolling
        m.move(m.direction)
        m.isMovingMultiple = false
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Component Info
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function getAnimSpeed(animSpeedIndex as integer)
      speed = 1
      'bs:disable-next-line
      ' ? ">+>+>+> GET SPEEd row: " m.row " animSpeedIndex " animSpeedIndex
      'bs:disable-next-line
      if m.row <> invalid
        ' ? " GETTING SETTINGS FROM ROW"
        settings = m.viewManager.getFocusSettings()
      else
        ' ? " GETTING SETTINGS FROM LIST SETTINGS"
        settings = m.viewManager.listSettings
      end if
      ' ? " SETTINGS IS " settings

      if settings <> invalid
        speed = settings.animSpeeds[sc.clamp(animSpeedIndex, 0, settings.animSpeeds.count() - 1)]
      end if

      ' ? " >>>> USING SPEED INDEX " m.animSpeedIndex " WHICH IS " speed
      speed = sc.clamp(speed - m.keyPressIndex, 0.02, speed)
      ' ? " >>> FINAL SPEED  " speed
      return speed
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ MoveToIndex Convenience Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function canMoveInDirection(direction as integer) as boolean
      'm.log.resetIndent()
      ' m.viewManager.recalculateCellInfos(false)
      return m.canMoveToIndex(m.index + direction, direction)
    end function

    function canMoveToIndex(index as integer, direction as integer) as boolean
      ' ? "CanMoveToIndex D " direction; " MI " ; index ; " NC " m.viewManager.numberOfItems
      ' m.viewManager.recalculateCellInfos(false)
      return m.viewManager.numberOfItems > 0 and ((direction = -1 and index > -1) or (direction = 1 and index < m.viewManager.numberOfItems))
    end function

    function moveToContentIndex(index as integer, animated = true as boolean, animSpeedIndex = 0 as integer, direction = invalid as integer, forceSequential = true as boolean) as boolean
      ' m.viewManager.recalculateCellInfos(false)
      info = m.viewManager.getCellInfoForContentIndex(index)
      if info <> invalid
        ' ? " Move To Content Index 111 " m.__classname
        ' ? " INFO INDEX IS " info.index
        return m.moveToIndex(info.index, animated, animSpeedIndex, direction, forceSequential)
      else
        ' ? "+++ cannot move to content index - no info"
      end if
      return false
    end function

    function moveFromPress(offset as integer, forceSequential = true as boolean, isPage = false as boolean) as boolean
      m.isScrollCancelled = false
      speedIndex = 1
      ' ? " MOVE FROM PRESS " m.viewManager.owner._repeatKeyPressCount " IScrolling? " m.viewManager.isScrolling
      ' if m.viewManager.isScrolling
      if m.direction = offset
        if m.viewManager.owner._repeatKeyPressCount > 1
        end if
      end if

      m.keyPressIndex = sc.clamp(cInt(m.viewManager.owner._repeatKeyPressCount / 3) * 0.02, 0.01, 0.2)

      if isPage
        offset = m.getPageOffset(offset)
        speedIndex = 2
      end if
      ' ? "MOVING TO " offset " with keyPressIndex" m.keyPressIndex
      return m.move(offset, true, speedIndex, not isPage and forceSequential)
    end function

    private function getPageOffset(offset as integer) as integer
      offset *= 4
      newIndex = m.index + offset

      if newIndex < 0
        return -m.index
      else if newIndex >= m.viewManager.numberOfItems - 1
        return (m.viewManager.numberOfItems - m.index) - 1
      end if

      return offset
    end function

    function move(offset as integer, animated = true as boolean, animSpeedIndex = 0 as integer, forceSequential = true as boolean) as boolean
      ' ? " MOVE I " ; m.index ; " O " ; offset
      index = m.index + offset

      if offset > 0
        direction = 1
      else
        direction = -1
      end if

      if not m.canMoveToIndex(index, direction)
        m.log.info("move in direction", direction, " cannot be performed")
        ' ? "+++ could not move"
        return false
      end if

      ' ? " MoveToContentIndex 222 " m.__classname
      return m.moveToIndex(index, animated, animSpeedIndex, direction, forceSequential)

      ' return false
    end function

    function moveToEnd(direction as integer, screenPos = invalid as integer, animated = true as boolean, animSpeedIndex = 0 as integer) as boolean
      ' ? ">>>>>>>>>> MOVE TO END"

      m.isScrollCancelled = false

      if direction = -1
        index = 0
      else
        index = m.viewManager.numberOfItems - 1
      end if

      if not m.canMoveToIndex(index, direction)
        m.log.info("already at end - ignoring")
        ' ? ">>>Already at end "
        return false
      end if

      ' ? " MoveToContentIndex 333 " m.__classname " index " index " numberOfItems " m.viewManager.numberOfItems
      m.moveToIndex(index, animated, animSpeedIndex)
      return true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Movement Machinery
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    ' move to the Virtual Index
    function moveToIndex(index as integer, animated = true as boolean, animSpeedIndex = 0 as integer, direction = invalid as integer, forceSequential = true as boolean, isContinuing = false as boolean, notifyFocusManager = true as boolean) as boolean
      'm.log.increaseIndent()Indent("MOVE TO INDEX")

      m.log.info("moveToIndex I", m.__classname, m.index, "NI", index, animated)
      m.log.verbose(">?>?>?>?>?////////////////////////////////////////////////////.v///")
      m.log.verbose("////// MTI ", m.index, " NI ", index, " d ", direction, " FS ", forceSequential)
      ' ? ">?>?>?>?>?////////////////////////////////////////////////////..v///"
      ' ? "////// MTI " m.index " NI " index " d " direction " FS " forceSequential
      index = sc.clamp(index, 0, m.viewManager.numberOfItems - 1)

      'FIXME - cancel/tidy up a move in progress
      m.focusManager@.cancelFlowFocus()

      if m.viewManager.numberOfItems = 0
        ' ? " NO ITEMS"
        'm.log.decreaseIndent()
        return false
      end if

      ' ? " MTI BB"
      if direction = invalid
        direction = 0
        if index < m.index
          direction = -1
        else
          direction = 1
        end if
      end if
      ' ? "////// MTI RESOLVED " ; m.index ; " NI " ; index ; " d " ; direction ; " FS " ; forceSequential

      '////////////////////////////////////////////////////////////////////////
      ' ? "//// 1. get cellInfo"
      '////////////////////////////////////////////////////////////////////////

      m.isMovingMultiple = abs(index - m.index) > 1

      if forceSequential
        nextCellInfo = m.viewManager.cellInfos[sc.clamp(m.index + direction, 0, m.viewManager.numberOfItems - 1)]
      else
        nextCellInfo = m.viewManager.cellInfos[index]
      end if

      targetCellInfo = m.viewManager.cellInfos[index]
      m.direction = direction

      'TODO - calculate the next hop index.. - for now we can configure this

      m.setTargetCellInfo(targetCellInfo)

      ' ? ":::::::::::::: MOVE TO INDEX SET COMP INFO"
      ' ? " NI " ; nextCellInfo.index
      ' ? " TI " ; targetCellInfo.index

      m.animSpeed = m.getAnimSpeed(animSpeedIndex)
      m.animSpeedIndex = animSpeedIndex

      ' ? " MTI CC"
      '////////////////////////////////////////////////////////////////////////
      ' ? "//// 2. Ascertain offset " m.__classname
      '////////////////////////////////////////////////////////////////////////

      ' ? "2.b IS FLOW POSSIBLE ??? " m.screenPos "m.viewManager.maxPos " m.viewManager.maxPos; " NFA " nextCellInfo.isFlowFocusAllowed
      isFlowPossible = animated and m.viewManager.isFlowFocusPossible(nextCellInfo, direction, m.screenPos)

      ' ? " ::::::::::::::: setNextCellInfo DDD"
      m.isLastMoveFlowFocus = isFlowPossible
      ' ? " >>> SET NEXT from moveToIndex"
      ' ? " POS " m.container.translation[m.axes] " ASP " m.screenPos " MP " m.viewManager.maxPos " D " direction
      m.setNextCellInfo(nextCellInfo)

      m.log.verbose(" MTI DD")
      if isFlowPossible
        ' ? "///// 2.b flow IS POSSIBLE I " ; index
        ' ? " CELLINFO " m.cellInfo
        ' ? " nextCellInfo " nextCellInfo
        m.moveUsingFlowAnim(m.cellInfo, nextCellInfo, m.direction)
        'm.log.decreaseIndent()
        return true
      end if

      if animated
        '////////////////////////////////////////////////////////////////////////
        ' ? "/////// 3. animated move"
        '////////////////////////////////////////////////////////////////////////

        ' ? ">>>> START ANIM ; REGULAR CONTAINER ANIM - moveToIndex " m.index " F " formatJson(m.container.translation) " " m.__classname
        m.toggleScrolling(true)
        m.setFocusIndex(m.index, true, true, false)

        m.configureAnimationToIndex(m.targetIndex)
        m.moveAnimation.start()
      else
        ' ? "/////// 3. NOT ANIMATED MOVE"
        ' ? " TSF>>>>>>>>>>>>>> AAA"
        m.toggleScrolling(false)
        translation = m.container.translation

        translation[m.axes] = (-targetCellInfo.getPosition(direction))

        m.container.translation = translation
        ' ? " TCI " ; targetCellInfo.index ; " Content index " targetCellInfo.componentIndex ; " C " ; sc.dv (targetCellInfo.component)
        m.nextScreenPos = targetCellInfo.getScreenPosition(m.direction)
        ' ? "nextScreenpos " ; m.nextScreenPos ; " index " ; index

        ' ? " MTI GG"
        if not m.disableNonAnimatedFocusUpdates
          ' ? " MTI HH"
          'Grid rows will handle getting their own focus, as they may have called this as part of going to a specific subrow
          m.setFocusIndex(index, false, notifyFocusManager)
          m.forceFocusOnIndex(index, notifyFocusManager)
        end if
        m.setCellInfo(targetCellInfo)
      end if

      'm.log.decreaseIndent()
      return true
    end function

    private function configureAnimationToIndex(targetIndex as integer) as void
      ' ? "++++++++++++++ CONFIGURE ANIMATION TO " targetIndex " AXES " m.axes
      ' ? "++++++++++++++ CONFIGURE ANIMATION TO " targetIndex " AXES " m.axes
      ' ? "++++++++++++++ CONFIGURE ANIMATION TO " targetIndex " AXES " m.axes
      keyValues = []
      m.itemsInAnimation = []
      distance = 0
      steps = abs(targetIndex - m.index)
      if steps = 0
        ' ? " NOTHING TO DO"
        return
      end if

      previousPos = m.container.translation[m.axes]

      nextTranslation = m.container.translation
      if m.axes = 1
        otherAxesValue = nextTranslation[0]
      else
        otherAxesValue = nextTranslation[1]
      end if

      for i = m.index to targetIndex step m.direction
        cellInfo = m.viewManager.cellInfos[i]

        if i = targetIndex
          screenPos = cellInfo.getScreenPosition(m.direction)
        else
          screenPos = 0
        end if

        ' nextTranslation[m.axes] = -cellInfo.getPosition(m.direction) + screenPos
        ' ? " INDEX " i " POSITION IS " cellInfo.getPosition(m.direction) "  SCREEN POS " screenPos

        if i = m.index
          offset = previousPos
        else
          offset = -cellInfo.getPosition(m.direction)
        end if

        if m.axes = 1
          nextTranslation = [otherAxesValue, offset]
        else
          nextTranslation = [offset, otherAxesValue]
        end if
        ' ? " NEXT TRANSLATION " nextTranslation

        keyValues.push(nextTranslation)
        distance += offset - previousPos
        previousPos = offset
        m.itemsInAnimation.push(cellInfo)
      end for

      distance = abs(distance)

      ' ? " GOING TO TRAVEL " distance " pixels in " steps " steps direction " m.direction
      keys = []

      for i = 0 to steps
        keys.push(i / steps * 1.0)
      end for

      m.moveAnimation.setKeys(keys, keyValues)

      ' ? " >>>>>>>>>>>>>> SETTING KEYS "
      ' ? formatJson(keys)
      ' ? " values"
      ' ? formatJson(keyValues)
      ' ? " SETTING KEYS <<<<<<<<<<<<<<<<"

      'DURATION MECHANISM::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
      '1. Pixels per second
      pixelsPerSecond = 900
      duration = distance / pixelsPerSecond


      ' ? "::::::::::::::::::"
      ' speed = m.getAnimSpeed(m.animSpeedIndex)
      speed = m.getAnimSpeed(0)
      ' ? "+>+>+> SPEED " speed " index " m.animSpeedIndex
      ' ? "::::::::::::::::::"
      '2. Fixed
      ' duration = steps * m.animSpeed
      duration = steps * speed

      '3. Proportional - for now we'll leave this disabled

      '4. Selected duration
      'DURATION MECHANISM::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

      m.numberOfAnimationSteps = steps
      m.moveAnimation.setDuration(duration)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Finishing Movement
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function finishMovingToIndex(isFromFlow = false as boolean, animated = true as boolean) as void

      ' ? "VVVVV finishMovingToIndex TI " ; sc.getPath(m.targetCellInfo, "index") ; " IS " ; m.viewManager.isScrolling
      ' ? m.__classname ; " " ; m.isScrollCancelled
      m.keyPressIndex = 0
      'NOT SURE ABOUT THIS
      ' if m.isScrollCancelled
      '   ' ? "VVVVV SCROLL CANCELLED " ; m.nextScrollLocation ; " " ; m.container.translation[m.axes]
      '   if isFromFlow or not animated
      '     ' ? " is in position"
      '     m.toggleScrolling(false)
      '     if isFromFlow
      '       m.focusManager@.onFocusAnimationUpdate(1)
      '       ' m.setFocusIndex(m.index, false, false)
      '     else
      '       m.setFocusIndex(m.nextIndex, false, false)
      '       if not animated
      '       end if
      '     end if
      '     return
      '   else
      '   end if
      ' else
      '   ' ? "VVVV is not cancelled"
      ' end if

      ' ? " VVVVVVVVVVV AA"
      if not m.viewManager.isScrolling
        ' ? "VVVVV WAS NOT Scrolling - cannot finish move"
        m.focusManager@.onFocusAnimationUpdate(1)
      end if

      ' ? " VVVVVVVVVVV BB"
      if not m.isMovingMultiple and not m.isScrollCancelled
        ' ? " VVVVVVVVVVV CC"
        ' ? "VVVVV was a simple move IFF " ; isFromFlow
        ' ? "MI " m.index ; " NI " m.nextIndex

        ' m.focusManager@.onFocusAnimationUpdate(1)
        ' ? " TSF>>>>>>>>>>>>>> BBB"
        m.toggleScrolling(false)
        ' m.setFocusIndex(m.nextIndex, false, false)
      end if

      ' ? " VVVVVVVVVVV DD"
      ' cellInfo = m.cellInfo
      cellInfo = m.nextCellInfo
      ' ? "VVVV NCI " ; sc.getPath(m.targetCellInfo, "index"); sc.getPath(cellInfo, "index")
      if cellInfo = invalid
        ' ? "VVVVV NO Component Info"
        m.focusManager@.onFocusAnimationUpdate(1)
        m.setFocusIndex(m.nextIndex, true, true)
        ' ? " TSF>>>>>>>>>>>>>> CCC"
        m.toggleScrolling(false)
        m.isMultiMoveFinished = true
      end if

      if m.targetCellInfo = invalid or cellInfo.index = m.targetCellInfo.index
        ' ? "VVVVV HAVE ARRIVED"
        m.focusManager@.onFocusAnimationUpdate(1)
        ' ? " TSF>>>>>>>>>>>>>> DDD"
        m.toggleScrolling(false)
        m.setFocusIndex(m.nextIndex, false, false)
        m.isMultiMoveFinished = true
        return
      end if

      if isFromFlow
        m.setFocusIndex(m.nextIndex, true, false)
        m.focusManager@.onFocusAnimationUpdate(1)
      end if

      ' ? " TSF>>>>>>>>>>>>>> EEE"
      m.toggleScrolling(false)
    end function

    function toggleScrolling(active as boolean)
      m.log.verbose("toggleScrolling ", active, " IS ", m.viewManager.isScrolling, " ", m.__classname)

      if m.viewManager.isScrolling <> active
        if active
          m.scrollStartIndex = m.index
        end if
        m.viewManager.setIsScrolling(active, m.isMovingMultiple, m.index)
      end if

      if not active
        ?"  TOGGLE SCROLLING OFF!! STOPPING>!>!>!>!!>"
        m.setTargetCellInfo(invalid)
        m.moveAnimation.stop(false)
        m.isMovingMultiple = false
        m.scrollStartIndex = -1
      end if
    end function

    protected function setFocusManagerInfo(cellInfo as sl.CellInfo, nextCellInfo as sl.CellInfo, direction as integer, isFloatingFocus as boolean) as void
      if isFloatingFocus
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextCellInfo, m.direction, true)
      else
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextCellInfo, m.direction, false)
      end if
      ' m.log.info("Set focus ManagerInfo to ", cellInfo.index, cellInfo.componentIndex)
      ' ? " SNIC 666 " cellInfo.index " " cellInfo.componentIndex
      m.focusManager@.setNextFocusIndicatorConfig(m.nextFocusIndicatorConfig)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Flow Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function moveUsingFlowAnim(fromInfo as sl.CellInfo, toInfo as sl.CellInfo, direction as integer)
      ' ? ")))))) moveUsingFlowAnim I " ; m.index ; " FI " ; fromInfo.index ; " TI " ; toInfo.index ; " CI " ; toInfo.contentIndex ; "  " m.__classname

      m.isLastMoveFlowFocus = true
      m.toggleScrolling(true)
      m.log.verbose("==== FROM moveUsingFlowAnim")
      ' ? " MOVE USING FLOW"
      m.setFocusManagerInfo(fromInfo, toInfo, direction, true)
      ' ? "FLOW " m.animSpeed
      m.focusManager@.startFlowFocus(m.nextFocusIndicatorConfig, m.animSpeed, sc.getTop())
    end function

    function onFlowFocusFraction(fraction as float)
      ' ? "+>+>+>+> on FLow fraction" fraction ; m.__classname
      ' m.log.info("onFlowFocusFraction", fraction, "multiple", m.isMovingMultiple, "targetIndex", m.targetIndex)

      if fraction = 1
        ' ? "+>+>+>+ FINISHED FLOW " ; m.__classname ; " multiple: " ; m.isMovingMultiple ; " TI " ; m.targetIndex
        m.log.info("finished focusing action with this flow")

        ' ? "+>+>+>+> " sc.getPath(m.targetCellInfo, "index"); " MI " m.index ; " NI " ; m.nextIndex
        m.finishMovingToIndex(true)
      else
        m.focusManager@.onFocusAnimationUpdate(fraction)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ State Tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function setCellInfo(info as sl.CellInfo)
      m.cellInfo = info
      if info <> invalid
        ' ? "SCI>>> (" ; m.__classname ; ") " ; info.index ; " CI " ; info.contentIndex
        m.index = info.index
        m.activeScrollLocation = -info.getPosition(m.direction)
        if not m.isLastMoveFlowFocus
          m.screenPos = info.getScreenPosition(m.direction)
        end if
      else
        ' m.index = -1
        m.index = 0
        m.activeScrollLocation = 0
        m.screenPos = 0
      end if
    end function

    protected function setNextCellInfo(info as sl.CellInfo) as void
      ' ? " CALLED SET NEXT CELL INFO "
      if info = invalid
        m.nextCellInfo = invalid
        m.nextIndex = 0
        ' m.nextIndex = -1
        m.nextScrollLocation = 0
        m.nextFocusIndicatorConfig = invalid
        if not m.isLastMoveFlowFocus
          m.nextScreenPos = 0
        end if
        return
      end if

      ' ? m.__classname ; " SET NEXT COMPONENT INFO " ; info.index ; " IFF " m.isLastMoveFlowFocus

      if info.index <> m.nextIndex
        m.nextIndex = info.index
        m.nextScrollLocation = -info.getPosition(m.direction)
        if not m.isLastMoveFlowFocus
          m.nextScreenPos = info.getScreenPosition(m.direction)
        end if
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(info, m.direction, m.isLastMoveFlowFocus)

        if m.nextCellInfo = invalid or info.contentIndex <> m.nextCellInfo.contentIndex
          m.viewManager.updateScrolling(info.contentIndex)
        else
          'we scrolled to a sub-row
          ' ? "setNextCellInfo - not (yet) reporting subrow move on CI " info.contentIndex ; " SI " info.componentIndex
        end if
      end if

      m.nextCellInfo = info
    end function

    function setTargetCellInfo(info as sl.CellInfo) as void
      m.targetCellInfo = info
      if info <> invalid
        ' ? " >>>>>>>>>>>>>>>> Target is " ; info.index
        m.targetIndex = info.index
      else
        ' ? " >>>>>>>>>>>>>>>> Target is invalid "
        ' m.targetIndex = -1
        m.targetIndex = 0
      end if
    end function

    ' /**
    '  * @member setFocusIndex
    '  * @memberof module:ItemScroller
    '  * @instance
    '  * @function
    '  * @description Responsible for all state updates, and hooks pertaning to focus position.
    '  *       NOTE : does NOT update position - you should be in position when calling this. for efficiency does not recalculate index: you should know the index when you call me!
    '  * @param {integer} index - the index you KNOW you are on when your move is finished (finished could mean from one index to nextindex, while animating; doesn't have to be targetIndex)
    '  * @param {boolean} isMoving - if true, then deltas are calculated for next position, and observers fired if their screen status will change
    '  */
    function setFocusIndex(index as integer, isMoving as boolean, notifyFocusManager = true as boolean, sendViewportEvent = true as boolean) as void
      'This MUST be called infrequently
      ' TODO - check if index is actually changed

      ' ? " SET FOCUS INDEX " index " " m.__classname
      ' ? " SFI AA"
      if m.viewManager.numberOfItems = 0
        ' ? " SFI ERROR!+++++"
        return
      end if

      ' ? " SFI DD"
      if index >= m.viewManager.numberOfItems - 1
        ' ? " SFI EE"
        index = m.viewManager.numberOfItems - 1
      end if

      m.setCellInfo(m.viewManager.cellInfos[index])
      index = sc.clamp(m.index + m.direction, 0, m.viewManager.numberOfItems - 1)
      ' ? " ::::::::::::::: setNextCellInfo BBB"
      m.setNextCellInfo(m.viewManager.cellInfos[index])

      if m.cellInfo = invalid
        m.log.error("setFocusIndex - invalid cellInfo")
        return
      end if

      m.focusedItem = m.viewManager.visibleItems[m.cellInfo.contentIndex]

      if sendViewportEvent
        m.notifyViewportEvents(m.direction)
      end if

      if notifyFocusManager
        m.log.verbose("==== FROM setFocusIndex ", m.__classname)
        ' ? " ItemScroller FROM SET FOCUS INDEX NOTIFY " m.nextCellInfo.index
        m._setFocusManagerInfo(m.cellInfo, m.nextCellInfo, m.direction, false)
      end if
    end function

    private function _setFocusManagerInfo(cellInfo as sl.CellInfo, nextCellInfo as sl.CellInfo, direction as integer, isFloatingFocus as boolean) as void
      m.pendingCellInfo = cellInfo
      m.pendingNextCellInfo = nextCellInfo
      m.pendingDirection = direction
      m.pendingIsFloatingFocus = isFloatingFocus

      if m.focusManager._isContentUpdating
        ' ? ">+>+> SETTING FOCUS SYNC"
        m.setFocusManagerInfo(m.pendingCellInfo, m.pendingNextCellInfo, m.pendingDirection, m.pendingIsFloatingFocus)
      else
        ' ? ">+>+> SETTING FOCUS ASYNC"
        m.setTimeout(function()
          m.setFocusManagerInfo(m.pendingCellInfo, m.pendingNextCellInfo, m.pendingDirection, m.pendingIsFloatingFocus)
        end function)
      end if
    end function

    protected function notifyViewportEvents(direction as integer, forceAll = false as boolean)
      'bs:disable-next-line
      isInViewPort = m.viewManager.row = invalid or m.viewManager.row.isInViewPort

      m.viewPortEventNotifier.notifyViewportEvents(m.direction, isInViewPort, forceAll)
    end function

    function forceFocusOnIndex(index as integer, notifyFocusManager = true as boolean, notifyOwner = true as boolean) as void

      ' ? " >>>> forceFocusOnIndex " ; m.__classname
      if m.viewManager.numberOfItems = 0
        ' ? " no components!!"
        return
      end if

      index = sc.clamp(index, 0, m.viewManager.numberOfItems - 1)

      if m.cellInfo = invalid
        ' ? " ERROR - there was no cellInfo"
        m.setCellInfo(m.viewManager.cellInfos[index])
      end if

      ' ? "FORCE FOCUS " index
      m.setNextCellInfo(m.viewManager.cellInfos[index])

      m.index = index

      if notifyFocusManager
        ' ? "list notifying focus manager"
        m.log.verbose("==== FROM forceFocusOnIndex ")
        ' ? " FORCE FOCUS"
        m.setFocusManagerInfo(m.cellInfo, m.nextCellInfo, m.direction, false)
        m.focusManager@.onFocusAnimationUpdate(1)
      end if
    end function

    public function chooseCellInfoForScrollingIntoRow(cellInfo as sl.CellInfo)
      cellInfo = m.getCellInfo(cellInfo, true)
      if cellInfo <> invalid
        m.setCellInfo(cellInfo)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus Indicator
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function getFocusIndicatorConfig(cellInfo as sl.CellInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as sl.FocusIndicatorConfig

      info = m.getCellInfo(cellInfo, isFromListScroll)

      ' rowIndex = m.viewManager.row = invalid ? - 1 : m.viewManager.row.index
      if info = invalid or info.component = invalid or m.settings = invalid
        ' ? "cannot get focus indicator cellInfo or cellInfo.component is invalid " m.__classname
        return sl.createFocusIndicatorConfig(m.viewManager.row, invalid, direction, m.index)
      end if

      size = m.viewManager.getItemSize(info.contentIndex)
      translation = m.getFocusIndicatorTranslation(info, cellInfo, direction, isFloatingFocus)

      indicatorTranslation = [translation[0] + m.settings.feedbackOffsets[0], translation[1] + m.settings.feedbackOffsets[1]]

      indicatorSize = [size[0] + m.settings.feedbackOffsets[2] - m.settings.feedbackOffsets[0], size[1] + m.settings.feedbackOffsets[3] - m.settings.feedbackOffsets[1]]

      isHidden = sc.getPath(m.viewManager.content, "isHidden", false)

      config = sl.createFocusIndicatorConfig(m.viewManager.row, info.component, direction, info.contentIndex, isHidden, m.settings, indicatorTranslation, indicatorSize)
      return config
    end function


    protected function getCellInfo(cellInfo as sl.CellInfo, isFromListScroll = false as boolean) as sl.CellInfo
      return invalid
    end function

    protected function getFocusIndicatorTranslation(info as sl.CellInfo, cellInfo as sl.CellInfo, direction as integer, isFloatingFocus as boolean) as object
      return [0, 0]
    end function

  end class
end namespace
