import "pkg:/source/lib/Utils.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/lib/Tasks.bs"

namespace sl
  @node("sl_BaseCell", "Group")
  class BaseCell

    public index as integer = -1

    @observer("onDebugMChange")
    public __debugM = false

    ' any item in a list will have this set whenever it gets recycled
    @observer("onInitialStateChange")
    public initialState as sc.types.AssocArray

    public isInViewPort = false

    public listEvent as sc.types.AssocArray

    private isViewCreated = false
    private isRecyclePending = true

    public content as sc.types.node

    protected list as sc.types.node
    protected row as sc.types.node
    protected size as sc.types.array
    protected isContentDisplayed = false

    private isCreatingViewsOnInitialize = true
    private isObservingContent = true

    function new()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function recycle()
      if not m.isViewCreated
        m._createViews()
      end if
      if m.isRecyclePending
        m._onContentChange(m.content)
      end if
    end function

    public function forceUpdate()
      m.isRecyclePending = true
      m.recycle()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function onDebugMChange()
      sc.setOrAddNodeField(m.top, "__m", sc.private.getDebugMObject(m))
    end function

    private function _createViews()
      if m.content <> invalid 'and (not m.isCreatingViewsOnInitialize or m.isInViewPort)
        ' ? " CREATE VIEWS"
        m.createViews()
        m.isViewCreated = true
      end if
    end function

    private function _onContentChange(content as sc.types.node) as void
      isChanged = false
      if content = invalid
        isChanged = true
      else if content.isSameNode(m.content) 'this might not be required
        isChanged = true
      end if

      if isChanged
        m.onContentChange(content)
        if m.top.isInViewPort
          ' ? " IN VIEW PORT SHOWING "; m.index
          m.onShowWithContent(content)
        end if
      end if
      m.isRecyclePending = false
    end function

    protected function onInitialStateChange(state as sc.types.assocarray)
      ' ? " ON INITIAL STATE CHANGE " m.top.index
      if m.isObservingContent
        sc.tasks.unobserveNodeField(m.top, "content", m.onContentNodeUpdated)
      end if

      m.list = state.list
      m.row = state.row
      m.size = state.size
      m.content = state.content
      m.isContentDisplayed = false
      if state.content = invalid
        m.cleanup()
        m.isRecyclePending = false
      else
        m.isRecyclePending = true
        m.recycle()
      end if

      if m.content <> invalid
        sc.tasks.observeNodeField(m.top, "content", m.onContentNodeUpdated, "value")
        m.isObservingContent = true
      end if
    end function

    protected function createViewsFromStyleJson(childrenJson as sc.types.array, targetNode = invalid as sc.types.node, assignViewsToM = true as boolean, mTarget = invalid as sc.types.assocarray)
      if mTarget = invalid
        mTarget = m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      sv.createViewsFromStyleJson(childrenJson, targetNode, assignViewsToM, mTarget)
    end function

    protected function updateViewsWithStyleJson(json as dynamic, mTarget = invalid as sc.types.assocarray)
      if mTarget = invalid
        mTarget = m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      sv.updateViewsWithStyleJson(json, mTarget)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Callback
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onContentNodeUpdated(content as sc.types.node)
      ? "CONTENT CHANGE DETECTED " m.isContentDisplayed " content " sc.dv(content)
      if m.isContentDisplayed and content <> invalid
        m.onShowWithContent(content)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Abstract methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function createViews()
      'override me!
    end function

    protected function cleanup()
      'override me!
      ' ? "CLEANING UP " ; m.index
    end function

    protected function onContentChange(content as sc.types.node)
      'override me
    end function


    protected function onShowWithContent(content as sc.types.node)
      'override me
    end function

    protected function onHide()
      'override me
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Delegate function
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function _apply(funcName as string, args as sc.types.array, warnIfNoFunction = true as boolean)
      return sc.apply(funcName, args, m, false)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Delegate
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function onDidExit(event as sl.ListEvent)
      ' ? " ON EXIT CELL "; m.index
      if m.isContentDisplayed
        m.onHide()
        m.isContentDisplayed = false
      end if
    end function

    protected function onDidEnter(event as sl.ListEvent)
      ' ? " ON ENTER CELL "; m.index ; " " ; m.isContentDisplayed ; " " ; m.isViewCreated ; " " ; m.content <> invalid
      if not m.isContentDisplayed
        if m.content <> invalid
          if m.isViewCreated
            ' ? " ON ENTER CELL - CALLING"
            m.onShowWithContent(m.content)
            m.isContentDisplayed = true
          else
            ' ? " ON ENTER CELL - NOT SHOWING"
          end if
        else
          m.onDidExit(event)
          ' ? " ON ENTER CELL - NO CONTENT "
        end if
      end if
    end function

  end class
end namespace
