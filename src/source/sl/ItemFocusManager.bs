import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/sl/CellInfo.bs"
import "pkg:/source/sl/FocusIndicatorConfig.bs"
import "pkg:/source/sl/FocusIndicatorManager.bs"
import "pkg:/source/sl/ListDelegateManager.bs"

namespace sl
  interface InternalListEvent
    name as string
    index as integer
    rowIndex as integer
    subRowIndex as integer
    direction as integer
    fraction as float
    isRowEvent as boolean
    cell as mc.types.node
    row as mc.types.node
  end interface

  class ItemFocusManager extends sc.BaseClass

    public isNotifyingListDelegate = true

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ PrivateFields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private focusIndicatorConfig = sl.createFocusIndicatorConfig(invalid, invalid)
    private previousFocusIndicatorConfig = sl.createFocusIndicatorConfig(invalid, invalid)
    private delegateManager
    private didStart = false
    private didFinish = false
    private lastSentFraction = -1
    private direction = 0

    private fromEvent as sl.InternalListEvent
    private toEvent as sl.InternalListEvent

    private focusIndicatorManager as sl.FocusIndicatorManager

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(name as string, focusIndicatorManager as mc.types.node)
      super("ItemFocusManager")
      m.name = name
      m.focusIndicatorManager = focusIndicatorManager
      m.fromEvent = {
        isSendingCell: false
        isSendingRow: false
      }
      m.toEvent = {
        isSendingRow: false
        isSendingCell: false
      }
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private list as mc.types.node

    function setList(list as mc.types.node)
      m.list = list
      m.delegateManager = new sl.ListDelegateManager(list)
    end function

    function reset(focusIndicatorConfig = invalid as sl.FocusIndicatorConfig)
      m.log.info("resetting focus on the item focus manager")

      m.lastSentFraction = -1
      m.direction = 0
      ' ? " RESET H ERE HERE HE"
      m.didStart = false
      m.didFinish = false
      m.configureDelegateEvent(m.fromEvent, m.previousFocusIndicatorConfig)
      m.configureDelegateEvent(m.toEvent, m.focusIndicatorConfig)
      m.configureSentEventTypes()

      ' ? "+++ FROM EVENT " m.fromEvent.index
      ' ? "+++ TO EVENT " m.toEvent.index
      if m.fromEvent.cell <> invalid
        m.delegateManager.callCellDelegateMethod("didLoseFocus", m.fromEvent)
      end if
      if m.toEvent.cell <> invalid
        m.delegateManager.callCellDelegateMethod("didLoseFocus", m.toEvent)
      end if

      m.previousFocusIndicatorConfig = sl.createFocusIndicatorConfig(invalid, invalid)
      m.focusIndicatorConfig = sl.createFocusIndicatorConfig(invalid, invalid)
    end function

    function setNextFocusIndicatorConfig(focusIndicatorConfig as sl.FocusIndicatorConfig) as void

      ' ? " SET NEXT INDICATOR CONFIG"
      if focusIndicatorConfig = invalid
        m.log.error("received invalid config")
        return
      end if

      if m.isSameConfig(focusIndicatorConfig)
        ' ? ">>>> NOTHING HAS CHANGED DS " ; m.didStart ; " DF "; m.didFinish
        'TODO - why is this here?
        m.didFinish = false
        return
      end if
      m._setNextFocusIndicatorConfig(focusIndicatorConfig)
      m.onFocusUpdate(0)
    end function

    function completeFocusNow()
      m.onFocusAnimationUpdate(1)
    end function

    function onFocusAnimationUpdate(fraction as float) as void
      ' ? "ANIM UPDATE "; m.name ; " F " ; fraction ; " DS" ; m.didStart ; " DF " ; m.didFinish
      if m.didStart and not m.didFinish
        m.onFocusUpdate(fraction)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function _setNextFocusIndicatorConfig(focusIndicatorConfig as sl.FocusIndicatorConfig)
      m.previousFocusIndicatorConfig = m.focusIndicatorConfig
      m.lastSentFraction = -1
      m.focusIndicatorConfig = focusIndicatorConfig
      m.direction = m.focusIndicatorConfig.direction
      ' ? "_setNextFocusIndicatorConfig HERE HER HERE"
      m.didStart = false
      m.didFinish = false

      m.configureDelegateEvent(m.fromEvent, m.previousFocusIndicatorConfig)
      m.configureDelegateEvent(m.toEvent, m.focusIndicatorConfig)

      m.configureSentEventTypes()
    end function


    private function configureSentEventTypes()
      'TODO add a function to get a delegateMap from a maestro basenode - where we pass in an aa of function types, and it returns true for each of those that are implemented
      m.fromEvent.isSendingCell = m.getIsSendingFromCellEvent()
      m.toEvent.isSendingCell = m.getIsSendingToCellEvent()
      m.fromEvent.isSendingRow = m.fromEvent.isRowEvent and m.getIsSendingFromRow()
      m.toEvent.isSendingRow = m.toEvent.isRowEvent and m.getIsSendingToRow()

      ' ? " ++FOCUS EVENT CONFIG SENDING CELL " m.fromEvent.isSendingCell " ROW " m.fromEvent.isSendingRow " TO SENDING CELL " m.toEvent.isSendingCell " ROW " m.toEvent.isSendingRow
    end function

    private function getIsSendingFromCellEvent()
      isRowSame = m.toEvent.rowIndex = m.fromEvent.rowIndex
      ' ? " IS SENDING FROM CELL INDEX " m.fromEvent.index " " m.toEvent.index "isRowSame" isRowSame " FRI " m.fromEvent.rowIndex " TRI " m.toEvent.rowIndex
      return m.fromEvent.row <> invalid and m.fromEvent.index <> -1 and ((m.fromEvent.cell = invalid or m.toEvent.index <> m.fromEvent.index) or not isRowSame)
    end function

    private function getIsSendingToCellEvent()
      'TODO tweak
      return m.focusIndicatorConfig.row <> invalid and m.toEvent.index <> -1
    end function

    private function getIsSendingFromRow()
      return m.fromEvent.row <> invalid and (m.fromEvent.rowIndex <> m.toEvent.rowIndex or m.fromEvent.subRowIndex <> m.toEvent.subRowIndex)
    end function

    private function getIsSendingToRow()
      'TODO tweak
      return m.focusIndicatorConfig.row <> invalid
    end function

    private function isSameConfig(newConfig as sl.FocusIndicatorConfig)
      if m.focusIndicatorConfig = invalid or newConfig = invalid
        ' ? " >>>>>>>>>> INVALID CONFIG m.focusIndicatorConfig " m.focusIndicatorConfig " NEw " newConfig
        return false
      end if
      return m.focusIndicatorConfig.rowIndex = newConfig.rowIndex and m.focusIndicatorConfig.cellIndex = newConfig.cellIndex and m.focusIndicatorConfig.direction = newConfig.direction
    end function

    private function onFocusUpdate(fraction as float) as void
      ' ? "+++ onFocusUpdate(" ; m.name ; ") didStart "; m.didStart ; " isNotifyingListDelegate " ; m.isNotifyingListDelegate ; fraction

      if fraction = 1 or fraction = 0
        ' ? "+++ onFocusUpdate(" ; m.name ; ") didStart "; m.didStart ; " isNotifyingListDelegate " ; m.isNotifyingListDelegate ; fraction
      end if
      if m.didFinish
        return
      end if
      if m.focusIndicatorConfig = invalid
        ' ? " no focus config"
        return
      end if

      if not m.didStart
        ' ? " >>>> SENDING WILL LOSE WILL GAIN"
        name = "willLoseFocus"
        nextName = "willGainFocus"
        m.didStart = true
      else if fraction = 0
        return
      else if fraction >= 1
        ' ? " DID FINISH "; m.focusIndicatorConfig.rowIndex " " m.focusIndicatorConfig.cellIndex
        m.didFinish = true
        name = "didLoseFocus"
        nextName = "didGainFocus"
        m.focusIndicatorManager.setFocusComplete(m.focusIndicatorConfig)
      else
        name = "losingFocus"
        nextName = "gainingFocus"
      end if

      ' ? " REPORTING TO FIM " fraction
      m.focusIndicatorManager.setFocusedFraction(fraction)

      m.sendEvents(name, nextName, fraction)
    end function

    private function sendEvents(name as string, nextName as string, fraction as float) as void
      ' ? " sendEvents " name nextName sc.dv(m.previousFocusIndicatorConfig.cell) sc.dv(m.focusIndicatorConfig.cell)
      m.delegateManager.listDelegate = m.list.delegate
      m.delegateManager.isNotifyingListDelegate = m.isNotifyingListDelegate and m.list.delegate <> invalid

      if fraction < m.lastSentFraction
        return
      end if

      m.lastSentFraction = fraction

      m.fromEvent.fraction = fraction
      m.toEvent.fraction = fraction

      if m.fromEvent.isSendingCell
        m.delegateManager.callCellDelegateMethod(name, m.fromEvent)
      end if

      if m.fromEvent.isSendingRow
        m.delegateManager.callRowDelegateMethod(name, m.fromEvent)
      end if

      if m.toEvent.isSendingCell
        m.delegateManager.callCellDelegateMethod(nextName, m.toEvent)
      end if

      if m.toEvent.isSendingRow
        m.delegateManager.callRowDelegateMethod(nextName, m.toEvent)
      end if

    end function

    private function configureDelegateEvent(event as sl.InternalListEvent, config as sl.focusIndicatorConfig)
      event.direction = m.direction
      event.fraction = 0
      if config <> invalid
        event.cell = config.cell
        if config.cellIndex <> invalid
          event.index = config.cellIndex
        else
          event.index = -1
        end if

        event.row = config.row
        if config.rowIndex <> invalid
          event.rowIndex = config.rowIndex
        else
          event.rowIndex = -1
        end if
        if config.subRowIndex <> invalid
          event.subRowIndex = config.subRowIndex
        else
          event.subRowIndex = 0
        end if

        event.isRowEvent = config.isRowEvent

        if event.rowIndex = -1
          m.log.warn("List event will not send for corrupt row index (-1)")

          event.isSendingCell = false
          event.isSendingRow = false
          event.isRowEvent = false
        end if
      else
        event.index = -1
        event.rowIndex = -1
        event.isSendingCell = false
        event.isSendingRow = false
        event.isRowEvent = false
      end if
    end function

  end class
end namespace
