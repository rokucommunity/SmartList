import "pkg:/source/lib/Utils.bs"
import "pkg:/source/lib/BaseClass.bs"

namespace sv
  class NodeClass extends sc.BaseClass

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Debug Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @observer("onDebugMChange")
    public __debugM = false

    function new(name as string)
      super(name)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Debug Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function onDebugMChange()
      'bs:disable-next-line
      sc.setOrAddNodeField(m.top, "__m", sc.private.getDebugMObject(m))
      'bs:disable-next-line
      sc.setOrAddNodeField(m.top, "__syncM", false)
      'bs:disable-next-line
      sc.setOrAddNodeField(m.top, "__callFunction", "")
      'bs:disable-next-line
      m.observe(m.top.__callFunction, m.___onDebugCallFunction)
    end function

    function onSyncMChange()
      'bs:disable-next-line
      for each field in m.top.__m
        'bs:disable-next-line
        if m.top.__m[field] <> invalid
          'bs:disable-next-line
          m[field] = m.top.__m[field]
        end if
      end for
    end function

    private function ___onDebugCallFunction(text as string) as void
      if text <> ""
        try
          m.log.debug("calling function now:", text)
          regex = /([a-z0-9_-]*)\((.*)\)/gim
          matches = regex.match(text)
          name = matches[1]
          args = parseJson("[" + matches[2] + "]")
          if not m.doesExist(name)
            m.log.error("function does not exist on:", m.__classname)
            return
          end if
          'bs:disable-next-line
          result = sc.apply(m[name], args)
          m.log.info("got result", result)
          'bs:disable-next-line
          sc.setOrAddNodeField(m.top, "__callFunctionRESULT", result)
        catch error
          m.log.error("got error", error)
        end try
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ scope support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function getTopField(fieldName as string) as dynamic
      return sc.getMField("top")[fieldName]
    end function

    protected function getMField(fieldName as string) as dynamic
      return sc.getMField(fieldName)
    end function

  end class
end namespace
