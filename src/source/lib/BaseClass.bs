import "pkg:/source/lib/Tasks.bs"
import "pkg:/source/lib/Utils.bs"
import "Types-Polyfill.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/roku_modules/log/LogMixin.brs"

namespace sc
  class BaseClass

    public state = "none"
    protected name
    protected log

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(name as string)
      m.log = new log.Logger(name)
      m.name = name
    end function

    private function _initialize()
      m.state = "initialized"
      m.initialize()
      'bs:disable-next-line
      if m.isWiringObserversOnInit = true
        'bs:disable-next-line
        m_wireUpObservers()
      end if
    end function

    protected function initialize()
      'override me

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Internal Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function _apply(funcName as string, args as mc.types.array, warnIfNoFunction = true as boolean)
      return sc.apply(funcName, args, m, warnIfNoFunction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ creation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function createSGNode(nodeType as string, parent = invalid as mc.types.node, id = invalid as string, args = invalid as mc.types.assocarray, callInitialize = true as boolean, mTarget = invalid as mc.types.assocarray) as mc.types.node
      return sc.createSGNode(nodeType, parent, id, args, callInitialize, mTarget)
    end function

    protected function createViewsFromStyleJson(childrenJson as mc.types.array, targetNode = invalid as mc.types.node, assignViewsToM = true as boolean, mTarget = invalid as mc.types.assocarray)
      if mTarget = invalid
        mTarget = m
      end if
      if targetNode = invalid
        targetNode = mTarget.m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      sv.createViewsFromStyleJson(childrenJson, targetNode, assignViewsToM, mTarget, true)
    end function

    protected function updateViewsWithStyleJson(json as dynamic, mTarget = invalid as mc.types.assocarray)
      if mTarget = invalid
        mTarget = m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      sv.updateViewsWithStyleJson(json, mTarget)
    end function

    protected function createNode(nodeType as string)
      return sc.createNode(nodeType)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ task wrappers, for easy stubbing
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function observeNodeField(node as mc.types.node, fieldName as string, callback as function, sendMode = "value" as string, once = false as boolean, fieldAndValueTargetField = invalid as string)
      sc.tasks.observeNodeField(node, fieldName, callback, sendMode, once, m, fieldAndValueTargetField)
    end function

    protected function unobserveNodeField(node as mc.types.node, fieldName as string, callback = invalid as function)
      sc.tasks.unobserveNodeField(node, fieldName, callback, m)
    end function

    protected function observe(invocation as dynamic, callback as function, sendMode = "value" as string, once = false as boolean, fieldAndValueTargetField = invalid as string)
      'substituted by plugin
    end function

    protected function unobserve(invocation as dynamic, callback = invalid as function)
      'substituted by plugin
    end function

    protected function waitAFrame(callback as function, duration = 0.01 as float, sendMode = "none" as string)
      return sc.tasks.waitAFrame(callback, duration, sendMode, m)
    end function

    protected function setTimeout(callback as function, duration = 0.01 as float, sendMode = "none" as string)
      return sc.tasks.setTimeout(callback, duration, sendMode, m)
    end function

    protected function setInterval(callback as function, duration = 0.01 as float, sendMode = "none" as string)
      return sc.tasks.setInterval(callback, duration, sendMode, m)
    end function

    protected function cancelWaitTimer(timer as mc.types.node)
      sc.tasks.cancelWaitTimer(timer)
    end function

    protected function cancelTimeout(timer as mc.types.node)
      sc.tasks.cancelWaitTimer(timer)
    end function

    protected function cancelInterval(timer as mc.types.node)
      sc.tasks.cancelWaitTimer(timer)
    end function
  end class
end namespace
