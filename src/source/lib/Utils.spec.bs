import "pkg:/source/tests/BaseTestSuite.spec.bs"
import "pkg:/source/core/Utils.bs"

namespace tests
  @suite("Utils Tests")
  class UtilsTests extends tests.BaseTestSuite

    protected override function setup()
      super.setup()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getPath")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets values that are present")
    @params("v", 1)
    @params("b.v", 2)
    @params("b.c.v", 3)
    function _(path, expected)
      a = {
        v: 1
        b: {
          v: 2
          c: {
            v: 3
          }

        }
      }
      m.assertEqual(sc.getPath(a, path), expected)

    end function

    @it("gets default values")
    @params("v2")
    @params("b.v2")
    @params("b.c.v2")
    function _(path)
      a = {
        v: 1
        b: {
          v: 2
          c: {
            v: 3
          }

        }
      }
      m.assertEqual(sc.getPath(a, path, "default"), "default")

    end function

    @it("gets indexed value for arrays")
    @params("arr.0", "a")
    @params("arr.1", "b")
    @params("arr.2", "c")
    function _(path, expected)
      a = {
        arr: ["a", "b", "c"]
      }
      m.assertEqual(sc.getPath(a, path), expected)

    end function

    @it("gets indexed value for node")
    @params("0", "c1")
    @params("1", "c2")
    @params("2", "c3")
    function _(path, expected)
      a = sc.createSGNode("Node", invalid, "root")
      c1 = sc.createSGNode("Node", invalid, "c1")
      c2 = sc.createSGNode("Node", invalid, "c2")
      c3 = sc.createSGNode("Node", invalid, "c3")

      a.appendChildren([c1, c2, c3])

      m.assertEqual(sc.getPath(a, path).id, expected)
    end function

    @it("gets indexed value for nested node")
    @params("node.0", "c1")
    @params("node.1", "c2")
    @params("node.2", "c3")
    function _(path, expected)
      a = {
        node: sc.createSGNode("Node", invalid, "root")
      }
      c1 = sc.createSGNode("Node", invalid, "c1")
      c2 = sc.createSGNode("Node", invalid, "c2")
      c3 = sc.createSGNode("Node", invalid, "c3")

      a.node.appendChildren([c1, c2, c3])

      m.assertEqual(sc.getPath(a, path).id, expected)
    end function

    @it("gets indexed value for sc_Array")
    @params("0", "c1")
    @params("1", "c2")
    @params("2", "c3")
    function _(path, expected)
      a = sc.createSGNode("sc_Array", invalid, "root")
      c1 = sc.createSGNode("Node", invalid, "c1")
      c2 = sc.createSGNode("Node", invalid, "c2")
      c3 = sc.createSGNode("Node", invalid, "c3")

      a.appendChildren([c1, c2, c3])

      m.assertEqual(sc.getPath(a, path).id, expected)
    end function

    @it("gets indexed value for nested sc_Array")
    @params("node.0", "c1")
    @params("node.1", "c2")
    @params("node.2", "c3")
    function _(path, expected)
      a = {
        node: sc.createSGNode("sc_Array", invalid, "root")
      }
      c1 = sc.createSGNode("Node", invalid, "c1")
      c2 = sc.createSGNode("Node", invalid, "c2")
      c3 = sc.createSGNode("Node", invalid, "c3")

      a.node.appendChildren([c1, c2, c3])

      m.assertEqual(sc.getPath(a, path).id, expected)
    end function

    @it("disables indexing")
    @params("arr.100", "a")
    @params("arr.200", "b")
    @params("arr.300", "c")
    function _(path, expected)
      a = {
        arr: {
          "100": "a"
          "200": "b"
          "300": "c"
        }
      }
      m.assertEqual(sc.getPath(a, path, invalid, false), expected)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("setPath")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("sets values for paths that are present")
    @params("v", 1)
    @params("b.v", 2)
    @params("b.c.v", 3)
    function _(path, value)
      a = {
        b: {
          c: {
          }
        }
      }
      sc.setPath(a, path, value)
      m.assertEqual(sc.getPath(a, path), value)
    end function

    @it("sets values on a node")
    @params("v", 1)
    @params("b.v", 2)
    @params("b.c.v", 3)
    function _(path, value)
      a = sc.createSGNode("Node", invalid, "node")
      sc.setOrAddNodeField(a, "b", {
        c: {
        }
      })
      sc.setPath(a, path, value)
      m.assertEqual(sc.getPath(a, path), value)
    end function

    @it("does not crash or set value when using bad values")
    @params("b.a")
    @params("b.c.0")
    @params("b.c.1")
    @params("b.c.2")
    @params("b.c.legal.la")
    @params("b.c.legal.4")
    function _(path)
      a = {
        b: [
          {
          }
        ]
        c: {
          "0": "zero"
          "1": "zero"
          "2": "zero"
          "legal": [
            "la"
          ]
        }
      }
      sc.setPath(a, path, "v")
      m.assertInvalid(sc.getPath(a, path))
    end function

    @it("sets values with no dotted path")
    @params("v", 1)
    @params("v2", 2)
    @params("v3", 3)
    function _(path, value)
      a = {
        b: {
          c: {
          }
        }
      }
      sc.setPath(a, path, value)
      m.assertEqual(sc.getPath(a, path), value)
    end function

    @it("sets values when not invalid")
    @params("v", 1)
    @params("v2", 2)
    @params("v3", 3)
    function _(path, value)
      a = invalid
      sc.setPath(a, path, value)
      m.assertTrue(true, "should not have crashed")
    end function

    @it("does not insert missing parts if disabled")
    @params("notthere.v", 1)
    @params("b.notThere.v", 2)
    @params("b.c.notthere.v", 3)
    @params("b.arr.2.v", 4)
    function _(path, value)
      a = {
        b: {
          c: {
          }
          arr: [
            "a",
            "b"
          ]
        }
      }
      sc.setPath(a, path, value, false)
      m.assertInvalid(sc.getPath(a, path))
    end function

    @it("inserts aas for missing parts of the chain")
    @params("notthere.v", 1)
    @params("b.notThere.v", 2)
    @params("b.c.notthere.v", 3)
    @params("b.arr.2.v", 4)
    function _(path, value)
      a = {
        b: {
          c: {
          }
          arr: [
            "a",
            "b"
          ]
        }
      }
      sc.setPath(a, path, value)
      m.assertEqual(sc.getPath(a, path), value)
    end function

    @it("sets values on arrays, too")
    @params("b.0", "changed")
    @params("b.1", "changed")
    @params("b.2", "changed")
    @params("b.3.v", "changed")
    @params("b.3.d", "changed")
    @params("b.3.d.0", "changed")
    @params("b.3.d.1", "changed")
    @params("b.3.d.2", "changed")
    function _(path, value)
      a = {
        b: [
          "a",
          "b",
          "c",
          {
            d: [
              "da"
              "db"
              "dc"
            ]
            v: "v"
          }
        ]
      }
      sc.setPath(a, path, value)
      m.assertEqual(sc.getPath(a, path), value)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("createSGNode")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates node and sets properties on it")
    function _()
      node = sc.createSGNode("ContentNode", invalid, "myId", {
        title: "t"
      })
      m.assertSubType(node, "ContentNode")
      m.assertEqual(node.id, "myId")
      m.assertEqual(node.title, "t")

    end function

    @it("creates node and sets multiple sets of properties on it")
    function _()
      node = sc.createSGNode("ContentNode", invalid, "myId",
      [
        {
          title: "t"
        },
        {
          description: "d"
        }
      ])
      m.assertSubType(node, "ContentNode")
      m.assertEqual(node.id, "myId")
      m.assertEqual(node.title, "t")
      m.assertEqual(node.description, "d")

    end function

    @it("overlays multi sets of fields")
    function _()
      node = sc.createSGNode("ContentNode", invalid, "myId",
      [
        {
          title: "t"
          description: "d"
        },
        {
          title: "t2"
        }
      ])
      m.assertSubType(node, "ContentNode")
      m.assertEqual(node.id, "myId")
      m.assertEqual(node.title, "t2")
      m.assertEqual(node.description, "d")

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getFloat")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets floats, with defaults")
    @params({ v: invalid }, "v", 0.5, 0.5)
    @params({ v: 0 }, "v", 1.1, 0)
    @params({ v: 3 }, "v", 2.1, 3.0)
    @params({ v: "3" }, "v", 2.1, 2.1)
    @params({ v: 3.1 }, "v", 1.1, 3.1)
    function _(json, path, default, expected)
      m.assertEqual(sc.getFloat(json, path, default), expected * 1.0)
    end function

    @it("gets floats, with no defaults")
    @params({ v: invalid }, "v", 0.0)
    @params({ v: 0 }, "v", 0.0)
    @params({ v: 3 }, "v", 3.0)
    @params({ v: "3" }, "v", 0.0)
    @params({ v: 3.1 }, "v", 3.1)
    function _(json, path, expected)
      m.assertEqual(sc.getFloat(json, path), expected * 1.0)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getInteger")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets integer, with defaults")
    @params({ v: invalid }, "v", 0.5, 0.5)
    @params({ v: 3.1 }, "v", 2, 2)
    @params({ v: "3" }, "v", 2, 2)
    @params({ v: 3 }, "v", 1, 3)
    function _(json, path, default, expected)
      m.assertEqual(sc.getInteger(json, path, default), expected)
    end function

    @it("gets integer, with no defaults")
    @params({ v: invalid }, "v", 0)
    @params({ v: 3.1 }, "v", 0)
    @params({ v: "3" }, "v", 0)
    @params({ v: 3 }, "v", 3)
    function _(json, path, expected)
      m.assertEqual(sc.getInteger(json, path), expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getString")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets string, with defaults")
    @params({ v: invalid }, "v", "0.5", "0.5")
    @params({ v: 3.1 }, "v", "2", "2")
    @params({ v: 3 }, "v", "1", "1")
    @params({ v: ["3"] }, "v", "1", "1")
    @params({ v: "3" }, "v", 2, "3")
    function _(json, path, default, expected)
      m.assertEqual(sc.getString(json, path, default), expected)
    end function

    @it("gets string, with no defaults")
    @params({ v: invalid }, "v", "")
    @params({ v: 3.1 }, "v", "")
    @params({ v: 3 }, "v", "")
    @params({ v: ["3"] }, "v", "")
    @params({ v: "3" }, "v", "3")
    function _(json, path, expected)
      m.assertEqual(sc.getString(json, path), expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getBoolean")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets boolean, with defaults")
    @params({ v: invalid }, "v", true, true)
    @params({ v: invalid }, "v", false, false)
    @params({ v: 3.1 }, "v", true, true)
    @params({ v: 3.1 }, "v", false, false)
    @params({ v: 3 }, "v", true, true)
    @params({ v: 3 }, "v", false, false)
    @params({ v: ["3"] }, "v", "1", "1")
    @params({ v: true }, "v", false, true)
    @params({ v: false }, "v", true, false)
    function _(json, path, default, expected)
      m.assertEqual(sc.getBoolean(json, path, default), expected)
    end function

    @it("gets boolean, with no defaults")
    @params({ v: invalid }, "v", false)
    @params({ v: invalid }, "v", false)
    @params({ v: 3.1 }, "v", false)
    @params({ v: 3.1 }, "v", false)
    @params({ v: 3 }, "v", false)
    @params({ v: 3 }, "v", false)
    @params({ v: ["3"] }, "v", false)
    @params({ v: true }, "v", true)
    @params({ v: false }, "v", false)
    function _(json, path, expected)
      m.assertEqual(sc.getBoolean(json, path), expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getArray")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets array, with defaults")
    @params({ v: invalid }, "v", ["d"], ["d"])
    @params({ v: "3.1" }, "v", ["d"], ["d"])
    @params({ v: 3 }, "v", ["d"], ["d"])
    @params({ v: [] }, "v", ["d"], [])
    @params({ v: ["3"] }, "v", "1", ["3"])
    function _(json, path, default, expected)
      m.assertEqual(sc.getArray(json, path, default), expected)
    end function

    @it("gets array, with no defaults")
    @params({ v: invalid }, "v", [])
    @params({ v: "3.1" }, "v", [])
    @params({ v: 3 }, "v", [])
    @params({ v: false }, "v", [])
    @params({ v: ["3"] }, "v", ["3"])
    function _(json, path, expected)
      m.assertEqual(sc.getArray(json, path), expected)
    end function
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getPoint")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets point, with defaults")
    @params({ v: invalid }, "v", [1, 1], [1, 1])
    @params({ v: "3.1" }, "v", [1, 1], [1, 1])
    @params({ v: 3 }, "v", [1, 1], [1, 1])
    @params({ v: [] }, "v", [1, 1], [1, 1])
    @params({ v: [3] }, "v", [1, 1], [1, 1])
    @params({ v: [3, 3] }, "v", [1, 1], [3, 3])
    function _(json, path, default, expected)
      m.assertEqual(sc.getPoint(json, path, default), expected)
    end function

    @it("gets point, with no defaults")
    @params({ v: invalid }, "v", [0, 0])
    @params({ v: "3.1" }, "v", [0, 0])
    @params({ v: 3 }, "v", [0, 0])
    @params({ v: false }, "v", [0, 0])
    @params({ v: [3, 3] }, "v", [3, 3])
    function _(json, path, expected)
      m.assertEqual(sc.getPoint(json, path), expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getAA")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets aa, with defaults")
    @params({ v: invalid }, "v", { id: "d" }, { id: "d" })
    @params({ v: "3.1" }, "v", { id: "d" }, { id: "d" })
    @params({ v: 3 }, "v", { id: "d" }, { id: "d" })
    @params({ v: {} }, "v", { id: "d" }, {})
    @params({ v: { id: "3" } }, "v", "1", { id: "3" })
    function _(json, path, default, expected)
      m.assertEqual(sc.getAA(json, path, default), expected)
    end function

    @it("gets aa, with no defaults")
    @params({ v: invalid }, "v", {})
    @params({ v: "3.1" }, "v", {})
    @params({ v: 3 }, "v", {})
    @params({ v: false }, "v", {})
    @params({ v: { id: "3" } }, "v", { id: "3" })
    function _(json, path, expected)
      m.assertEqual(sc.getAA(json, path), expected)
    end function

  end class
end namespace
