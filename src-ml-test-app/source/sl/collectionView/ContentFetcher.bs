import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/sl/collectionView/CollectionView.bs"
import "pkg:/source/sl/collectionView/BaseCollectionViewRow.bs"

namespace sl.collectionView
  class ContentFetcher extends mc.BaseClass

    private tasksByRowId = {}
    private view as sl.collectionView.CollectionView
    private maxConcurrentLoad = 4
    private queuedRows = []

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialize
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(view as sl.collectionView.CollectionView)
      super("ContentFetcher")
      m.view = view
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function loadNextRows(lastEnteredRow as sl.collectionView.BaseCollectionViewRow)
      'TODO improve heuaristic of this
      'TODO track what is loaded already
      'TODO queue loading
      if lastEnteredRow <> invalid
        for i = lastEnteredRow.index to lastEnteredRow.index + 1
          row = m.view.rows[i]
          if row <> invalid and row.content.state = sl.common.State.none
            m.log.info("loding row", row.index, row.content.title)
            row.content.state = sl.common.State.loading

            'TODO - crude for now - using indexes as content keys
            task = m.createTask("sl_LoadRowTask", { content: row.content }, m.onRowContentLoad, true, "both")
            mc.setOrAddNodeField(task, "content", row.content)
            m.tasksByRowId[row.content.id] = task
          end if
        end for
      else
        m.log.warn("no rows to load")
      end if
    end function


    function loadMoreForRow(row as sl.collectionView.BaseCollectionViewRow)
      'TODO
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onRowContentLoad(result as mc.Result, task as mc.types.node)
      m.log.info("Loaded content for row")
      if result.isOk
        content = task.content
        state = content.getChildCount() > 0 ? sl.common.State.loaded : sl.common.State.error
        m.log.info("Row", content.title, "loaded with state", state)
        content.state = state
        m.view.contentManager.processRowContentChange(content, [])
      else
        m.log.error("Row failed to row")

      end if
    end function

  end class
end namespace
