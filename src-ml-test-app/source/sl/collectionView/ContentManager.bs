import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/sl/collectionView/CollectionView.bs"
import "pkg:/source/sl/collectionView/BaseCollectionViewRow.bs"
import "pkg:/source/sl/collectionView/CollectionViewAPI.bs"

namespace sl.collectionView

  'Handles mapping content to rows, and handling changes to content
  class ContentManager extends mc.BaseClass

    private view as sl.collectionView.CollectionView
    private pendingChangeEvents = []

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialize
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(view as sl.collectionView.CollectionView)
      super("ContentManager")
      m.view = view
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function setContent(content as mc.types.node)
      'TODO - set up id mappings
      'TODO - set up change observer
    end function

    function processRowContentChange(content as mc.types.node, changes as mc.types.array)
      'TODO deboucne the events
      event = new sl.collectionView.ContentChangeEvent(content, changes)
      m.pendingChangeEvents.push(event)
      m.applyPendingChangeEvents()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function applyPendingChangeEvents(animated = false as boolean)
      firstSizeInvalidatedRowIndex = m.view.rows.count()
      for each event in m.pendingChangeEvents
        row = m.view.getRowForContent(event.content)
        row.onContentChange(event)
        'TODO - will have to deal with removed rows here
        if row.index < firstSizeInvalidatedRowIndex and (event.result = sl.collectionView.ChangeResult.sizeInvalidated or event.result = sl.collectionView.ChangeResult.sizeAndLayoutInvalidated or event.result = sl.collectionView.ChangeResult.removed)
          firstSizeInvalidatedRowIndex = row.index
        end if
      end for

      're-layout the list
      m.view.invalidateLayout(firstSizeInvalidatedRowIndex)

      m.view.applyChangesToRows(m.pendingChangeEvents, animated)

      m.pendingChangeEvents = []
      'TODO - process removed rows (purge from array of rows, and other maps)
    end function
  end class
end namespace
