import "pkg:/source/sl/collectionView/CollectionView.bs"
import "pkg:/source/core/BaseClass.bs"

namespace sl.collectionView
  class CollectionViewFocusManager extends mc.BaseClass
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private focusRectangle as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private collectionView as object ' Assuming sl.CollectionView is the correct type

    private focusPercent as float = 0.0
    private focusInfo as sl.collectionView.FocusInfo
    private nextFocusInfo as sl.collectionView.FocusInfo
    private nullFocusInfo = sl.collectionView.FocusInfo(0, 0, [0, 0], [0, 0], "", "#000000")
    private isFocusShown as mc.types.node

    'either a row or a viewcollection (really it should be a scroller)

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Intiailze
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(collectionView as object)
      super("CollectionViewFocusManager")
      m.collectionView = collectionView
      m.nullFocusInfo.displayMode = sl.collectionView.FocusDisplayMode.none
      m.focusInfo = m.nullFocusInfo
      m.nextFocusInfo = m.nullFocusInfo
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function setFocusShown(shown as boolean)
      m.isFocusShown = shown
      m.focusRectangle.visible = shown
    end function


    function renderCurrentFocusInfo() as void
      m.log.info("Updating focus info to", m.focusInfo)
      m.nextFocusInfo = m.focusInfo
      m.updateFocusRectangleAppearance(1)
    end function

    'TODO - this needs to be more robust
    'TODO - we will want times where we set focus as as non-animated
    ' Sets the focus information, including the current and next row indices, and the scroll direction
    function setNextFocusInfo(info as sl.collectionView.FocusInfo) as void
      if info = invalid
        m.log.warn("was passed invalid info")

        info = m.nullFocusInfo
      end if
      m.log.info("Setting next focus info for row", info.rowIndex, "item", info.itemIndex)

      if info.rowIndex = -1
        m.log.warn("Illegal index set")
        return
      end if
      m.nextFocusInfo = info
    end function

    function renderWhileMovingBetweenItems(percent as float) as void
      'TODO make isValid flag
      m.focusPercent = percent
      m.updateFocusRectangleAppearance(m.focusPercent)
      if m.focusPercent >= 1.0
        m.setFocusComplete()
      end if
    end function

    private function updateFocusRectangleAppearance(percent as float) as void
      ' Ensure there is a valid focus percentage to work with
      if percent < 0.0 or m.nextFocusInfo = invalid
        m.log.warn("skipping illegal focus", percent, m.nextFocusInfo)

        return
      else if percent >= 1.0
        m.focusRectangle.translation = [m.nextFocusInfo.offset[0] + m.nextFocusInfo.insets[0], m.nextFocusInfo.offset[1] + m.nextFocusInfo.insets[1]]
        m.focusRectangle.size = [m.nextFocusInfo.size[0] + m.nextFocusInfo.insets[2], m.nextFocusInfo.size[1] + m.nextFocusInfo.insets[3]]
        return
      end if

      'TODO check if the rectangle is dirty

      ' ? `using insets ${formatJson(m.focusInfo.insets)}`
      'we need to interpolate
      deltaX = m.nextFocusInfo.offset[0] + m.nextFocusInfo.insets[0] - m.focusInfo.offset[0] - m.focusInfo.insets[0]
      deltaY = m.nextFocusInfo.offset[1] + m.nextFocusInfo.insets[1] - m.focusInfo.offset[1] - m.focusInfo.insets[1]
      deltaWidth = m.nextFocusInfo.size[0] + m.nextFocusInfo.insets[2] - m.focusInfo.size[0] - m.focusInfo.insets[2]
      deltaHeight = m.nextFocusInfo.size[1] + m.nextFocusInfo.insets[3] - m.focusInfo.size[1] - m.nextFocusInfo.insets[3]

      ' Apply the percentage to calculate the interpolated values
      'we will inerpolate x/y and other fields too
      interpolatedX = m.focusInfo.offset[0] + (deltaX * m.focusPercent)
      interpolatedY = m.focusInfo.offset[1] + (deltaY * m.focusPercent)
      interpolatedWidth = m.focusInfo.size[0] + (deltaWidth * m.focusPercent)
      interpolatedHeight = m.focusInfo.size[1] + (deltaHeight * m.focusPercent)

      ' Update the focus rectangle's appearance based on the interpolated values
      m.focusRectangle.translation = [interpolatedX, interpolatedY]
      m.focusRectangle.size = [interpolatedWidth, interpolatedHeight]

    end function

    function setFocusComplete() as void
      m.focusInfo = m.nextFocusInfo
      m.collectionView.focusedRowIndex = m.focusInfo.rowIndex
      m.collectionView.focusedItemIndex = m.focusInfo.itemIndex
      m.log.info("Completed focus", m.focusinfo.rowIndex, m.focusInfo.itemIndex)
      m.collectionView.decorationManager.decoration.text = `focusd on ${m.focusInfo.rowIndex}, ${m.focusInfo.itemIndex}`
    end function
  end class
end namespace
