import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/sl/collectionView/CollectionView.bs"
import "pkg:/source/sl/collectionView/BaseCollectionViewLayout.bs"
import "pkg:/source/sl/collectionView/CollectionViewAPI.bs"

namespace sl.collectionView
  class BaseCollectionViewRow extends mc.BaseClass

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    state = sl.collectionView.RowState.none
    isFocusable = true
    isHidden = false
    height = 400

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Settings Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'FIXME - this should be a node
    rowSettings as sl.collectionView.RowSettings

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Managed Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    isOnScreen = false
    index = 0
    container as mc.types.node
    content as mc.types.node
    collectionView as sl.collectionView.CollectionView
    renderedListPosition = 0
    lastRenderedY = 0
    @optimize
    viewportWidth = 1920

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Protected Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected layout = sl.collectionView.BaseCollectionViewLayout

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Scrolling Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected speed = 100
    protected startIndex = -1
    protected targetIndex = 0
    protected focusedIndex = -1

    protected direction = 0
    protected lastVirtualIndex = 0

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialize
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(view as sl.collectionView.CollectionView, content as mc.types.node, logName = "BaseCollectionViewRow" as string)
      super(logName)
      m.collectionView = view
      m.container = view.container
      m.index = content.index
      m.content = content
      m.configure(content)
      m.createLayout()
    end function

    protected function configure(content as mc.types.node)
      m.height = asInteger(content.rowHeight, 400)
      'TODO rowSettings should be a node we pass around by ref, on rows/grid that we can observe
      m.rowSettings = {
        numCols: asInteger(content.numCols, 3)
        padding: asInteger(content.padding, 20)
        margin: asInteger(content.margin, 20)
        scrollSpeed: asInteger(content.scrollSpeed, 20)
        cellSize: asPoint(content.cellSize, [380, 300])
        gridOffset: asPoint(content.gridOffset, [0, 0])
        insets: content.insets ?? [0, 0, 0, 0]
      }
    end function

    protected function createLayout()
      m.layout = new sl.collectionView.BaseCollectionViewLayout(m)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function animateToItemIndex(index as integer)
      m.log.info("animateToItemIndex ", index)
      'trigger animation on our next render cycle
      m.startIndex = m.focusedIndex
      m.targetIndex = index
      if m.startIndex > m.targetIndex
        m.direction = -1
      else
        m.direction = 1
      end if
      view = m.collectionView
      view.focusManager.setNextFocusInfo(m.getFocusInfo(m.startIndex + m.direction))
      m.updateFocusTrackingFields()
    end function

    'if index is -1, then we just get the info for first cell of this row
    function getFocusInfo(index = -1 as integer)
      return m.layout.getFocusInfo(index)
    end function

    function getRenderedCellAtVirtualPosition(virtualPosition as integer)
      return m.layout.getRenderedCellAtVirtualPosition(virtualPosition)
    end function

    function getCellIndexAtVirtualPosition(virtualPosition as integer)
      return m.layout.getCellIndexAtVirtualPosition(virtualPosition)
    end function

    function getVirutalPositionForIndex(index as integer)
      return m.layout.getVirutalPositionForIndex(index)
    end function

    function getItemIndexForKeyPress(key as sl.common.KeyPress, isLongPress as boolean)
      return m.layout.getItemIndexForKeyPress(key, isLongPress)
    end function

    function onEnterScreen()
      m.log.info("onEnterScreen", m.index, m.content.title, "state:", m.content.state, "CI", m.focusedIndex)
      m.isOnScreen = true
      m.layout.onEnterScreen()
    end function

    function onExitScreen()
      m.log.info("onExitScreen", m.index, m.content.title, "state:", m.content.state, "CI", m.focusedIndex)
      m.isOnScreen = false
      m.layout.onExitScreen()
    end function

    function onContentChange(event as sl.collectionView.ContentChangeEvent)
      m.layout.onContentChange(event)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Rendering
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function render(event as sl.collectionView.RenderEvent)
      if event.reason = sl.collectionView.RenderEventReason.applyContentChanges
        m.log.info("rendering content changes")
      else
        if m.targetIndex <> m.focusedIndex
          ' m.log.info("renderItemIndexChange detected ", m.targetIndex, "oldIndex", m.focusedIndex)
          m.animateBetweenIndexes(event)
        else if event.isForced
          ' m.log.info("Forcing render on", m.index, m.targetIndex)
          m.layout.render(event)
        end if
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Scrolling
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @optimize("this should be an item scroller - very similar code in CollectionView")
    function animateBetweenIndexes(event as sl.collectionView.RenderEvent) as void
      if m.targetIndex = m.startIndex or m.targetIndex < 0 ' No need to animate if indices are the same
        ' ? " BAILING at index" m.targetIndex
        return
      end if

      targetPosition = m.layout.getVirutalPositionForIndex(m.targetIndex)

      virtualPosition = m.layout.virtualPosition
      remainingDistance = targetPosition - virtualPosition

      ' ? "target X for row " m.targetIndex " is " targetPosition " virtual position is " virtualPosition
      if targetPosition > virtualPosition
        m.direction = 1
      else
        m.direction = -1
      end if

      ' Calculate the movement amount for this frame, ensuring it does not exceed the remaining distance
      ' movementAmount = m.direction * mc.min(abs(m.rowSettings.scrollSpeed), abs(remainingDistance))
      movementAmount = m.direction * mc.min(abs(m.collectionView.speed), abs(remainingDistance))

      virtualPosition += movementAmount

      ' Clamp virtualPosition to ensure it doesn't go beyond the scrollable content
      m.layout.virtualPosition = mc.max(virtualPosition, 0)

      m.layout.calculateVisibleCells(m.layout.virtualPosition)
      event.virtualX = virtualPosition

      if abs(m.layout.virtualPosition - targetPosition) < 1
        m.layout.virtualPosition = targetPosition
        m.startIndex = m.targetIndex
        m.focusedIndex = m.targetIndex
      end if
      m.updateFocusTracker()
      m.layout.render(event)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'TODO - this belongs in a scroller class
    private nextItemIndex = 0
    private lastFocusedVirtualPosition = 0
    private nextVirtualPosition = 0
    private distanceToTravel = 0

    private function updateFocusTracker()
      percentToNextRow = m.getFocusPercent()
      view = m.collectionView
      view.focusManager.renderWhileMovingBetweenItems(percentToNextRow)
      ' ? "% is " percentToNextRow
      if percentToNextRow >= 1
        m.log.info("completed focus on item")
        m.focusedIndex = m.nextItemIndex
        m.updateFocusTrackingFields()
        view.focusManager.setNextFocusInfo(m.layout.getFocusInfo(m.nextItemIndex))
      end if
    end function

    'Call this every time we reach focus 1 while scrolling
    private function updateFocusTrackingFields()
      m.nextItemIndex = mc.clamp(m.focusedIndex + m.direction, 0, m.layout.numberOfItems - 1)
      ' ? " UDPATE TRACKING FIELDS direction " m.direction " next " m.nextItemIndex " FI " m.focusedIndex
      m.lastFocusedVirtualPosition = m.layout.virtualPosition
      m.nextVirtualPosition = m.getVirutalPositionForIndex(m.nextItemIndex)
      m.distanceToTravel = abs(m.nextVirtualPosition - m.lastFocusedVirtualPosition)
      ' m.log.info("updated focus tracking - index:", m.focusedIndex, "distance", m.distanceToTravel, "nextVirtualPosition", m.nextVirtualPosition)
      ' m.log.info("m.layout.virtualPosition", m.layout.virtualPosition)

    end function

    'TODO move this into a common scroller class
    function getFocusPercent()
      if m.distanceToTravel = 0 or m.nextVirtualPosition = -1 or m.lastFocusedVirtualPosition = -1
        ? " BAIL GET PERCENT " m.distanceToTravel m.nextVirtualPosition m.lastFocusedVirtualPosition
        return 0
      end if

      virtualPosition = m.layout.virtualPosition

      ' Calculate the remaining distance to travel based on current scroll position
      remainingDistanceToTravel = 0
      if m.direction > 0 ' Scrolling down/right
        remainingDistanceToTravel = m.nextVirtualPosition - virtualPosition
      else if m.direction < 0 ' Scrolling up/left
        remainingDistanceToTravel = virtualPosition - m.nextVirtualPosition
      end if

      focusPercent = 1.0 - (remainingDistanceToTravel / m.distanceToTravel)
      focusPercent = mc.clamp(focusPercent, 0, 1.0)
      ' ? "ROW FOCUS  PERCENT " focusPercent
      return focusPercent
    end function

  end class
end namespace
