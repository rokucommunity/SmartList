import "pkg:/source/core/BaseClass.bs"

namespace sl
  @task("sl_LoadRowTask", "Task")
  class LoadRowTask extends mc.BaseClass
    function new()
      super("LoadRowTask")
    end function

    private contentId = 0
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Entry point
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function execute(args as mc.types.assocarray) as dynamic
      content = args.content
      request = createObject("roUrlTransfer")
      request.setCertificatesFile("common:/certs/ca-bundle.crt")
      request.initClientCertificates()
      url = "https://www.reddit.com/r/" + asString(content.title) + ".json"
      ? "LOADING ROW FROM URL:" url
      request.setUrl(url)
      response = request.getToString()
      m.contentId = rnd(1000)
      json = parseJson(response)
      return m.parseData(json, content)
    end function

    private function parseData(json as mc.types.assocarray, content as mc.types.node)
      listItems = []
      i = 0
      children = asArray(json.data.children)
      if children.count() = 0
        m.log.warn("For purposes of rapid demo, not dealing with empty rows")
        children = m.makeFakeData()
      end if
      numberOfChildren = children.count()
      cellSize = content.cellSize
      posterSize = `/${cellSize[0]}/${cellSize[1]}`

      while numberOfChildren > 0 and i < 30
        i++
        postDataContainer = children[i mod numberOfChildren]
        if postDataContainer = invalid
          exit while
        end if

        postData = postDataContainer.data
        post = {
          title: postData.title
          selfText: postData.selfText
          thumbnail: postData.thumbnail
          isVideo: postData.is_video
          url: postData.url
          isSelf: postData.isSelf
        }

        itemContent = {
          subType: "ContentNode"
          isSelf: post.isSelf
          title: post.title
          description: post.selfText
          url: post.url
        }
        if post.thumbnail <> "self" and post.thumbnail <> "default" and post.thumbnail <> "image"
          itemContent.SDPosterUrl = post.thumbnail
        end if

        if post.isVideo
          itemContent.videoUrl = postData.secure_media.reddit_video.hls_url
          itemContent.streamformat = "hls"
        end if

        if postData.media <> invalid and postData.media.type = "youtube.com"
          itemContent.videoUrl = postData.url
          itemContent.streamFormat = "youtube"
        end if

        extension = right(postData.url, 4)
        if extension = ".png" or extension = ".jpg"
          itemContent.SDPosterUrl = postData.url
        end if

        'hack
        itemContent.SDPosterUrl = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + posterSize

        m.contentId++

        if postData.media <> invalid and postData.media.reddit_video <> invalid
          itemContent.isRedditVideo = true
        else
          itemContent.isRedditVideo = false
        end if

        listItems.push(itemContent)
      end while

      content.update(listItems, true)
      return true
    end function

    private function makeFakeData()
      fakeData = []
      for i = 0 to 30
        fakeData.push({ data: {
            title: "title"
            selfText: "selfText"
            thumbnail: "thumb"
            isVideo: true
            url: "url"
            isSelf: true
          }
        })

      end for
    end function

  end class
end namespace
