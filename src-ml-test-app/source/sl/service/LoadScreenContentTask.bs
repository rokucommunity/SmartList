import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/sl/service/LoadRowTask.bs"
namespace sl
  @task("LoadScreenContentTask", "Task")
  class LoadScreenContentTask extends mc.BaseClass

    function new()
      super("LoadScreenContentTask")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Entry point
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function execute(args as mc.types.assocarray) as dynamic
      content = asNode(args.content)
      id = asString(args.content.id)

      screenContent = m.createSGNode({
        _type: "Item"
        _forceAddFields: true
        id: id
        title: content.title
        description: content.description
        gridOffset: [0, 170]
        isGrid: false
        isDecorationSupported: true
      })
      m.log.info("Loading screen content for", id)


      'TODO - add some more config and more realistic data
      if id = sl.common.HomeScreenSection.grid
        screenContent.appendChildren(m.makeHome2ChannelRows(27))
        screenContent.gridOffset = [50, 200]
        screenContent.isGrid = true
        screenContent.isDecorationSupported = false
      else if id = sl.common.HomeScreenSection.rails
        screenContent.isDecorationSupported = false
        screenContent.appendChildren(m.makeRowItems(4, 10))
      else if id = sl.common.HomeScreenSection.mixedContent
        screenContent.appendChildren(m.makeRowItems(15, 25))
      else if id = sl.common.HomeScreenSection.news
        screenContent.isDecorationSupported = false
        screenContent.appendChildren(m.makeRowItems(30, 90))
      else if id = sl.common.HomeScreenSection.customRows
        screenContent.appendChildren(m.makeRowItems(60, 65))
      end if

      if not screenContent.isGrid
        m.loadFirst2Rows(screenContent)
      end if

      return screenContent
    end function

    private function makeRowItems(startIndex as integer, endIndex as integer)
      rows = []
      rowIndex = 0
      for i = startIndex to endIndex
        rowType = rnd (10)
        if rowType = 9 or rowIndex = 1 or rowType = 2
          rowHeight = 585
          cellSize = [800, 480]
          numCols = 3
        else if rowType = 5 or rowType = 3
          rowHeight = 360
          cellSize = [450, 260]
          numCols = 3
        else
          rowHeight = 400
          cellSize = [380, 300]
          numCols = 5
        end if

        row = m.createSGNode({
          _type: "ContentNode"
          title: m.titles[i]
          index: rowIndex
          state: sl.common.State.none
          rowHeight: rowHeight
          padding: 20
          margin: 20
          ' insets: [0, -20, 0, 20]
          cellSize: cellSize
          numCols: numCols
          gridOffset: [0, 80]
        })
        rows.push(row)
        rowIndex++
      end for
      return rows
    end function

    private function makeHome2ChannelRows(numberOfRows as integer)
      m.log.info("making", numberOfRows, "channel rows")

      rows = []
      rowIndex = 0
      title = ""
      numCols = 2
      for i = 0 to numberOfRows
        ' title = i = 0 ? "Channels" : ""
        'TODO grid offsets are not being correctly accounted in focus manager
        row = m.createSGNode({
          _type: "ContentNode"
          title: title
          index: rowIndex
          state: sl.common.State.loaded
          rowHeight: 180
          margin: 15
          padding: 30
          ' insets: [-5, 8, 5, 8]
          cellSize: [508, 164]
          numCols: numCols
          gridOffset: [0, 0]
        })
        tiles = []
        for j = i * numCols to (i * numCols) + numCols - 1
          tiles.push(m.createSGNode({
            _type: "ContentNode"
            SDPosterUrl: `pkg:/images/new-channels/channel-${j mod 7}-$$RES$$.webp`
          }))
        end for
        row.appendChildren(tiles)
        rows.push(row)
        rowIndex++
      end for
      return rows
    end function

    private function makeChannelRows(numberOfRows as integer)
      m.log.info("making", numberOfRows, "channel rows")

      rows = []
      rowIndex = 0
      title = ""
      for i = 0 to numberOfRows
        ' title = i = 0 ? "Channels" : ""
        row = m.createSGNode({
          _type: "ContentNode"
          title: title
          index: rowIndex
          state: sl.common.State.loaded
          rowHeight: 260
          margin: 15
          padding: 15
          cellSize: [310, 220]
          numCols: 3
          gridOffset: [0, 50]
        })
        tiles = []
        for j = i * 3 to (i * 3) + 3
          tiles.push(m.createSGNode({
            _type: "ContentNode"
            SDPosterUrl: `pkg:/images/tiles/${j mod 27}-$$RES$$.png`
          }))
        end for
        row.appendChildren(tiles)
        rows.push(row)
        rowIndex++
      end for
      return rows
    end function

    private titles = [
      "science"
      "space"
      "Engineering"
      "gadgets"
      "futurology"
      "environment"
      "ArtificialIntelligence"
      "MachineLearning"
      "compsci"
      "programming"
      "webdev"
      "cybersecurity"
      "linux"
      "softwareengineering"
      "robotics"
      "technews"
      "DataScience"
      "quantumcomputing"
      "biotech"
      "virtualreality"
      "gaming"
      "pcgaming"
      "consolegaming"
      "indiegames"
      "gameDev"
      "cybersecurity"
      "networks"
      "sysadmin"
      "hardware"
      "buildapc"
      "Bitcoin"
      "ethereum"
      "cryptocurrency"
      "investments"
      "stocks"
      "personalfinance"
      "Economics"
      "business"
      "startups"
      "marketing"
      "sciencefiction"
      "fantasy"
      "books"
      "literature"
      "writing"
      "poetry"
      "philosophy"
      "history"
      "documentaries"
      "askscience"
      "askhistorians"
      "askengineers"
      "IAmA"
      "explainlikeimfive"
      "todayilearned"
      "DIY"
      "lifehacks"
      "education"
      "learnprogramming"
      "languagelearning"
      "travel"
      "photography"
      "FoodPorn"
      "cooking"
      "fitness"
      "yoga"
      "meditation"
      "health"
      "nutrition"
      "gardening"
      "sustainability"
      "Astronomy"
      "physics"
      "chemistry"
      "biology"
      "earthscience"
      "oceanography"
      "climatology"
      "geology"
      "anthropology"
      "archaeology"
      "psychology"
      "sociology"
      "legaladvice"
      "news"
      "worldnews"
      "unpopularopinion"
      "Showerthoughts"
      "memes"
      "Jokes"
      "NoStupidQuestions"
      "OutOfTheLoop"
      "interestingasfuck"
      "mildlyinteresting"
      "Damnthatsinteresting"
      "nextfuckinglevel"
      "AmItheAsshole"
      "TIFU"
      "Advice"
      "CasualConversation"
    ]

    private function loadFirst2Rows(screenContentc as mc.types.node)
      try
        task = new sl.LoadRowTask()
        numberRowsToPreload = 2
        for i = 0 to numberRowsToPreload
          rowContent = screenContentc.getChild(i)
          m.log.info("preloading content ")

          task.execute({ content: rowContent })
          state = rowContent.getChildCount() > 0 ? sl.common.State.loaded : sl.common.State.error
          m.log.info("Row", rowContent.title, "loaded with state", state)
          rowContent.state = state
        end for
      catch error
        m.log.error("error preloading rows", error)
      end try
    end function
  end class
end namespace
